<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>A=B Steam One-Instruction Esolang Strategy</title>
      <link href="a-equals-b-en/"/>
      <url>a-equals-b-en/</url>
      
        <content type="html"><![CDATA[<h1 id="ab-is-a-coding-game-that-has-only-one-instruction"><a class="anchor" href="#ab-is-a-coding-game-that-has-only-one-instruction">#</a> A=B is a coding game that has only one instruction</h1><p><span class="exturl" data-url="aHR0cHM6Ly9zdG9yZS5zdGVhbXBvd2VyZWQuY29tL2FwcC8xNzIwODUwL0FCLz8=">A=B on Steam</span></p><div class="note info"><p><a href="https://www.pinghenotes.com/a-equals-b/">點此查看中文版本</a></p></div><div class="note info"><p>2022.4.4 update chapter 4<br />2022.4.2 update chapter 3<br />2022.4.1 update chapter 1, 2</p></div><h1 id="chapter-1-ab"><a class="anchor" href="#chapter-1-ab">#</a> Chapter 1 A=B</h1><p><strong>instruction explanation</strong></p><p><code>string1 = string2</code>  replace  <code>string2</code>  with  <code>string1</code></p><h3 id="1-1-a-to-b"><a class="anchor" href="#1-1-a-to-b">#</a> <strong>1-1 A to B</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , replace all  <code>b</code>  with  <code>a</code></p><pre><code>a = b</code></pre><hr /><h3 id="1-2-uppercase"><a class="anchor" href="#1-2-uppercase">#</a> <strong>1-2 Uppercase</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , replace them with uppercase</p><pre><code>a = Ab = Bc = C</code></pre><hr /><h3 id="1-3-singleton"><a class="anchor" href="#1-3-singleton">#</a> <strong>1-3 SingLeton</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , replace all consecutive letters with single letter</p><pre><code>aa = abb = bcc = c</code></pre><hr /><h3 id="1-4-singleton-2"><a class="anchor" href="#1-4-singleton-2">#</a> <strong>1-4 SingLeton 2</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , delete all consecutive  <code>a</code></p><pre><code>aaa = aaaa = </code></pre><hr /><h3 id="1-5-sort"><a class="anchor" href="#1-5-sort">#</a> <strong>1-5 Sort</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , sort them in alphabetical order</p><pre><code>ba = abca = accb = bc</code></pre><hr /><h3 id="1-6-compare"><a class="anchor" href="#1-6-compare">#</a> <strong>1-6 Compare</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code> , output the most letter</p><pre><code>ab = ba = aa = abb = b</code></pre><hr /><h1 id="chapter-2-keyword"><a class="anchor" href="#chapter-2-keyword">#</a> Chapter 2 Keyword</h1><p><strong>instruction explanation</strong></p><p><code>string1 = (return)string2</code>  if  <code>string1</code>  exist, output  <code>string2</code></p><h3 id="2-1-hello-world"><a class="anchor" href="#2-1-hello-world">#</a> <strong>2-1 Hello World</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , output  <code>helloworld</code></p><pre><code>= (return)helloworld</code></pre><hr /><h3 id="2-2-aaa"><a class="anchor" href="#2-2-aaa">#</a> <strong>2-2 AAA</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , output  <code>true</code>  if there exist at least 3  <code>a</code> , otherwise output  <code>false</code></p><pre><code>b = c = aaa = (return)true= (return)false</code></pre><hr /><h3 id="2-3-exactly-three"><a class="anchor" href="#2-3-exactly-three">#</a> <strong>2-3 Exactly Three</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , output  <code>true</code>  if there exist exactly three letters, otherwise output  <code>false</code></p><pre><code>b = ac = aaaaa = (return)falseaaa = (return)true= (return)false</code></pre><hr /><h3 id="2-4-remainder"><a class="anchor" href="#2-4-remainder">#</a> <strong>2-4 Remainder</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , output the remainder of the string length divided by 3</p><pre><code>b = ac = aaaaa = aaaa = 0aa = 2a = 1</code></pre><hr /><h3 id="2-5-odd"><a class="anchor" href="#2-5-odd">#</a> <strong>2-5 Odd</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , output  <code>true</code>  if all the amounts of the letters are 0 or odd, otherwise output  <code>false</code></p><pre><code>ba = abcb = bcca = acaaa = abbb = bccc = caa = (return)falsebb = (return)falsecc = (return)false = (return)true</code></pre><hr /><h3 id="2-6-the-only"><a class="anchor" href="#2-6-the-only">#</a> <strong>2-6 The Only</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , output  <code>true</code>  if only 1 letter is not consecutive, otherwise output  <code>false</code></p><pre><code>aaa = aabbb = bbccc = ccaa = 'bb = 'cc = 'a = 0b = 0c = 0' = 00 = (return)false0 = (return)true= (return)false</code></pre><hr /><h3 id="2-7-ascend"><a class="anchor" href="#2-7-ascend">#</a> <strong>2-7 Ascend</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , output  <code>true</code>  if the amount of  <code>c &gt; b &gt; a</code> , otherwise output  <code>false</code></p><div class="note info"><p><strong>Problem solving ideas</strong><br />sort first</p></div><pre><code>ca = acba = abcb = bcbc = -b- = -ba- = -c = (return)true= (return)false</code></pre><hr /><h3 id="2-8-most"><a class="anchor" href="#2-8-most">#</a> <strong>2-8 Most</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , output the most common letter</p><pre><code>cb = bcca = acba = abab = --b = b--c = bc =  ac =  a = (return)ab = (return)bc = (return)c</code></pre><hr /><h3 id="2-9-least"><a class="anchor" href="#2-9-least">#</a> <strong>2-9 Least</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , output the least common letter</p><pre><code>cb = bcca = acba = abab = --b = b--c =- = (return)cac = (return)bbc = (return)a</code></pre><hr /><h1 id="chapter-3-start-and-end"><a class="anchor" href="#chapter-3-start-and-end">#</a> Chapter 3 Start and End</h1><p><strong>instruction explanation</strong></p><ol><li><code>(start)string1 = string2</code> 、 <code>(end)string1 = string2</code>  if  <code>string1</code>  is at the start / end of string, replace  <code>string1</code>  with  <code>string2</code></li><li><code>string1 = (start)string2</code> 、 <code>string1 = (end)string2</code>  find the left most  <code>string1</code> , delete it, and add  <code>string2</code>  at the start / end of string</li></ol><h3 id="3-1-remove"><a class="anchor" href="#3-1-remove">#</a> <strong>3-1 Remove</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , remove all  <code>a</code>  at the start and end of the string</p><pre><code>(start)a=(end)a=</code></pre><hr /><h3 id="3-2-spin"><a class="anchor" href="#3-2-spin">#</a> <strong>3-2 Spin</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , move every letters before  <code>a</code>  to the end of the string</p><pre><code>(start)b = (end)b(start)c = (end)c</code></pre><hr /><h3 id="3-3-a-to-b-2"><a class="anchor" href="#3-3-a-to-b-2">#</a> <strong>3-3 A to B 2</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , replace all  <code>a</code>  with  <code>b</code>  at the start and and of the string</p><pre><code>(start)a = (end)-- = (start)b(end)a = (start)++ = (end)b</code></pre><hr /><h3 id="3-4-swap"><a class="anchor" href="#3-4-swap">#</a> <strong>3-4 Swap</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , swap all  <code>a</code>  at the start and all  <code>b</code>  at the end of the string</p><pre><code>(start)a = ++a = a+(end)b = (start)b+ = (end)a</code></pre><hr /><h3 id="3-5-match"><a class="anchor" href="#3-5-match">#</a> <strong>3-5 Match</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , output  <code>true</code>  if the start and end of the string is the same letter</p><pre><code>a+ = (return)trueb- = (return)truec. = (return)true(start)a = (end)+(start)b = (end)-(start)c = (end).= (return)false</code></pre><hr /><h3 id="3-6-most-2"><a class="anchor" href="#3-6-most-2">#</a> <strong>3-6 Most 2</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , output the most common letter and delete the rest</p><pre><code>ba = abca = accb = bcbc = (start)xxa = (start)yac = (start)yab = (start)yx = yyc = ccya = aayb = bb</code></pre><hr /><h3 id="3-7-palindrome"><a class="anchor" href="#3-7-palindrome">#</a> <strong>3-7 Palindrome</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , output  <code>true</code>  if the string is a palindrome, otherwise output  <code>false</code></p><pre><code>a+A- = b+B- = c+C- =(start)a = (end)+A-(start)b = (end)+B-(start)c = (end)+C--+ = (return)false= (return)true</code></pre><hr /><h1 id="chapter-4-once-upon-a-time"><a class="anchor" href="#chapter-4-once-upon-a-time">#</a> Chapter 4 Once Upon A Time</h1><p><strong>instruction explanation</strong></p><p><code>(once)string1 = string2</code>  this instruction only execute one time</p><h3 id="4-1-hello-2"><a class="anchor" href="#4-1-hello-2">#</a> <strong>4-1 Hello 2</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , add hello to the start of the string</p><pre><code>(once)=(start)hello</code></pre><hr /><h3 id="4-2-remove-2"><a class="anchor" href="#4-2-remove-2">#</a> <strong>4-2 Remove 2</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , remove the first 3  <code>a</code></p><pre><code>(once)a = (once)a =(once)a =</code></pre><hr /><h3 id="4-3-cut"><a class="anchor" href="#4-3-cut">#</a> <strong>4-3 Cut</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , remove the first 3 letters</p><pre><code>(once) = ----a = -b = -c = </code></pre><hr /><h3 id="4-4-remove-3"><a class="anchor" href="#4-4-remove-3">#</a> <strong>4-4 Remove 3</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , remove the last 3  <code>a</code></p><pre><code>(once) = (end)---a- = b- = -bc- = -c- = </code></pre><hr /><h3 id="4-5-reverse"><a class="anchor" href="#4-5-reverse">#</a> <strong>4-5 Reverse</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , swap the first and the last letter in the string</p><pre><code>(once) = (start)--a = (end)+a-b = (end)+b-c = (end)+ca+ = (start)ab+ = (start)bc+ = (start)c</code></pre><hr /><h3 id="4-6-reverse-2"><a class="anchor" href="#4-6-reverse-2">#</a> <strong>4-6 Reverse 2</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , reverse the string</p><pre><code>(once) = (start)........a = (start)a.b = (start)b.c = (start)c. = </code></pre><hr /><h3 id="4-7-cut-2"><a class="anchor" href="#4-7-cut-2">#</a> <strong>4-7 Cut 2</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , remove the thrid letter</p><pre><code>(once) = (start)-...a = (start)a.b = (start)b.c = (start)c-a = (start)..-b = (start).. -c = (start).. </code></pre><hr /><h3 id="4-8-clone"><a class="anchor" href="#4-8-clone">#</a> <strong>4-8 Clone</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , clone the first 3 letters and add them at the end of the string</p><pre><code>(once) = (start)...+a = (start)a+b = (start)b+c = (start)c.a = (end)+aa.b = (end)+bb.c = (end)+cc(once) = (start)+++</code></pre><hr /><h3 id="4-9-a-to-b-3"><a class="anchor" href="#4-9-a-to-b-3">#</a> <strong>4-9 A to B 3</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , replace  <code>a</code>  with  <code>b</code> , replace  <code>b</code>  with  <code>a</code></p><pre><code>(once) = ..a = b..b = a..c = c.. = </code></pre><hr /><h3 id="4-10-half"><a class="anchor" href="#4-10-half">#</a> <strong>4-10 Half</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , remove letters in odd position</p><pre><code>(once) = ...a = a...b = b...c = c..a = .. .b = .. .c = .. . =</code></pre><hr /><h3 id="4-11-clone-2"><a class="anchor" href="#4-11-clone-2">#</a> <strong>4-11 Clone 2</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , clone the string</p><pre><code>(once) = .A = (end)+aB = (end)+bC = (end)+c.a = aA..b = bB..c = cC.. =+ =  </code></pre><hr /><h3 id="4-12-to-b-or-not-to-b"><a class="anchor" href="#4-12-to-b-or-not-to-b">#</a> <strong>4-12 To B or not to B</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , replace  <code>a</code>  with  <code>b</code>  if ant  <code>b</code>  exist, otherwise replace  <code>a</code>  with  <code>c</code></p><pre><code>(once)b = b- (once)- = (start)--a = b--b = b--c = c-- = a = c </code></pre><hr /><h3 id="4-13-center"><a class="anchor" href="#4-13-center">#</a> <strong>4-13 Center</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , output the middle letter of the string</p><pre><code>(once) = -(end)-a = a(end)-b = b(end)-c = c-a = (end)--b = (end)--c = (end)-a- = (start)-b- = (start)-c- = (start)-</code></pre><hr /><h3 id="4-14-center-2"><a class="anchor" href="#4-14-center-2">#</a> <strong>4-14 Center 2</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , remove the middle letter of the string</p><pre><code>(once) = -(once) = (end).-a. = -b. = -c. =a.+ = .ab.+ = .bc.+ = .ca+ = +ab+ = +bc+ = +ct = (end)+-a = ta--b = tb--c = tc-</code></pre><hr /><h3 id="4-15-expansion"><a class="anchor" href="#4-15-expansion">#</a> <strong>4-15 Expansion</strong></h3><p>given a string contains  <code>a</code> ,  <code>b</code>  and  <code>c</code> , repeat the  <code>i</code> th letter  <code>i</code>  times</p><pre><code>(once) = --a = a-x-b = b-x-c = c-x+a- = aa-x+b- = bb-x+c- = cc-x+a = a++b = b++c = c+-x = +-+ =- =</code></pre><hr /><h3 id="4-16-merge"><a class="anchor" href="#4-16-merge">#</a> <strong>4-16 Merge</strong></h3><p>given 2 string contains  <code>a</code>  and  <code>b</code> , merge 2 strings</p><pre><code>(once) = ||, = - = (end)yay = (start)aby = (start)bax = (start)abx = (start)b, = x,-</code></pre><hr />]]></content>
      
      
      <categories>
          
          <category> game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> A=B </tag>
            
            <tag> steam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11792 - Krochanska is Here</title>
      <link href="UVa-11792-Krochanska-is-Here/"/>
      <url>UVa-11792-Krochanska-is-Here/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11792-krochanska-is-here"><a class="anchor" href="#題目-uva-11792-krochanska-is-here">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExNzky">UVa 11792 - Krochanska is Here</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給 <code>m</code>  條路線，其中有重複的車站稱為 <code>重點車站</code> ，求哪一個 <code>重點車站</code> 到其他所有 <code>重點車站</code> 的距離最短<br /> (題目中文翻譯可參考: <span class="exturl" data-url="aHR0cHM6Ly9tODAxMjZjb2xpbi5naXRodWIuaW8vYmxvZy9hcnRpY2xlcy8lRTclQkYlQkIlRTglQUQlQUYvdXZhL3V2YTExNzkyLw==">天然呆 翻譯 UVa 11792 Krochanska is Here!</span>)</p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>t</code> ，代表測資數<br />每筆測資先輸入兩個整數 <code>n</code> 、 <code>m</code> ， <code>n</code>  為車站數、 <code>m</code>  為路線數<br />接下來有 <code>m</code>  行，每行輸入數個整數，代表此路線的車站，以 <code>0</code>  當作結尾</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出哪一個 <code>重點車站</code> 到其他所有 <code>重點車站</code> 的距離最短</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><p>此題為 <code>dijkstra</code>  演算法的應用</p></div><p>先建表，由於車站到車站是雙向的，屬於無向圖，所以需要建雙邊<br />使用 <code>cross</code>  紀錄車站是否為 <code>重點車站</code> <br />對每個 <code>重點車站</code> 跑 <code>dijkstra</code>  演算法，找尋此 <code>重點車站</code> 到其他每個 <code>重點車站</code> 的距離<br />因為所有車站到車站的距離都視為相同，所以不需要紀錄 <code>weight</code> ， <code>dijkstra</code>  使用普通的 <code>queue</code>  即可，不需要使用 <code>priority queue</code> <br /> 最後再比對哪個 <code>重點車站</code> 到其他所有 <code>重點車站</code> 的距離最短</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> G<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> cross<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">int</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dist</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">vis</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>dist<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">int</span> u <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>cross<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>cnt <span class="token operator">+=</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">return</span> cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>cin <span class="token operator">>></span> t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token keyword">int</span> v<span class="token punctuation">,</span> u<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">int</span> Min <span class="token operator">=</span> INT_MAX<span class="token punctuation">,</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>G<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>cross<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>cin <span class="token operator">>></span> v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token operator">++</span>cross<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> u<span class="token punctuation">,</span> u<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token operator">++</span>cross<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>v <span class="token operator">=</span> u<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="78"></td><td><pre></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>cross<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">&lt;</span> Min<span class="token punctuation">)</span> ret <span class="token operator">=</span> i<span class="token punctuation">,</span> Min <span class="token operator">=</span> cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Krochanska is in: "</span> <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9tODAxMjZjb2xpbi5naXRodWIuaW8vYmxvZy9hcnRpY2xlcy8lRTclQkYlQkIlRTglQUQlQUYvdXZhL3V2YTExNzkyLw==">https://m80126colin.github.io/blog/articles/%E7%BF%BB%E8%AD%AF/uva/uva11792/</span><br /><span class="exturl" data-url="aHR0cHM6Ly90aGVyaXNlb2ZkYXZpZC5naXRodWIuaW8vMjAyMS8wOS8xNC9VVmEvVVZhMTE3OTIv">https://theriseofdavid.github.io/2021/09/14/UVa/UVa11792/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> queue </tag>
            
            <tag> dijkstra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10800 - Not That Kind of Graph</title>
      <link href="UVa-10800-Not-That-Kind-of-Graph/"/>
      <url>UVa-10800-Not-That-Kind-of-Graph/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10800-not-that-kind-of-graph"><a class="anchor" href="#題目-uva-10800-not-that-kind-of-graph">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwODAw">UVa 10800 - Not That Kind of Graph</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個由 <code>R</code> 、 <code>F</code> 、 <code>C</code>  組成的字串，使用 <code>/</code> 、 <code>\</code> 、 <code>_</code> 畫出圖表</p><ol><li><code>R</code>  : 上升一格</li><li><code>F</code>  : 下降一格</li><li><code>C</code>  : 維持同一格</li></ol><hr /><p><strong>INPUT:</strong><br /> 輸入一個整數 <code>T</code> ，代表測資數<br />每筆測資輸入一個字串</p><hr /><p><strong>OUTPUT:</strong><br /> 使用 <code>/</code> 、 <code>\</code> 、 <code>_</code> 畫出的圖表</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先計算此圖表的最大高度，存入變數 <code>len</code> <br /> 宣告一個二維陣列，將中點設為 <code>len</code> ，上下各擁有 <code>len</code>  個空間，長度則是輸入的字串長度 + 1<br /> 接著處理輸入字串的符號，在對應位置填入 <code>/</code> 、 <code>\</code> 、 <code>_</code> <br />最後再按照格式輸出</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>cin <span class="token operator">>></span> str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> c <span class="token operator">:</span> str<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'R'</span><span class="token punctuation">)</span> <span class="token operator">++</span>tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'F'</span><span class="token punctuation">)</span> <span class="token operator">--</span>tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>len <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token operator">-</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span> <span class="token function">V</span><span class="token punctuation">(</span>len <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">int</span> x <span class="token operator">=</span> len<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> c <span class="token operator">:</span> str<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'R'</span><span class="token punctuation">)</span> V<span class="token punctuation">[</span>x<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'F'</span><span class="token punctuation">)</span> V<span class="token punctuation">[</span><span class="token operator">--</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\\'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">else</span> V<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'_'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case #"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>cnt <span class="token operator">&lt;&lt;</span> <span class="token string">":\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> V<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"| "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> j <span class="token operator">:</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"+"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">'-'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11078 - Open Credit System</title>
      <link href="UVa-11078-Open-Credit-System/"/>
      <url>UVa-11078-Open-Credit-System/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11078-open-credit-system"><a class="anchor" href="#題目-uva-11078-open-credit-system">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExMDc4">UVa 11078 - Open Credit System</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給 <code>N</code>  個學生的分數，學生的排序為較年長至較年輕，求較年長的學生最多比較年輕的學生多幾分</p><hr /><p><strong>INPUT:</strong><br /> 輸入一個整數 <code>T</code> ，代表測資數<br />每筆測資先輸入一個整數 <code>N</code> ，代表學生的數量<br />接下來有 <code>N</code>  個整數，代表學生的成績 (排愈前面代表學生愈年長)</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出較年長的學生最多比較年輕的學生多幾分</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>由較年長至較年輕遍歷學生的成績，使用一個變數 <code>Max</code>  紀錄目前最高分，再依序比出差最多的值</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">,</span> N<span class="token punctuation">,</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> V<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">int</span> Max <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>cin <span class="token operator">>></span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>N<span class="token operator">--</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> a<span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">int</span> num <span class="token operator">=</span> V<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> V<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>Max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Max<span class="token punctuation">,</span> num <span class="token operator">-</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>num <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> Max <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 118 - Mutant Flatworld Explorers</title>
      <link href="UVa-118-Mutant-Flatworld-Explorers/"/>
      <url>UVa-118-Mutant-Flatworld-Explorers/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-118-mutant-flatworld-explorers"><a class="anchor" href="#題目-uva-118-mutant-flatworld-explorers">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExOA==">UVa 118 - Mutant Flatworld Explorers</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個 <code>x * y</code>  大小的棋盤與機器人的位置與朝向<br />再經過一連串的指令後，求機器人最後的位置與朝向<br />指令一共有 3 種</p><ol><li><code>L</code>  : 左轉 <code>90</code>  度</li><li><code>R</code>  : 右轉 <code>90</code>  度</li><li><code>F</code>  : 前進一格</li></ol><div class="note info"><p>當機器人移動超出棋盤時，它就會永遠 <code>LOST</code> <br /> 每當機器人在一個地方 <code>LOST</code>  後，它會在原地留下一個記號，避免未來的機器人在同樣的地方 <code>LOST</code></p></div><hr /><p><strong>INPUT:</strong><br /> 先輸入兩個整數 <code>x</code> 、 <code>y</code> ，代表棋盤的大小為 <code>x * y</code> <br /> 每筆測資輸入兩個整數與一個字元，代表一開始的位置與朝向<br />接著輸入一個字串，代表移動</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出機器人最後的位置與朝向<br />若機器人超出棋盤，則再輸出 <code>LOST</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>使用變數紀錄每一步的位置與朝向<br />機器人每走一步，即時判斷它是否有超出棋盤的邊界，當超出邊界時，將原本的位置紀錄</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> CI <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span><span class="token string">'N'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'S'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'W'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">></span> IC <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'N'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'W'</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> M <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> drop<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> pos<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">char</span> p<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>cin <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> p <span class="token operator">&amp;&amp;</span> cin <span class="token operator">>></span> str<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">bool</span> lost <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>pos <span class="token operator">=</span> CI<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> c <span class="token operator">:</span> str<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'R'</span><span class="token punctuation">)</span> pos <span class="token operator">=</span> <span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'L'</span><span class="token punctuation">)</span> pos <span class="token operator">=</span> <span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">int</span> new_a <span class="token operator">=</span> a <span class="token operator">+</span> M<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">int</span> new_b <span class="token operator">=</span> b <span class="token operator">+</span> M<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>new_a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> new_a <span class="token operator">></span> x <span class="token operator">||</span> new_b <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> new_b <span class="token operator">></span> y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>lost <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">:</span> drop<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> i <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> j<span class="token punctuation">)</span> lost <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>lost<span class="token punctuation">)</span> drop<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">else</span> a <span class="token operator">=</span> new_a<span class="token punctuation">,</span> b <span class="token operator">=</span> new_b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>lost<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> IC<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>lost <span class="token operator">?</span> <span class="token string">" LOST\n"</span> <span class="token operator">:</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> string </tag>
            
            <tag> unordered_map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11728 - Alternate Task</title>
      <link href="UVa-11728-Alternate-Task/"/>
      <url>UVa-11728-Alternate-Task/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11728-alternate-task"><a class="anchor" href="#題目-uva-11728-alternate-task">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExNzI4">UVa 11728 - Alternate Task</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個正整數 <code>N</code> ，代表某數的因數和，求某數</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資輸入一個整數 <code>N</code> <br /> 當 <code>N = 0</code>  時結束</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出一個因數和剛好為 <code>N</code>  的正整數<br />若無則輸出 <code>-1</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>使用 <code>unordered_map</code>  建表，將 <code>1 ~ 1000</code>  的因數和計算出來，再查表輸出答案即可</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> M<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> sum <span class="token operator">+=</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>M<span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N<span class="token punctuation">,</span> N<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>cnt <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>M<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">?</span> M<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> unordered_map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 1260 - Sales</title>
      <link href="UVa-1260-Sales/"/>
      <url>UVa-1260-Sales/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-1260-sales"><a class="anchor" href="#題目-uva-1260-sales">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEyNjA=">UVa 1260 - Sales</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一連串每日的銷售額，求銷售額大於等於以往銷售額的總數</p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>t</code> ，代表測資數<br />每筆測資第一行輸入一個整數 <code>n</code> <br /> 接下來有 <code>n</code>  個整數，代表每日的銷售額</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出銷售額大於等於以往銷售額的總數</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>使用 <code>vector</code>  儲存資料<br />直接使用 <code>2</code>  個迴圈進行判斷即可</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">,</span> N<span class="token punctuation">,</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> V<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>cin <span class="token operator">>></span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>N<span class="token operator">--</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> a<span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> V<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> V<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 12627 - Erratic Expansion</title>
      <link href="UVa-12627-Erratic-Expansion/"/>
      <url>UVa-12627-Erratic-Expansion/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-12627-erratic-expansion"><a class="anchor" href="#題目-uva-12627-erratic-expansion">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEyNjI3">UVa 12627 - Erratic Expansion</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>一開始有一顆紅氣球，每過 <code>1</code>  小時，紅氣球會變成 <code>3</code>  顆紅氣球與 <code>1</code>  顆藍氣球、藍氣球會變成 <code>4</code>  顆藍氣球<br />求過了 <code>k</code>  小時後，從第 <code>a</code>  行到第 <code>b</code>  行的氣球數和</p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>t</code> ，代表測資數<br />每筆測資輸入三個整數 <code>k</code> 、 <code>a</code> 、 <code>b</code> ，代表過了 <code>k</code>  小時，行數 <code>a</code>  與 <code>b</code></p><hr /><p><strong>OUTPUT:</strong><br /> 輸出過了 <code>k</code>  小時後，從第 <code>a</code>  行到第 <code>b</code>  行的氣球數和</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>假設以下公式 <code>dfs(k, i)</code>  為過了 <code>k</code>  小時後，最下面 <code>i</code>  行的氣球數和<br /> <code>第a行到第b行的氣球數和</code> 可視為 <code>第a行到最後一行的氣球數和 - 第b + 1行到最後一行的氣球數和</code> <br />所以可以寫成  <code>dfs(k, n - a + 1) - dfs(k, n - b)</code></p><div class="note info"><p><code>n</code>  為總行數<br />假設 <code>k = 3</code> 、 <code>a = 3</code> 、 <code>b = 7</code> <br /> <code>n</code>  則為 <code>2^3 = 8</code> <br /> 上述的算式可以寫成  <code>dfs(3, 8 - 3 + 1) - dfs(k, 8 - 7)</code> <br /> 化簡為 <code>dfs(3, 6) - dfs(3, 1)</code></p></div><p>再由以下關係，計算出紅氣球的總數<br />當 <code>i &gt;= 2^(k - 1)</code>  時， <code>dfs(k, i) = dfs(k - 1, i - 2^(k - 1)) * 2 + 3^(k - 1)</code> <br /> 當 <code>i &lt; 2^(k - 1)</code>  時， <code>dfs(k, i) = dfs(k -1, i)</code> <br /> 寫成 <code>recursive</code>  後即可求出答案</p><div class="note info"><p>同樣以假設 <code>k = 3</code> 、 <code>a = 3</code> 、 <code>b = 7</code>  為例<br />上面步驟做到 <code>dfs(3, 6) - dfs(3, 1)</code></p><p>首先先處理 <code>dfs(3, 6)</code> <br /> 由於 <code>i = 6 &gt;= 2^(k - 1) = 4</code> ，所以 <code>dfs(3, 6) = dfs(3 - 1, 6 - 2^(3 - 1)) * 2 + 3^(3 - 1) = dfs(2, 2) * 2 + 3^2</code> <br /> 這時候 <code>recursive</code>  呼叫 <code>dfs(2, 2)</code> ，由於 <code>i = 2 &gt;= 2^(k - 1) = 2</code> ，所以 <code>dfs(2, 2) = dfs(2 - 1, 2 - 2^(2 - 1)) * 2 + 3^(2 - 1) = dfs(1, 0) * 2 + 3</code> <br /> 這時候 <code>recursive</code>  呼叫 <code>dfs(1, 0)</code> ， <code>dfs(1, 0)</code>  回傳 <code>0</code> ，所以 <code>dfs(2, 2)</code>  回傳 <code>0 * 2 + 3 = 3</code> <br /> 最後 <code>dfs(3, 6)</code>  回傳 <code>3 * 2 + 9 = 15</code></p><p>再處理 <code>dfs(3, 1)</code> <br /> 由於 <code>i = 1 &lt; 2^(k - 1) = 4</code> ，所以 <code>dfs(3, 1) = dfs(2, 1)</code> <br /> 這時候 <code>recursive</code>  呼叫 <code>dfs(2, 1)</code> ，由於 <code>i = 1 &lt; 2^(k - 1) = 2</code> ，所以 <code>dfs(2, 1) = dfs(1, 1)</code> <br /> 這時候 <code>recursive</code>  呼叫 <code>dfs(1, 1)</code> ，回傳 <code>1</code> ， <code>dfs(2, 1)</code>  回傳 <code>1</code> ，所以最後 <code>dfs(3, 1)</code>  也回傳 <code>1</code></p><p><code>dfs(3, 6) - dfs(3, 1)</code>  結果為 <code>15 - 1 = 14</code></p></div><div class="note info"><p>需要使用 <code>long long</code>  不然會爆</p></div><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span>  k<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">long</span> <span class="token keyword">long</span> n <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> n <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">dfs</span><span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">-</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">dfs</span><span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">int</span> t<span class="token punctuation">,</span> k<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> Case <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>cin <span class="token operator">>></span> t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>cin <span class="token operator">>></span> k <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">long</span> <span class="token keyword">long</span> n <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>Case <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> n <span class="token operator">-</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">dfs</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> n <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudHdibG9ncy5uZXQvYS81ZTUwNWYzM2JkOWVlZTIxMTdiZWIwYjc=">https://www.twblogs.net/a/5e505f33bd9eee2117beb0b7</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11659 - Informants</title>
      <link href="UVa-11659-Informants/"/>
      <url>UVa-11659-Informants/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11659-informants"><a class="anchor" href="#題目-uva-11659-informants">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExNjU5">UVa 11659 - Informants</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>題目給 <code>n</code>  個線人，並給 <code>a</code>  條規則，求最大可信賴的線人數</p><div class="note info"><p>線人編號由 <code>1 ~ n</code> <br /> 若 <code>1</code>  可信賴，則 <code>1</code>  說的規則為真<br />若 <code>1</code>  不可信賴，則 <code>1</code>  說的規則可能為真或假</p></div><hr /><p><strong>INPUT:</strong><br /> 每筆測資先輸入兩個整數 <code>n</code> 、 <code>a</code> ， <code>n</code>  代表線人數、 <code>a</code>  代表規則數<br />接下來有 <code>a</code>  行，每行輸入兩個整數 <code>x</code> 、 <code>y</code></p><ul><li>若 <code>y &gt; 0</code> ，代表線人 <code>x</code>  信賴線人 <code>y</code></li><li>若 <code>y &lt; 0</code> ，代表線人 <code>x</code>  不信賴線人 <code>y</code></li></ul><hr /><p><strong>OUTPUT:</strong><br /> 輸出最大可信賴的線人數</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>使用 <code>correct</code>  與 <code>wrong</code>  分別儲存信賴與不信賴，儲存分法為 <code>2進位</code></p><div class="note info"><p>若線人 <code>1</code>  信賴線人 <code>3</code>  與 <code>4</code> ，則表示成 <code>correct[1] = 1100</code> <br /> 若線人 <code>2</code>  不信任線人 <code>1</code> 、 <code>3</code>  與 <code>4</code> ，則表示成 <code>wrong[2] = 1101</code></p></div><p>遍歷所有可能的線人組合</p><div class="note info"><p>若 <code>n = 4</code> ，則遍歷 <code>0000</code> 、 <code>0001</code>  、 ... 、 <code>1111</code>  所有可能</p></div><p>分別判斷各個線人是否存在這次的線人組合中</p><div class="note info"><p><code>j</code>  代表第 <code>j</code>  位線人， <code>j</code>  屬於 <code>1 ~ n</code></p></div><p>若存在則進一步判斷規則是否有矛盾</p><div class="note info"><p>線人 <code>j</code>  不信賴的線人是否存在於這次線人組合<br />線人 <code>j</code>  信賴的線人是否不存在於這次線人組合<br />若以上有至少一項為 <code>是</code> ，則此線人組合矛盾</p></div><p>當此組合中的線人全部判斷完，且規則都沒有矛盾，則可計算這次可信賴的線人數</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> a<span class="token punctuation">,</span> n <span class="token operator">+</span> a<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="21"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">correct</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">wrong</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">int</span> max_num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">// input</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>cin <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> correct<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// if 1 trust 3 and 4, correct[1] = 1100</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">else</span> wrong<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">-</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token comment">// all possible combination</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">bool</span> feasible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token comment">// each person </span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// j doesn't exist in i</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> wrong<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> correct<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> correct<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// is there a contradiction</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>feasible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>feasible<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cpy <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cpy<span class="token punctuation">)</span> cnt <span class="token operator">+=</span> cpy <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">,</span> cpy <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// count the number of '1' in i (bitwise)</span></pre></td></tr><tr><td data-num="53"></td><td><pre>ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly90aGVyaXNlb2ZkYXZpZC5naXRodWIuaW8vMjAyMS8wNC8yMy9VVmEvVVZhMTE2NTkv">https://theriseofdavid.github.io/2021/04/23/UVa/UVa11659/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> bitwise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11360 - Have Fun with Matrices</title>
      <link href="UVa-11360-Have-Fun-with-Matrices/"/>
      <url>UVa-11360-Have-Fun-with-Matrices/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11360-have-fun-with-matrices"><a class="anchor" href="#題目-uva-11360-have-fun-with-matrices">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExMzYw">UVa 11360 - Have Fun with Matrices</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個 <code>n * n</code>  的矩陣，有以下 <code>5</code>  種指令可以控制矩陣變換，輸出執行完指令的矩陣</p><ol><li><code>row a b</code>  : 交換 <code>row a</code>  與 <code>row b</code></li><li><code>col a b</code>  : 交換 <code>col a</code>  與 <code>col b</code></li><li><code>inc</code>  : 將矩陣所有值 <code>+1</code>  後取 <code>10</code>  的餘數</li><li><code>dec</code>  : 將矩陣所有值 <code>-1</code>  後取 <code>10</code>  的餘數</li><li><code>transpose</code>  : 對矩陣進行轉置</li></ol><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>t</code> ，代表測資數<br />每筆測資先輸入一個整數 <code>n</code> ，代表矩陣的大小<br />接下來輸入 <code>n * n</code>  個整數，代表矩陣的值<br />之後輸入一個整數 <code>m</code> ，代表指令數<br />接下來輸入 <code>m</code>  個字串</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出執行完指令的矩陣</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先將矩陣的值存入二維陣列<br />之後隨著指令及時更動矩陣內的值<br />最後再將結果輸出即可</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> Case <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>cin <span class="token operator">>></span> t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>cin <span class="token operator">>></span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">V</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tmp<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>cin <span class="token operator">>></span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>tmp <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>cin <span class="token operator">>></span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>cin <span class="token operator">>></span> str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token string">"row"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token function">swap</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> V<span class="token punctuation">[</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token string">"col"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token function">swap</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token string">"inc"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token string">"dec"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token function">swap</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> V<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case #"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>Case <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> V<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> j <span class="token operator">:</span> i<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10326 - The Polynomial Equation</title>
      <link href="UVa-10326-The-Polynomial-Equation/"/>
      <url>UVa-10326-The-Polynomial-Equation/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10326-the-polynomial-equation"><a class="anchor" href="#題目-uva-10326-the-polynomial-equation">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwMzI2">UVa 10326 - The Polynomial Equation</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給你一個方程式的 <code>n</code>  組解，求此方程式展開的樣子</p><hr /><p><strong>INPUT:</strong><br /> 輸入一個整數 <code>n</code> ，代表方程式有 <code>n</code>  組解<br />接下來輸入 <code>n</code>  個整數，各代表一組解<br />直到 <code>EOF</code>  結束</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出展開後的方程式</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>假設解為 <code>k1, k2, ..., kn</code> ，則方程式可以表示成 <code>(x - k1) * (x - k2) * ... * (x - kn) = 0</code> <br /> 由此可知能透過乘法將方程式展開 (類似於大數乘法)<br /> 比較要注意的是這題的輸出格式很複雜</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">,</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> buf <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>cin <span class="token operator">>></span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> t <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">-</span>num<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> <span class="token function">mul</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buf<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>mul<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">+=</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>mul<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mul<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> mul<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>buf <span class="token operator">=</span> mul<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> buf<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">" + "</span> <span class="token operator">:</span> <span class="token string">" - "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token operator">-</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"x"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"^"</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" = 0\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 13171 - Pixel Art</title>
      <link href="UVa-13171-Pixel-Art/"/>
      <url>UVa-13171-Pixel-Art/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-13171-pixel-art"><a class="anchor" href="#題目-uva-13171-pixel-art">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEzMTcx">UVa 13171 - Pixel Art</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給 <code>m</code> 、 <code>y</code> 、 <code>c</code>  三種顏色的數量，與使用的顏色，求 <code>m</code> 、 <code>y</code> 、 <code>c</code>  三種顏色的數量是否足夠<br /> (總共有 <code>8</code>  種顏色，分別會消耗不同數量的 <code>m</code> 、 <code>y</code> 、 <code>c</code> )</p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>t</code> ，代表測資數<br />接下來有 <code>t</code>  行<br />每行有 <code>3</code>  個整數 <code>m</code> 、 <code>y</code> 、 <code>c</code> ，代表對應顏色的數量<br />與 <code>1</code>  個字串 <code>str</code> ，代表使用的顏色</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>m</code> 、 <code>y</code> 、 <code>c</code>  的數量是否足夠<br />足夠則輸出 <code>YES</code>  與 <code>m</code> 、 <code>y</code> 、 <code>c</code>  的剩餘數量<br />不夠則輸出 <code>NO</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>每使用一種顏色，直接減去 <code>m</code> 、 <code>y</code> 、 <code>c</code>  的數量<br />若最後都大於零則為足夠</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">int</span> t<span class="token punctuation">,</span> m<span class="token punctuation">,</span> y<span class="token punctuation">,</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>string s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>cin <span class="token operator">>></span> t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>cin <span class="token operator">>></span> m <span class="token operator">>></span> y <span class="token operator">>></span> c <span class="token operator">>></span> s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> s<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token string">'M'</span><span class="token punctuation">)</span> <span class="token operator">--</span>m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token string">'Y'</span><span class="token punctuation">)</span> <span class="token operator">--</span>y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">)</span> <span class="token operator">--</span>c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token string">'R'</span><span class="token punctuation">)</span> <span class="token operator">--</span>m<span class="token punctuation">,</span> <span class="token operator">--</span>y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token string">'V'</span><span class="token punctuation">)</span> <span class="token operator">--</span>m<span class="token punctuation">,</span> <span class="token operator">--</span>c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token string">'G'</span><span class="token punctuation">)</span> <span class="token operator">--</span>y<span class="token punctuation">,</span> <span class="token operator">--</span>c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token string">'B'</span><span class="token punctuation">)</span> <span class="token operator">--</span>m<span class="token punctuation">,</span> <span class="token operator">--</span>y<span class="token punctuation">,</span> <span class="token operator">--</span>c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES "</span> <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10642 - Can You Solve It</title>
      <link href="UVa-10642-Can-You-Solve-It/"/>
      <url>UVa-10642-Can-You-Solve-It/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10642-can-you-solve-it"><a class="anchor" href="#題目-uva-10642-can-you-solve-it">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwNjQy">UVa 10642 - Can You Solve It</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個平面座標的移動規則<br /> <code>(0, 0)</code>  -&gt;  <code>(0, 1)</code>  -&gt;  <code>(1, 0)</code>  -&gt;  <code>(0, 2)</code>  -&gt;  <code>(1, 1)</code>  -&gt;  <code>(2, 0)</code>  -&gt;  <code>(0, 3)</code>  ... 以此類推<br />求初始座標 <code>(x1, y1)</code>  與目的座標 <code>(x2, y2)</code>  的距離</p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>t</code> ，代表測資數<br />接下來有 <code>t</code>  行，每行有 <code>4</code>  個整數 <code>x1</code> 、 <code>y1</code> 、 <code>x2</code> 、 <code>y2</code> ，代表初始座標 <code>(x1, y1)</code>  與目的座標 <code>(x2, y2)</code></p><hr /><p><strong>OUTPUT:</strong><br /> 輸出從初始座標 <code>(x1, y1)</code>  到目的座標 <code>(x2, y2)</code>  的距離</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>使用一個變數 <code>cnt</code>  紀錄距離<br />先將初始座標 <code>(x1, y1)</code>  移至 <code>y軸</code> 上，也就是 <code>x1</code>  歸零， <code>cnt</code>  減去移動的距離<br />再將目的座標 <code>(x2, y2)</code>  移至 <code>y軸</code> 上，也就是 <code>x2</code>  歸零， <code>cnt</code>  加上移動的距離<br />最後再算 <code>(0, y1)</code>  到 <code>(0, y2)</code>  的距離，公式為 <code>y1 + 1</code>  累加至 <code>y2</code></p><div class="note info"><p>假設現在要從 <code>(1, 2)</code>  移動到 <code>(3, 4)</code></p><p>將初始座標 <code>(1, 2)</code>  往左移變成 <code>(0, 3)</code> ， <code>cnt</code>  為 <code>0 - 1 = -1</code> <br /> 將目的座標 <code>(3, 4)</code>  往左移 <code>3</code>  次，變成 <code>(0, 7)</code> ， <code>cnt</code>  為 <code>-1 + 3 = 2</code> <br /> 現在問題變成要將 <code>(0, 3)</code>  移動到 <code>(0, 7)</code> ，按照公式需要加 <code>4, 5, 6, 7</code> ，所以 <code>cnt</code>  為 <code>2 + 4 + 5 + 6 + 7 = 24</code></p></div><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">int</span> t<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">int</span> Case <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>cin <span class="token operator">>></span> t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>cin <span class="token operator">>></span> x1 <span class="token operator">>></span> y1 <span class="token operator">>></span> x2 <span class="token operator">>></span> y2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>x1<span class="token punctuation">)</span> <span class="token operator">--</span>x1<span class="token punctuation">,</span> <span class="token operator">++</span>y1<span class="token punctuation">,</span> <span class="token operator">--</span>cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>x2<span class="token punctuation">)</span> <span class="token operator">--</span>x2<span class="token punctuation">,</span> <span class="token operator">++</span>y2<span class="token punctuation">,</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> y1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> y2<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cnt <span class="token operator">+=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>Case <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 12908 - The book thief</title>
      <link href="UVa-12908-The-book-thief/"/>
      <url>UVa-12908-The-book-thief/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-12908-the-book-thief"><a class="anchor" href="#題目-uva-12908-the-book-thief">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEyOTA4">UVa 12908 - The book thief</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個整數 <code>s</code> ， <code>s</code>  符合 <code>1 + 2 + 3 + ... + n - x</code> ，也就是從 <code>1</code>  開始的累加，但其中少了一頁<br />其中 <code>n</code>  為總頁數、 <code>x</code>  為缺少的頁碼<br />求 <code>n</code>  與 <code>s</code></p><hr /><p><strong>INPUT:</strong><br /> 每筆測資輸入一個整數 <code>s</code> <br /> 當 <code>s</code>  為 <code>0</code>  時結束</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出缺少的頁碼 <code>x</code>  與總頁數 <code>n</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>使用一個變數 <code>sum</code>  維持現在的累加值， <code>i</code>  為累加的次數<br />當 <code>sum &gt; s</code>  時， <code>sum - s</code>  即為缺少的頁碼， <code>i</code>  即為總頁數</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n<span class="token punctuation">,</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> sum <span class="token operator">+=</span> <span class="token operator">++</span>i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">-</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A=B Steam 指令編寫遊戲 攻略</title>
      <link href="a-equals-b/"/>
      <url>a-equals-b/</url>
      
        <content type="html"><![CDATA[<h1 id="ab-是一款只有一條指令的編碼遊戲"><a class="anchor" href="#ab-是一款只有一條指令的編碼遊戲">#</a> A=B 是一款只有一條指令的編碼遊戲</h1><p><span class="exturl" data-url="aHR0cHM6Ly9zdG9yZS5zdGVhbXBvd2VyZWQuY29tL2FwcC8xNzIwODUwL0FCLz8=">A=B Steam 遊戲連結</span></p><div class="note info"><p><a href="https://www.pinghenotes.com/a-equals-b-en/">Click here to see english version</a></p></div><div class="note info"><p>2022.4.4 update chapter 4<br />2022.4.2 update chapter 3<br />2022.4.1 update chapter 1, 2</p></div><h1 id="第一章-ab"><a class="anchor" href="#第一章-ab">#</a> 第一章 A=B</h1><p><strong>指令說明</strong></p><p><code>string1 = string2</code>  將 <code>string1</code>  替換成 <code>string2</code></p><h3 id="1-1-a-to-b"><a class="anchor" href="#1-1-a-to-b">#</a> <strong>1-1 A to B</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，將字串中的 <code>a</code>  改成 <code>b</code></p><pre><code>a = b</code></pre><hr /><h3 id="1-2-uppercase"><a class="anchor" href="#1-2-uppercase">#</a> <strong>1-2 Uppercase</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，將字串中的字母改成大寫</p><pre><code>a = Ab = Bc = C</code></pre><hr /><h3 id="1-3-singleton"><a class="anchor" href="#1-3-singleton">#</a> <strong>1-3 SingLeton</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，將所有連續字母改成單個字母</p><pre><code>aa = abb = bcc = c</code></pre><hr /><h3 id="1-4-singleton-2"><a class="anchor" href="#1-4-singleton-2">#</a> <strong>1-4 SingLeton 2</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，將所有連續的 <code>a</code>  刪除</p><pre><code>aaa = aaaa = </code></pre><hr /><h3 id="1-5-sort"><a class="anchor" href="#1-5-sort">#</a> <strong>1-5 Sort</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，以字母表順序進行排序</p><pre><code>ba = abca = accb = bc</code></pre><hr /><h3 id="1-6-compare"><a class="anchor" href="#1-6-compare">#</a> <strong>1-6 Compare</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code>  的字串，輸出最多的字母</p><pre><code>ab = ba = aa = abb = b</code></pre><hr /><h1 id="第二章-keyword"><a class="anchor" href="#第二章-keyword">#</a> 第二章 Keyword</h1><p><strong>指令說明</strong></p><p><code>string1 = (return)string2</code>  若存在 <code>string1</code> ，則輸出 <code>string2</code></p><h3 id="2-1-hello-world"><a class="anchor" href="#2-1-hello-world">#</a> <strong>2-1 Hello World</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，輸出 <code>helloworld</code></p><pre><code>= (return)helloworld</code></pre><hr /><h3 id="2-2-aaa"><a class="anchor" href="#2-2-aaa">#</a> <strong>2-2 AAA</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，如果包含至少 3 個 <code>a</code>  輸出 <code>true</code> ，否則輸出 <code>false</code></p><pre><code>b = c = aaa = (return)true= (return)false</code></pre><hr /><h3 id="2-3-exactly-three"><a class="anchor" href="#2-3-exactly-three">#</a> <strong>2-3 Exactly Three</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，如果字串長度為 3 輸出 <code>true</code> ，否則輸出 <code>false</code></p><pre><code>b = ac = aaaaa = (return)falseaaa = (return)true= (return)false</code></pre><hr /><h3 id="2-4-remainder"><a class="anchor" href="#2-4-remainder">#</a> <strong>2-4 Remainder</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，輸出字串長度除以 3 的餘數</p><pre><code>b = ac = aaaaa = aaaa = 0aa = 2a = 1</code></pre><hr /><h3 id="2-5-odd"><a class="anchor" href="#2-5-odd">#</a> <strong>2-5 Odd</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，如果每個字母的數量為 0 或奇數輸出 <code>true</code> ，否則輸出 <code>false</code></p><pre><code>ba = abcb = bcca = acaaa = abbb = bccc = caa = (return)falsebb = (return)falsecc = (return)false = (return)true</code></pre><hr /><h3 id="2-6-the-only"><a class="anchor" href="#2-6-the-only">#</a> <strong>2-6 The Only</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，如果只有一個字母是單獨存在的輸出 <code>true</code> ，否則輸出 <code>false</code></p><pre><code>aaa = aabbb = bbccc = ccaa = 'bb = 'cc = 'a = 0b = 0c = 0' = 00 = (return)false0 = (return)true= (return)false</code></pre><hr /><h3 id="2-7-ascend"><a class="anchor" href="#2-7-ascend">#</a> <strong>2-7 Ascend</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，如果數量 <code>c &gt; b &gt; a</code>  輸出 <code>true</code> ，否則輸出 <code>false</code></p><div class="note info"><p><strong>解題思路</strong><br />前三行先排序<br />接著將 <code>abc</code>  為一組消去，直到無法消除為止<br />這時候應該要只剩下 <code>b</code>  與 <code>c</code> ，而 <code>bc</code>  又會轉成 <code>-</code> ，所以剩下 <code>-c</code>  就是 <code>true</code> ，其餘情況皆為 <code>false</code></p></div><pre><code>ca = acba = abcb = bcbc = -b- = -ba- = -c = (return)true= (return)false</code></pre><hr /><h3 id="2-8-most"><a class="anchor" href="#2-8-most">#</a> <strong>2-8 Most</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，輸出最多的字母</p><pre><code>cb = bcca = acba = abab = --b = b--c = bc =  ac =  a = (return)ab = (return)bc = (return)c</code></pre><hr /><h3 id="2-9-least"><a class="anchor" href="#2-9-least">#</a> <strong>2-9 Least</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，輸出最少的字母</p><pre><code>cb = bcca = acba = abab = --b = b--c =- = (return)cac = (return)bbc = (return)a</code></pre><hr /><h1 id="第三章-start-and-end"><a class="anchor" href="#第三章-start-and-end">#</a> 第三章 Start and End</h1><p><strong>指令說明</strong></p><ol><li><code>(start)string1 = string2</code> 、 <code>(end)string1 = string2</code>  若 <code>string1</code>  在字串的開頭、結尾，將 <code>string1</code>  替換成 <code>string2</code></li><li><code>string1 = (start)string2</code> 、 <code>string1 = (end)string2</code>  找到最左方的 <code>string1</code> ，將之刪除，並在字串的開頭、結尾加入 <code>string2</code></li></ol><h3 id="3-1-remove"><a class="anchor" href="#3-1-remove">#</a> <strong>3-1 Remove</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，將所有在字串開頭與結尾的 <code>a</code>  刪除</p><pre><code>(start)a=(end)a=</code></pre><hr /><h3 id="3-2-spin"><a class="anchor" href="#3-2-spin">#</a> <strong>3-2 Spin</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，將所有在 <code>a</code>  前方的字母移到字串最後</p><pre><code>(start)b = (end)b(start)c = (end)c</code></pre><hr /><h3 id="3-3-a-to-b-2"><a class="anchor" href="#3-3-a-to-b-2">#</a> <strong>3-3 A to B 2</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，將所有在開頭與結尾的 <code>a</code>  替換成 <code>b</code></p><pre><code>(start)a = (end)-- = (start)b(end)a = (start)++ = (end)b</code></pre><hr /><h3 id="3-4-swap"><a class="anchor" href="#3-4-swap">#</a> <strong>3-4 Swap</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，將所有在開頭的 <code>a</code>  與所有在結尾的 <code>b</code>  交換</p><pre><code>(start)a = ++a = a+(end)b = (start)b+ = (end)a</code></pre><hr /><h3 id="3-5-match"><a class="anchor" href="#3-5-match">#</a> <strong>3-5 Match</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，若字串開頭與結尾相同輸出 <code>true</code> ，否則輸出 <code>false</code></p><pre><code>a+ = (return)trueb- = (return)truec. = (return)true(start)a = (end)+(start)b = (end)-(start)c = (end).= (return)false</code></pre><hr /><h3 id="3-6-most-2"><a class="anchor" href="#3-6-most-2">#</a> <strong>3-6 Most 2</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，保留並輸出最多的字母，刪除其餘字母</p><pre><code>ba = abca = accb = bcbc = (start)xxa = (start)yac = (start)yab = (start)yx = yyc = ccya = aayb = bb</code></pre><hr /><h3 id="3-7-palindrome"><a class="anchor" href="#3-7-palindrome">#</a> <strong>3-7 Palindrome</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，若字串是回文輸出 <code>true</code> ，否則輸出 <code>false</code></p><pre><code>a+A- = b+B- = c+C- =(start)a = (end)+A-(start)b = (end)+B-(start)c = (end)+C--+ = (return)false= (return)true</code></pre><hr /><h1 id="第四章-once-upon-a-time"><a class="anchor" href="#第四章-once-upon-a-time">#</a> 第四章 Once Upon A Time</h1><p><strong>指令說明</strong></p><p><code>(once)string1 = string2</code>  執行過一次就不再執行</p><h3 id="4-1-hello-2"><a class="anchor" href="#4-1-hello-2">#</a> <strong>4-1 Hello 2</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，將 <code>hello</code>  加到字串的開頭</p><pre><code>(once)=(start)hello</code></pre><hr /><h3 id="4-2-remove-2"><a class="anchor" href="#4-2-remove-2">#</a> <strong>4-2 Remove 2</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，將最先出現的三個 <code>a</code>  移除</p><pre><code>(once)a = (once)a =(once)a =</code></pre><hr /><h3 id="4-3-cut"><a class="anchor" href="#4-3-cut">#</a> <strong>4-3 Cut</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，移除前三個字母</p><pre><code>(once) = ----a = -b = -c = </code></pre><hr /><h3 id="4-4-remove-3"><a class="anchor" href="#4-4-remove-3">#</a> <strong>4-4 Remove 3</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，將最後出現的三個 <code>a</code>  移除</p><pre><code>(once) = (end)---a- = b- = -bc- = -c- = </code></pre><hr /><h3 id="4-5-reverse"><a class="anchor" href="#4-5-reverse">#</a> <strong>4-5 Reverse</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，將字串頭尾兩個字母交換</p><pre><code>(once) = (start)--a = (end)+a-b = (end)+b-c = (end)+ca+ = (start)ab+ = (start)bc+ = (start)c</code></pre><hr /><h3 id="4-6-reverse-2"><a class="anchor" href="#4-6-reverse-2">#</a> <strong>4-6 Reverse 2</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，倒轉字串</p><pre><code>(once) = (start)........a = (start)a.b = (start)b.c = (start)c. = </code></pre><hr /><h3 id="4-7-cut-2"><a class="anchor" href="#4-7-cut-2">#</a> <strong>4-7 Cut 2</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，移除第三個字母</p><pre><code>(once) = (start)-...a = (start)a.b = (start)b.c = (start)c-a = (start)..-b = (start).. -c = (start).. </code></pre><hr /><h3 id="4-8-clone"><a class="anchor" href="#4-8-clone">#</a> <strong>4-8 Clone</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，複製前三個字母，將之加至字串最後</p><pre><code>(once) = (start)...+a = (start)a+b = (start)b+c = (start)c.a = (end)+aa.b = (end)+bb.c = (end)+cc(once) = (start)+++</code></pre><hr /><h3 id="4-9-a-to-b-3"><a class="anchor" href="#4-9-a-to-b-3">#</a> <strong>4-9 A to B 3</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，將 <code>a</code>  替換成 <code>b</code> 、將 <code>b</code>  替換成 <code>a</code></p><pre><code>(once) = ..a = b..b = a..c = c.. = </code></pre><hr /><h3 id="4-10-half"><a class="anchor" href="#4-10-half">#</a> <strong>4-10 Half</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，移除奇數位的字母</p><pre><code>(once) = ...a = a...b = b...c = c..a = .. .b = .. .c = .. . =</code></pre><hr /><h3 id="4-11-clone-2"><a class="anchor" href="#4-11-clone-2">#</a> <strong>4-11 Clone 2</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，複製字串</p><pre><code>(once) = .A = (end)+aB = (end)+bC = (end)+c.a = aA..b = bB..c = cC.. =+ =  </code></pre><hr /><h3 id="4-12-to-b-or-not-to-b"><a class="anchor" href="#4-12-to-b-or-not-to-b">#</a> <strong>4-12 To B or not to B</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，若 <code>b</code>  存在，將 <code>a</code>  替換成 <code>b</code> ，否則將 <code>a</code>  替換成 <code>c</code></p><pre><code>(once)b = b- (once)- = (start)--a = b--b = b--c = c-- = a = c </code></pre><hr /><h3 id="4-13-center"><a class="anchor" href="#4-13-center">#</a> <strong>4-13 Center</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，輸出最中間的字母</p><pre><code>(once) = -(end)-a = a(end)-b = b(end)-c = c-a = (end)--b = (end)--c = (end)-a- = (start)-b- = (start)-c- = (start)-</code></pre><hr /><h3 id="4-14-center-2"><a class="anchor" href="#4-14-center-2">#</a> <strong>4-14 Center 2</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，刪除最中間的字母</p><pre><code>(once) = -(once) = (end).-a. = -b. = -c. =a.+ = .ab.+ = .bc.+ = .ca+ = +ab+ = +bc+ = +ct = (end)+-a = ta--b = tb--c = tc-</code></pre><hr /><h3 id="4-15-expansion"><a class="anchor" href="#4-15-expansion">#</a> <strong>4-15 Expansion</strong></h3><p>給一個包含 <code>a</code> 、 <code>b</code> 、 <code>c</code>  的字串，將第 <code>i</code>  位字母增值 <code>i</code>  倍</p><pre><code>(once) = --a = a-x-b = b-x-c = c-x+a- = aa-x+b- = bb-x+c- = cc-x+a = a++b = b++c = c+-x = +-+ =- =</code></pre><hr /><h3 id="4-16-merge"><a class="anchor" href="#4-16-merge">#</a> <strong>4-16 Merge</strong></h3><p>給兩個包含 <code>a</code> 、 <code>b</code>  的字串 (以 <code>,</code>  連接)，將兩字串合併</p><pre><code>(once) = ||, = - = (end)yay = (start)aby = (start)bax = (start)abx = (start)b, = x,-</code></pre><hr />]]></content>
      
      
      <categories>
          
          <category> game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> A=B </tag>
            
            <tag> steam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Gobang 五子棋</title>
      <link href="Java-Gobang/"/>
      <url>Java-Gobang/</url>
      
        <content type="html"><![CDATA[<h1 id="遊戲說明"><a class="anchor" href="#遊戲說明">#</a> 遊戲說明</h1><p>這是一個五子棋遊戲，規則就如同大家熟悉的那樣，先使 5 顆棋子連成一條線就獲勝</p><p><img data-src="https://i.imgur.com/uAlqRVx.png" alt="gobang" /><br /><img data-src="https://i.imgur.com/htI7E3K.jpg" alt="gobang rock theme" /><br /><img data-src="https://i.imgur.com/4sy9VAn.png" alt="gobang ocean theme" /></p><h2 id="介面介紹"><a class="anchor" href="#介面介紹">#</a> 介面介紹</h2><p>畫面中間為 <code>13 * 13</code>  大小的棋盤<br />左下角有一個 <code>text area</code> ，會顯示各種訊息<br />右下角有四個按鈕，分別為:</p><ul><li><code>vs player</code> : 玩家與玩家對戰</li><li><code>vs computer</code> : 玩家與電腦對戰</li><li><code>theme</code> : 更換主題</li><li><code>restart</code> : 重新開始遊戲</li></ul><h2 id="遊戲方式介紹"><a class="anchor" href="#遊戲方式介紹">#</a> 遊戲方式介紹</h2><p>遊戲未開始前，能先選擇主題，總共有三種主題，每按一次 <code>theme</code>  按鈕就會跳至下一個主題</p><ol><li><code>基本主題</code> ：與一般五子棋一樣</li><li><code>岩石主題</code> ：在 <code>13 * 13</code>  的場地中會隨機掉落 10 顆落石，落石掉落處視為牆壁，無法下棋子</li><li><code>海洋主題</code> ：在 <code>13 * 13</code>  的場地中會隨機產生 10 顆泡泡 (可能重疊)，當有一名玩家下到 7 顆泡泡所在的格子時，立即獲得勝利</li></ol><p>有兩種對戰模式可以選擇，皆為玩家先攻，按下對應的按鈕即開始遊戲</p><ol><li><code>玩家 vs 玩家</code></li><li><code>玩家 vs 電腦</code></li></ol><p>任何時候都能按下 <code>restart</code>  按鈕重新開始遊戲</p><h1 id="程式碼說明"><a class="anchor" href="#程式碼說明">#</a> 程式碼說明</h1><p>以下會說明程式的思路</p><ol><li>初始化、變數說明</li><li>按鈕事件</li><li>滑鼠事件</li><li>電腦 AI</li></ol><hr /><p>以下是簡單的流程:<br /> <code>初始化</code>  -&gt;  <code>選擇主題</code>  -&gt;  <code>選擇對戰模式</code>  -&gt; LOOP (  <code>下棋</code>  -&gt;  <code>判斷是否勝利</code>  ) -&gt;  <code>遊戲結束</code></p><h2 id="初始化-變數說明"><a class="anchor" href="#初始化-變數說明">#</a> 初始化、變數說明</h2><p>將一些會用到的變數初始化</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 控制遊戲處於哪個階段，一開始設為 0</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 0 為遊戲尚未開始</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 1 為玩家 vs 玩家</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 2 為玩家 vs 電腦</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">//-1 為遊戲結束</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">int</span> game_start<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>game_start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 控制棋子的顏色，一開始設為白與黑</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">static</span> <span class="token class-name">Color</span> chess<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>chess<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>chess<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// 控制輪到哪一方，一開始設為 0</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">int</span> ch<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// 儲存棋盤的資料，一開始全部設為 0</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">int</span> board<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr></table></figure><hr /><p>將所有會用到的圖片素材從檔案讀入</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>imageio<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">static</span> <span class="token class-name">Image</span> image<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">static</span> <span class="token class-name">Image</span> sourse<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">//image 儲存對應三種不同的主題</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">try</span> <span class="token punctuation">&#123;</span> image<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"wood.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No image"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">try</span> <span class="token punctuation">&#123;</span> image<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"ground.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No image"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">try</span> <span class="token punctuation">&#123;</span> image<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"water.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No image"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">//sourse 儲存落石及泡泡的圖片素材</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">try</span> <span class="token punctuation">&#123;</span> sourse<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"a_rock.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No image"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">try</span> <span class="token punctuation">&#123;</span> sourse<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"bubble.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No image"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><hr /><p>設定 <code>JFrame</code>  視窗</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">static</span> final_project frm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">final_project</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 使右上角 X 能夠關閉視窗</span></pre></td></tr><tr><td data-num="4"></td><td><pre>frm<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WindowAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">windowClosing</span><span class="token punctuation">(</span><span class="token class-name">WindowEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 設定視窗標題、大小、背景顏色</span></pre></td></tr><tr><td data-num="7"></td><td><pre>frm<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"Gobang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>frm<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">850</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>frm<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>frm<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// 使視窗增加滑鼠事件</span></pre></td></tr><tr><td data-num="13"></td><td><pre>frm<span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span>frm<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>frm<span class="token punctuation">.</span><span class="token function">addMouseMotionListener</span><span class="token punctuation">(</span>frm<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><hr /><p>布局 <code>text area</code>  及四個按鈕</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">static</span> <span class="token class-name">JButton</span> player  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"vs player"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">static</span> <span class="token class-name">JButton</span> computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"vs computer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">static</span> <span class="token class-name">JButton</span> restart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"restart"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">static</span> <span class="token class-name">JButton</span> theme <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"theme"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">static</span> <span class="token class-name">TextArea</span> txa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextArea</span><span class="token punctuation">(</span><span class="token string">"Choose a game mode."</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token class-name">TextArea</span><span class="token punctuation">.</span>SCROLLBARS_VERTICAL_ONLY<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">static</span> <span class="token class-name">JPanel</span> toolbar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 將 `text area` 與四個按鈕以 FlowLayout 的方式排版，並設置在視窗的底部</span></pre></td></tr><tr><td data-num="9"></td><td><pre>toolbar<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>toolbar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>txa<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>toolbar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>toolbar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>computer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>toolbar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>theme<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>toolbar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>restart<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>frm<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>toolbar<span class="token punctuation">,</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">// 使視窗增加按鈕事件</span></pre></td></tr><tr><td data-num="18"></td><td><pre>player<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>frm<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>computer<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>frm<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>restart<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>frm<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>theme<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>frm<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><hr /><p><code>paint</code>  會將整個棋盤繪製出<br />此函式會自動先執行一次，後續如果要使 <code>paint</code>  再次執行，可以呼叫 <code>repaint()</code></p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Graphics2D</span> g2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Graphics2D</span><span class="token punctuation">)</span>g<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 繪製主題</span></pre></td></tr><tr><td data-num="6"></td><td><pre>g2<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>image<span class="token punctuation">[</span>current_theme<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 設定粗細及顏色</span></pre></td></tr><tr><td data-num="9"></td><td><pre>g2<span class="token punctuation">.</span><span class="token function">setStroke</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BasicStroke</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>current_theme <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> g2<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current_theme <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> g2<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 繪製線條</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">700</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">50</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="16"></td><td><pre>g2<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>g2<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// 繪製圓點</span></pre></td></tr><tr><td data-num="21"></td><td><pre>g2<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span><span class="token number">245</span><span class="token punctuation">,</span> <span class="token number">245</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>g2<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span><span class="token number">545</span><span class="token punctuation">,</span> <span class="token number">545</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>g2<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span><span class="token number">245</span><span class="token punctuation">,</span> <span class="token number">545</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>g2<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span><span class="token number">545</span><span class="token punctuation">,</span> <span class="token number">245</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>g2<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span><span class="token number">395</span><span class="token punctuation">,</span> <span class="token number">395</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="按鈕事件-public-void-actionperformedactionevent-e"><a class="anchor" href="#按鈕事件-public-void-actionperformedactionevent-e">#</a> 按鈕事件 public void actionPerformed (ActionEvent e)</h2><p>顧名思義就是按下按鈕會發生動作的事件<br />總共有四個按鈕，會執行相對應的動作</p><ol><li>按鈕 (vs player)</li><li>按鈕 (vs computer)</li><li>按鈕 (restart)</li><li>按鈕 (theme)</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 取得按下的按鈕</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">JButton</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">JButton</span><span class="token punctuation">)</span> e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 按鈕 (vs player)，只有當遊戲尚未開始時才有用</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>game_start <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> player<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>txa<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Player vs player. Game started! White turn."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>game_start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 若主題為岩石或海洋，則繪製落石或泡泡</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>current_theme <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">draw_item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// 按鈕 (vs computer)，只有當遊戲尚未開始時才有用</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>game_start <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> computer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>txa<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Player vs computer. Game started! White turn."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>game_start <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// 若主題為岩石或海洋，則繪製落石或泡泡</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>current_theme <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">draw_item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">// 按鈕 (restart)，隨時有用</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> restart<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>txa<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Game restart. Choose a game mode."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">// 按鈕 (theme)，只有當遊戲尚未開始時才有用</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>game_start <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> theme<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token comment">// 切換至下一個主題</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token operator">++</span>current_theme<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>current_theme <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> current_theme <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token comment">// 根據主題設定棋子顏色</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>current_theme <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>chess<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>chess<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current_theme <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>chess<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>chess<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current_theme <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>chess<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>green<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>chess<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>yellow<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><hr /><p><code>draw_item</code>  函式會根據 <code>岩石主題</code> 或 <code>海洋主題</code> 繪製落石或泡泡，若為 <code>基本主題</code> 則不繪製</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">static</span> <span class="token class-name">Random</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">int</span> bubbles<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw_item</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">Graphics2D</span> g <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Graphics2D</span><span class="token punctuation">)</span><span class="token function">getGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  </pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">do</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 隨機產生一個座標</span></pre></td></tr><tr><td data-num="12"></td><td><pre>x <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>y <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// 繪製落石或泡泡</span></pre></td></tr><tr><td data-num="17"></td><td><pre>g<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>sourse<span class="token punctuation">[</span>current_theme<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">70</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">70</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// 若為岩石主題，則將棋盤對應位置設為無法下</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// 若為海洋主題，則儲存座標至 bubbles</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>current_theme <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> board<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current_theme <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>bubbles<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>bubbles<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token operator">++</span>cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="滑鼠事件-public-void-mouseclickedmouseevent-e"><a class="anchor" href="#滑鼠事件-public-void-mouseclickedmouseevent-e">#</a> 滑鼠事件 public void mouseClicked (MouseEvent e)</h2><p>由於只會使用滑鼠點擊事件，所以其他滑鼠事件設為空</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseMoved</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseReleased</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseEntered</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseExited</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseDragged</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mousePressed</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><hr /><p>滑鼠點擊事件會取得座標</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 若遊戲尚未開始或遊戲已經結束，則滑鼠點擊無效</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>game_start <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 根據滑鼠點擊的位置繪製棋子</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find_and_draw</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> game_start <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 若為玩家 vs 電腦，則電腦產生一個位置並繪製</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> pos<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token function">get_computer</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">find_and_draw</span><span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><hr /><p>尋找並繪製指定位置的棋子，若成功繪製，則再判斷是否有達成勝利條件</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">find_and_draw</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Graphics2D</span> g <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Graphics2D</span><span class="token punctuation">)</span><span class="token function">getGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 因為電腦產生的座標為 (0 ~ 13, 0 ~ 13)，所以要轉為點擊棋盤的座標</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">50</span> <span class="token operator">+</span> <span class="token number">80</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>y <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">50</span> <span class="token operator">+</span> <span class="token number">80</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">75</span><span class="token punctuation">,</span> cnt_j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">675</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token operator">++</span>cnt_j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">75</span><span class="token punctuation">,</span> cnt_i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">675</span><span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token operator">++</span>cnt_i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 若沒有超出邊界與當前座標位置還未下棋，進入 if</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> j <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> j <span class="token operator">+</span> <span class="token number">50</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">>=</span> i <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;=</span> i <span class="token operator">+</span> <span class="token number">50</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span>cnt_j<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt_i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>cur <span class="token operator">=</span> board<span class="token punctuation">[</span>cnt_j<span class="token punctuation">]</span><span class="token punctuation">[</span>cnt_i<span class="token punctuation">]</span> <span class="token operator">=</span> ch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// 繪製棋子及外框</span></pre></td></tr><tr><td data-num="21"></td><td><pre>g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>chess<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>g<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>ch <span class="token operator">^=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>chess<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>g<span class="token punctuation">.</span><span class="token function">drawOval</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">// 判斷遊戲是否結束</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEnd</span><span class="token punctuation">(</span>cnt_i<span class="token punctuation">,</span> cnt_j<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment">// 若是由五子連線獲勝，則繪製出連線</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>bbwin <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>g<span class="token punctuation">.</span><span class="token function">setStroke</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BasicStroke</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>g<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">50</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">50</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">50</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">50</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>game_start <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> txa<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Player 1 wins!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">else</span> txa<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Player 2 wins!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> txa<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Player wins!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">else</span> txa<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Computer wins!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span>           </pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token comment">// 遊戲結束</span></pre></td></tr><tr><td data-num="50"></td><td><pre>game_start <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>game_start <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> txa<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Player 1 goes ("</span> <span class="token operator">+</span> cnt_i <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> cnt_j  <span class="token operator">+</span> <span class="token string">")  It's Player 2's turn."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token keyword">else</span> txa<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Player 2 goes ("</span> <span class="token operator">+</span> cnt_i <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> cnt_j  <span class="token operator">+</span> <span class="token string">")  It's Player 1's turn."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> txa<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Player goes ("</span> <span class="token operator">+</span> cnt_i <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> cnt_j  <span class="token operator">+</span> <span class="token string">")  It's Computer's turn."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">else</span> txa<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Computer goes ("</span> <span class="token operator">+</span> cnt_i <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> cnt_j  <span class="token operator">+</span> <span class="token string">")  It's Player's turn."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token comment">// 繪製成功</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="70"></td><td><pre></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token comment">// 繪製失敗</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><hr /><p>根據下棋的座標及輪到何方判斷是否達成勝利</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 判斷是否是由下到 7 個泡泡的位置而獲勝，一開始設為 false</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">boolean</span> bbwin<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>bbwin <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 分別代表橫線、直線、兩個方向的斜線</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">int</span> move<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>swig￼<span class="token number">0</span><span class="token operator">--</span><span class="token operator">></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 儲存某方達成五子連線時的起點與終點座標</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 四個 int 分別為 (x1, y1) (x2, y2)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">int</span> result<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isEnd</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> cur<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// 只有在海洋主題中，才會進行泡泡的判斷</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>game_start <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">int</span> bx <span class="token operator">=</span> bubbles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">int</span> by <span class="token operator">=</span> bubbles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>by<span class="token punctuation">]</span><span class="token punctuation">[</span>bx<span class="token punctuation">]</span> <span class="token operator">==</span> cur<span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">>=</span> <span class="token number">7</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>bbwin <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">int</span> nx <span class="token operator">=</span> x <span class="token operator">+</span> move<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">int</span> ny <span class="token operator">=</span> y <span class="token operator">+</span> move<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token comment">// 根據基準座標的正負四顆棋子 (共 9 顆棋子) 判斷是否存在連續 5 顆棋子連線</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>nx <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nx <span class="token generics"><span class="token punctuation">&lt;</span> 13 <span class="token operator">&amp;</span><span class="token operator">&amp;</span> ny <span class="token punctuation">></span></span><span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ny <span class="token operator">&lt;</span> <span class="token number">13</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">==</span> cur<span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">else</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token comment">// 儲存連線起點</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nx<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> ny<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token comment">// 儲存連線終點，並回傳結束</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="54"></td><td><pre>result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> nx<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>result<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> ny<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="電腦ai"><a class="anchor" href="#電腦ai">#</a> 電腦 AI</h2><p>這個部分是整個程式中最複雜的部份<br />它的原理是會遍歷棋盤上所有未走過的點，根據兩方的棋子各打出一個分數，找出分數最高的點即為最佳點</p><p>棋型有以下幾種:</p><ol><li><code>ooooo</code>  五連線</li><li><code>_oooo_</code>  活四</li><li><code>_oooo</code> 、 <code>oooo_</code>  死四 (強)</li><li><code>oo_oo</code> 、 <code>ooo_o</code> 、 <code>o_ooo</code>  死四 (弱)</li><li><code>__ooo_</code> 、 <code>_ooo__</code>  活三 (強)</li><li><code>_o_oo_</code> 、 <code>_oo_o_</code>  活三 (弱)</li><li><code>__ooo</code> 、 <code>ooo__</code> 、 <code>_ooo_</code> 、 <code>_o_oo</code> 、 <code>oo_o_</code> 、 <code>_oo_o</code> 、 <code>o_oo_</code> 、 <code>o__oo</code> 、 <code>oo__o</code> 、 <code>o_o_o</code>  死三</li><li><code>_oo___</code> 、 <code>__oo__</code> 、 <code>___oo_</code>  活二</li><li><code>___oo</code> 、 <code>oo___</code>  死二</li></ol><p>而這些棋型的組合及數量決定分數:</p><ol><li><code>1分</code>  什麼也沒有</li><li><code>2分</code>  1 個死二</li><li><code>3分</code>  1 個死三</li><li><code>4分</code>  1 個活二</li><li><code>5分</code>  2 個活二</li><li><code>6分</code>  1 個死四 (弱)</li><li><code>7分</code>  1 個死四 (強)</li><li><code>8分</code>  1 個活三 (弱)</li><li><code>9分</code>  1 個活三 (強)</li><li><code>10分</code>  1 個死四 + 1 個活三 (弱)</li><li><code>11分</code>  1 個死四 + 1 個活三 (強)</li><li><code>12分</code>  2 個活三</li><li><code>13分</code>  1 個活四，2 個死四</li><li><code>100分</code>  達成五連線</li></ol><hr /><p>取得棋盤上所有點中最佳的點</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get_computer</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pos<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> best_attack<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> best_defence<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> tmp1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> tmp2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 遍歷棋盤上所有點</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 取得攻擊及防守分數</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">int</span> c_ <span class="token operator">=</span> <span class="token function">score</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">int</span> p_ <span class="token operator">=</span> <span class="token function">score</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">// 紀錄最佳攻擊及防守的座標，一共有兩種模式</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// 1. 攻擊為主，防禦為輔</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// 2. 防禦為主，攻擊為輔</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>c_ <span class="token operator">></span> best_attack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>c_ <span class="token operator">==</span> best_attack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> p_ <span class="token operator">></span> best_attack<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>best_attack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> c_<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>best_attack<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> p_<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>tmp1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>tmp1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>p_ <span class="token operator">></span> best_defence<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>p_ <span class="token operator">==</span> best_defence<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> c_ <span class="token operator">></span> best_defence<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>best_defence<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> p_<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>best_defence<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> c_<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>tmp2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>tmp2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment">// 優先採取為主分數較高的那一個點</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment">// 若為主分數一樣，則採取為輔分數較高的那一個點 (攻擊優先)</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>best_attack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> best_defence<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>best_defence<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> best_attack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>best_attack<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> best_defence<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><hr /><p>取得此點的分數</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">score</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> cur<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span> opposite <span class="token operator">=</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> five <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">int</span> four_alive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> four_die1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> four_die2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">int</span> three_alive1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> three_alive2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> three_die <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">int</span> two_alive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> two_die <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 同樣根據 move 尋找四個方向</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">int</span> left<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">int</span> right<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token comment">// 找出基準點右邊連線的點</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                <span class="token keyword">int</span> nx <span class="token operator">=</span> x <span class="token operator">+</span> move<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token keyword">int</span> ny <span class="token operator">=</span> y <span class="token operator">+</span> move<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nx <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nx <span class="token generics"><span class="token punctuation">&lt;</span> 13 <span class="token operator">&amp;</span><span class="token operator">&amp;</span> ny <span class="token punctuation">></span></span><span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ny <span class="token operator">&lt;</span> <span class="token number">13</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">==</span> cur<span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                <span class="token keyword">else</span> </pre></td></tr><tr><td data-num="25"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                    r <span class="token operator">=</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token comment">// 找出基準點左邊連線的點</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>                <span class="token keyword">int</span> nx <span class="token operator">=</span> x <span class="token operator">+</span> move<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                <span class="token keyword">int</span> ny <span class="token operator">=</span> y <span class="token operator">+</span> move<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nx <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nx <span class="token generics"><span class="token punctuation">&lt;</span> 13 <span class="token operator">&amp;</span><span class="token operator">&amp;</span> ny <span class="token punctuation">></span></span><span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ny <span class="token operator">&lt;</span> <span class="token number">13</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span> <span class="token operator">==</span> cur<span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                <span class="token keyword">else</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                    l <span class="token operator">=</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>            <span class="token comment">// 將此連線的座左端及最右端再取得四個位置，分別存入 left 與 right，若為牆壁則設為對手的棋子</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">,</span> <span class="token operator">--</span>l<span class="token punctuation">,</span> <span class="token operator">++</span>r<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>                <span class="token keyword">int</span> nx <span class="token operator">=</span> x <span class="token operator">+</span> move<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> l<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>                <span class="token keyword">int</span> ny <span class="token operator">=</span> y <span class="token operator">+</span> move<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> l<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nx <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nx <span class="token generics"><span class="token punctuation">&lt;</span> 13 <span class="token operator">&amp;</span><span class="token operator">&amp;</span> ny <span class="token punctuation">></span></span><span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ny <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">)</span> left<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> board<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>                <span class="token keyword">else</span> left<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> opposite<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre>                nx <span class="token operator">=</span> x <span class="token operator">+</span> move<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> r<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>                ny <span class="token operator">=</span> y <span class="token operator">+</span> move<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> r<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nx <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nx <span class="token generics"><span class="token punctuation">&lt;</span> 13 <span class="token operator">&amp;</span><span class="token operator">&amp;</span> ny <span class="token punctuation">></span></span><span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ny <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">)</span> right<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> board<span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>                <span class="token keyword">else</span> right<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> opposite<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token comment">// 判斷為哪一種棋型</span></pre></td></tr><tr><td data-num="60"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">++</span>five<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">++</span>four_alive<span class="token punctuation">;</span> <span class="token comment">// _oooo_</span></pre></td></tr><tr><td data-num="64"></td><td><pre>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">++</span>four_die1<span class="token punctuation">;</span> <span class="token comment">// _oooo, oooo_</span></pre></td></tr><tr><td data-num="65"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="67"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>four_die2<span class="token punctuation">;</span> <span class="token comment">// o_ooo, ooo_o</span></pre></td></tr><tr><td data-num="69"></td><td><pre>                <span class="token keyword">else</span> <span class="token keyword">if</span>  <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>three_alive1<span class="token punctuation">;</span> <span class="token comment">// __ooo_, _ooo__</span></pre></td></tr><tr><td data-num="70"></td><td><pre>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>three_die<span class="token punctuation">;</span> <span class="token comment">// __ooo, ooo__</span></pre></td></tr><tr><td data-num="71"></td><td><pre>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">++</span>three_die<span class="token punctuation">;</span> <span class="token comment">// _ooo_</span></pre></td></tr><tr><td data-num="72"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="74"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>four_die2<span class="token punctuation">;</span> <span class="token comment">// oo_oo</span></pre></td></tr><tr><td data-num="76"></td><td><pre>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>three_alive2<span class="token punctuation">;</span> <span class="token comment">// _o_oo_, _oo_o_</span></pre></td></tr><tr><td data-num="77"></td><td><pre>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>three_die<span class="token punctuation">;</span> <span class="token comment">//_o_oo, oo_o_</span></pre></td></tr><tr><td data-num="78"></td><td><pre>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>three_die<span class="token punctuation">;</span> <span class="token comment">// o__oo, oo__o</span></pre></td></tr><tr><td data-num="79"></td><td><pre>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>two_alive<span class="token punctuation">;</span> <span class="token comment">// _oo___, __oo__, ___oo_</span></pre></td></tr><tr><td data-num="80"></td><td><pre>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>two_die<span class="token punctuation">;</span> <span class="token comment">// ___oo, oo___</span></pre></td></tr><tr><td data-num="81"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="83"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>four_die2<span class="token punctuation">;</span> <span class="token comment">// ooo_o, o_ooo</span></pre></td></tr><tr><td data-num="85"></td><td><pre>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span> right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>three_alive2<span class="token punctuation">;</span> <span class="token comment">// _oo_o_, _o_oo_</span></pre></td></tr><tr><td data-num="86"></td><td><pre>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>three_die<span class="token punctuation">;</span> <span class="token comment">// oo_o_, _o_oo</span></pre></td></tr><tr><td data-num="87"></td><td><pre>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>three_die<span class="token punctuation">;</span> <span class="token comment">// _oo_o, o_oo_</span></pre></td></tr><tr><td data-num="88"></td><td><pre>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>three_die<span class="token punctuation">;</span> <span class="token comment">// oo__o, o__oo</span></pre></td></tr><tr><td data-num="89"></td><td><pre>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>three_die<span class="token punctuation">;</span> <span class="token comment">// o_o_o</span></pre></td></tr><tr><td data-num="90"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="92"></td><td><pre></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token comment">// 根據棋型的數量得出最後的分數</span></pre></td></tr><tr><td data-num="94"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>five <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// ooooo</span></pre></td></tr><tr><td data-num="95"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>four_alive <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token punctuation">(</span>four_die1 <span class="token operator">+</span> four_die2<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>four_die1 <span class="token operator">+</span> four_die2<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>three_alive1 <span class="token operator">+</span> three_alive2<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">13</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="96"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>three_alive1 <span class="token operator">+</span> three_alive2<span class="token punctuation">)</span>  <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">12</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>three_alive1 <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>four_die1 <span class="token operator">+</span> four_die2<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">11</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>three_alive2 <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>four_die1 <span class="token operator">+</span> four_die2<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="99"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>three_alive1 <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">9</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="100"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>three_alive2 <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">8</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>four_die1 <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">7</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>four_die2 <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">6</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>two_alive <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="104"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>two_alive <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="105"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>three_die <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="106"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>two_die <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="107"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="108"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><div class="note info"><p>詳細的程式碼與圖片素材放在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BpbmcyOTA2NTE0Ny9ZWlUtc29waG9tb3JlL3RyZWUvbWFpbi9JbnRyb2R1Y3Rpb24lMjB0byUyMEphdmEvZmluYWwlMjBwcm9qZWN0"> github</span></p></div><h1 id="遊戲作者"><a class="anchor" href="#遊戲作者">#</a> 遊戲作者</h1><p><div class="links"><div class="item" title="PingHe"><a href="https://www.pinghenotes.com/" class="image" data-background-image="/images/404.png"></a>          <div class="info">          <a href="https://www.pinghenotes.com/" class="title">Ping's notes</a>          <p class="desc">C++ programing, UVa</p>          </div></div></div></p>]]></content>
      
      
      <categories>
          
          <category> java program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Gobang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10888 - Warehouse</title>
      <link href="UVa-10888-Warehouse/"/>
      <url>UVa-10888-Warehouse/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10888-warehouse"><a class="anchor" href="#題目-uva-10888-warehouse">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwODg4">UVa 10888 - Warehouse</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個 <code>N * M</code>  的圖，圖上有 4 種符號 <code>B</code> 、 <code>X</code> 、 <code>.</code> 、 <code>#</code> <br />你的目標是要找到使所有 <code>B</code>  移動到 <code>X</code>  (不可經過 <code>#</code> ) 的最小距離</p><hr /><p><strong>INPUT:</strong><br /> 先輸入一個整數 <code>T</code> ，代表測資數<br />每筆測資輸入兩個整數 <code>N</code> 、 <code>M</code> <br /> 接著輸入 <code>N * M</code>  個字元</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出使所有 <code>B</code>  移動到 <code>X</code>  (不可經過 <code>#</code> ) 的最小距離</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><p>此題的解題概念為 <code>Minimum cost Maximum flow</code> <br /> <code>Maximum flow</code>  的部分使用 <code>Ford Fulkerson</code>  演算法<br /> <code>Minimum cost</code>  則使用佇列最佳化的 <code>bellman ford</code>  演算法，又稱 <code>Shortest Path Faster Algorithm</code> ，簡稱 <code>SPFA</code></p></div><p>先利用 <code>BFS</code>  找到每個 <code>B</code>  與 <code>X</code>  之間的最短距離<br />之後建表</p><ol><li>起點 <code>S</code>  連接到每個 <code>B</code> ， <code>cost</code>  為 0、 <code>capacity</code>  為 1</li><li>每個 <code>B</code>  連到能夠走到的 <code>X</code> ， <code>cost</code>  為此 <code>B</code>  到 <code>X</code>  的最短距離、 <code>capacity</code>  為 1</li><li>每個 <code>X</code>  連接到終點 <code>T</code> ， <code>cost</code>  為 0、 <code>capacity</code>  為 1</li></ol><p>之後跑 <code>Minimum cost Maximum flow</code>  的演算法即可</p><div class="note info"><p><code>Minimum cost Maximum flow</code>  在以下兩篇已說明過，不再贅述<br /><a href="https://www.pinghenotes.com/UVa-10594-Data-Flow/"> UVa 10594 - Data Flow</a><br /><a href="https://www.pinghenotes.com/UVa-10806-Dijkstra-Dijkstra/">UVa 10806 - Dijkstra, Dijkstra</a></p></div><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> Move<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">,</span> N<span class="token punctuation">,</span> M<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">int</span> x_cnt<span class="token punctuation">,</span> b_cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">int</span> _s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> _t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> <span class="token operator">></span> G<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> B<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> X<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> dis<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> edge<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> cost<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> capacity<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> net<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> d<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> p<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>x_cnt <span class="token operator">=</span> b_cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>G<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>B<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>X<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>edge<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>cost<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>capacity<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>net<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>p<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> cur<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>dis<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> INT_MAX <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>queue<span class="token operator">&lt;</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> Q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> j<span class="token punctuation">,</span> i <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">auto</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>G<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'X'</span><span class="token punctuation">)</span> B<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>X<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token keyword">int</span> newx <span class="token operator">=</span> x <span class="token operator">+</span> Move<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">int</span> newy <span class="token operator">=</span> y <span class="token operator">+</span> Move<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>newx <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newx <span class="token operator">&lt;</span> M <span class="token operator">&amp;&amp;</span> newy <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newy <span class="token operator">&lt;</span> N <span class="token operator">&amp;&amp;</span> G<span class="token punctuation">[</span>newy<span class="token punctuation">]</span><span class="token punctuation">[</span>newx<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'#'</span> <span class="token operator">&amp;&amp;</span> dis<span class="token punctuation">[</span>newy<span class="token punctuation">]</span><span class="token punctuation">[</span>newx<span class="token punctuation">]</span> <span class="token operator">></span> dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>dis<span class="token punctuation">[</span>newy<span class="token punctuation">]</span><span class="token punctuation">[</span>newx<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> newx<span class="token punctuation">,</span> newy <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>cin <span class="token operator">>></span> N <span class="token operator">>></span> M<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>cin <span class="token operator">>></span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'X'</span><span class="token punctuation">)</span> X<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x_cnt<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="81"></td><td><pre></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'B'</span><span class="token punctuation">)</span> <span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> b_cnt<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre>_t <span class="token operator">=</span> x_cnt <span class="token operator">+</span> b_cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b_cnt<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>edge<span class="token punctuation">[</span>_s<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>edge<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>_s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>capacity<span class="token punctuation">[</span>_s<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>capacity<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>_s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>cost<span class="token punctuation">[</span>_s<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>cost<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>_s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="94"></td><td><pre></pre></td></tr><tr><td data-num="95"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> x_cnt<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> INT_MAX<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="96"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>edge<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>j <span class="token operator">+</span> b_cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>edge<span class="token punctuation">[</span>j <span class="token operator">+</span> b_cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="99"></td><td><pre>cost<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> b_cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="100"></td><td><pre>cost<span class="token punctuation">[</span>j <span class="token operator">+</span> b_cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>capacity<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> b_cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>capacity<span class="token punctuation">[</span>j <span class="token operator">+</span> b_cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="103"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="104"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="105"></td><td><pre></pre></td></tr><tr><td data-num="106"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> b_cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> b_cnt <span class="token operator">+</span> x_cnt<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="107"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="108"></td><td><pre>edge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>_t<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>edge<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>cost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>_t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="111"></td><td><pre>cost<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="112"></td><td><pre>capacity<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>_t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="113"></td><td><pre>capacity<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="114"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="115"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="116"></td><td><pre></pre></td></tr><tr><td data-num="117"></td><td><pre><span class="token keyword">bool</span> <span class="token function">bellman</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="118"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="119"></td><td><pre>d<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="120"></td><td><pre>d<span class="token punctuation">[</span>_s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="121"></td><td><pre></pre></td></tr><tr><td data-num="122"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="123"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">inQ</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="124"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>_s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="125"></td><td><pre>inQ<span class="token punctuation">[</span>_s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="126"></td><td><pre></pre></td></tr><tr><td data-num="127"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="128"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="129"></td><td><pre><span class="token keyword">int</span> u <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="130"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="131"></td><td><pre>inQ<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="132"></td><td><pre></pre></td></tr><tr><td data-num="133"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="134"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="135"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>net<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>cost<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> d<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="136"></td><td><pre>d<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>cost<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="137"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> net<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> d<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="138"></td><td><pre>d<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="139"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="140"></td><td><pre></pre></td></tr><tr><td data-num="141"></td><td><pre>p<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="142"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inQ<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> inQ<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="143"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="144"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="145"></td><td><pre></pre></td></tr><tr><td data-num="146"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span>_t<span class="token punctuation">]</span> <span class="token operator">==</span> INT_MAX<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="147"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="148"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="149"></td><td><pre></pre></td></tr><tr><td data-num="150"></td><td><pre><span class="token keyword">void</span> <span class="token function">updateflow</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="151"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="152"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> _s<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="153"></td><td><pre>net<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="154"></td><td><pre>net<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="155"></td><td><pre><span class="token function">updateflow</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="156"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="157"></td><td><pre></pre></td></tr><tr><td data-num="158"></td><td><pre><span class="token keyword">int</span> <span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="159"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="160"></td><td><pre><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="161"></td><td><pre></pre></td></tr><tr><td data-num="162"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">bellman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="163"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="164"></td><td><pre>ret <span class="token operator">+=</span> d<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="165"></td><td><pre><span class="token function">updateflow</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">,</span> _t<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="166"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="167"></td><td><pre></pre></td></tr><tr><td data-num="168"></td><td><pre><span class="token keyword">return</span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="169"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="170"></td><td><pre></pre></td></tr><tr><td data-num="171"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="172"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="173"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="174"></td><td><pre></pre></td></tr><tr><td data-num="175"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="176"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="177"></td><td><pre><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="178"></td><td><pre><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="179"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="180"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="181"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmEtMTA4ODgv">https://www.larrysprognotes.com/UVa-10888/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> Maximum flow </tag>
            
            <tag> Ford Fulkerson </tag>
            
            <tag> Edmonds-Karp </tag>
            
            <tag> Minimum cost </tag>
            
            <tag> bellman </tag>
            
            <tag> bfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10806 - Dijkstra, Dijkstra</title>
      <link href="UVa-10806-Dijkstra-Dijkstra/"/>
      <url>UVa-10806-Dijkstra-Dijkstra/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10806-dijkstra-dijkstra"><a class="anchor" href="#題目-uva-10806-dijkstra-dijkstra">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwODA2">UVa 10806 - Dijkstra, Dijkstra</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個無向圖，有 <code>N</code>  個點及 <code>M</code>  條邊，每條邊的 <code>capacity</code>  為 <code>1</code> 、有不同的 <code>cost</code> <br /> 求從起點 <code>S</code>  走到終點 <code>T</code>  兩次，求總和最小的 <code>cost</code></p><hr /><p><strong>INPUT:</strong><br /> 每筆測資先輸入兩個整數 <code>N</code> 、 <code>M</code> <br /> 接下來有 <code>M</code>  行，每行輸入三個整數 <code>u</code> 、 <code>v</code> 、 <code>c</code> ，代表 <code>edge(u, v)</code>  的 <code>cost</code>  為 <code>c</code> ;</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出最小的 <code>cost</code> ，若無法從起點走到終點兩次則輸出 <code>Back to jail</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><p>此題的解題概念為 <code>Minimum cost Maximum flow</code> <br /> <code>Maximum flow</code>  的部分使用 <code>Ford Fulkerson</code>  演算法<br /> <code>Minimum cost</code>  則使用佇列最佳化的 <code>bellman ford</code>  演算法，又稱 <code>Shortest Path Faster Algorithm</code> ，簡稱 <code>SPFA</code></p></div><p>基本上與 <code>Maximum flow</code>  的程式碼相同，只是搜尋起點 <code>S</code>  是否可以走到終點 <code>T</code>  時不再是隨便走，而是用 <code>SPFA</code>  找到 <code>minimum cost</code>  的路徑<br />由於每條路只能走一次，所以將 <code>capacity</code>  設為 <code>1</code> <br /> 使用一個變數 <code>cnt</code>  紀錄從起點 <code>S</code>  走到終點 <code>T</code>  的次數</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">vvint vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">vint vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> M<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">int</span> _s <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> _t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>vvint edge<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>vvint cost<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>vvint capacity<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>vvint net<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>vint dis<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>vint p<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>_t <span class="token operator">=</span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>edge<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token function">vint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>cost<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token function">vint</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>capacity<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token function">vint</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>net<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token function">vint</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>p<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>cin <span class="token operator">>></span> M<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>cin <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">>></span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>edge<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>cost<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> cost<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>capacity<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> capacity<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">bool</span> <span class="token function">bellman</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>dis<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>dis<span class="token punctuation">[</span>_s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>vint <span class="token function">inQ</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>_s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>inQ<span class="token punctuation">[</span>_s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token keyword">int</span> u <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>inQ<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>net<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>cost<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="72"></td><td><pre>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>cost<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> net<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="74"></td><td><pre>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre>p<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inQ<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> inQ<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="81"></td><td><pre></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>_t<span class="token punctuation">]</span> <span class="token operator">==</span> INT_MAX<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="85"></td><td><pre></pre></td></tr><tr><td data-num="86"></td><td><pre><span class="token keyword">void</span> <span class="token function">updateflow</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> _s<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>net<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>net<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token function">updateflow</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="93"></td><td><pre></pre></td></tr><tr><td data-num="94"></td><td><pre><span class="token keyword">void</span> <span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="95"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="96"></td><td><pre><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="97"></td><td><pre></pre></td></tr><tr><td data-num="98"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">bellman</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">++</span>cnt <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="99"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="100"></td><td><pre>ret <span class="token operator">+=</span> dis<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre><span class="token function">updateflow</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">,</span> _t<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="103"></td><td><pre></pre></td></tr><tr><td data-num="104"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Back to jail\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="105"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="106"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="107"></td><td><pre></pre></td></tr><tr><td data-num="108"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="109"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="110"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N<span class="token punctuation">,</span> N<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="111"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="112"></td><td><pre><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="113"></td><td><pre><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="114"></td><td><pre><span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="115"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="116"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> Maximum flow </tag>
            
            <tag> Ford Fulkerson </tag>
            
            <tag> Edmonds-Karp </tag>
            
            <tag> Minimum cost </tag>
            
            <tag> bellman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10594 - Data Flow</title>
      <link href="UVa-10594-Data-Flow/"/>
      <url>UVa-10594-Data-Flow/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10594-data-flow"><a class="anchor" href="#題目-uva-10594-data-flow">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwNTk0">UVa 10594 - Data Flow</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個無向圖 <code>G</code> ，有 <code>N</code>  個點及 <code>M</code>  條邊，每條邊的 <code>capacity</code>  固定為 <code>K</code> 、有不同的 <code>cost</code> <br /> 題目要求將大小為 <code>D</code>  的資料從起點 <code>S</code>  傳到終點 <code>T</code> ，求最小的 <code>cost</code></p><hr /><p><strong>INPUT:</strong><br /> 每筆測資第一行輸入兩個整數 <code>N</code> 、 <code>M</code> <br /> 接下來有 <code>M</code>  行，每行輸入三個整數 <code>u</code> 、 <code>v</code> 、 <code>c</code> ，代表 <code>edge(u, v)</code>  的 <code>cost</code>  為 <code>c</code> <br /> 最後輸入兩個整數 <code>D</code> 、 <code>K</code></p><hr /><p><strong>OUTPUT:</strong><br /> 輸出最小的 <code>cost</code> ，若無法將所有 <code>D</code>  資料傳至終點則輸出 <code>Impossible.</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><p>此題的解題概念為 <code>Minimum cost Maximum flow</code> <br /> <code>Maximum flow</code>  的部分使用 <code>Ford Fulkerson</code>  演算法<br /> <code>Minimum cost</code>  則使用佇列最佳化的 <code>bellman ford</code>  演算法，又稱 <code>Shortest Path Faster Algorithm</code> ，簡稱 <code>SPFA</code></p></div><p>基本上與 <code>Maximum flow</code>  的程式碼相同，只是搜尋起點 <code>S</code>  是否可以走到終點 <code>T</code>  時不再是隨便走，而是用 <code>SPFA</code>  找到 <code>minimum cost</code>  的路徑<br />由於所有邊的 <code>capacity</code>  固定，所以可視為所有 <code>capacity = 1</code>  跑 <code>SPFA</code> ，之後再乘以 <code>K</code>  即可，(目的是為了加速效率)</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">vll vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> D<span class="token punctuation">,</span> K<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">int</span> _s <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> _t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>vector<span class="token operator">&lt;</span>vll<span class="token operator">></span> capacity<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>vector<span class="token operator">&lt;</span>vll<span class="token operator">></span> net<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>vector<span class="token operator">&lt;</span>vll<span class="token operator">></span> cost<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> G<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>vll dis<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> p<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>_t <span class="token operator">=</span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>capacity<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token function">vll</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>net<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token function">vll</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>cost<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token function">vll</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>G<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>p<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">long</span> <span class="token keyword">long</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>cin <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">>></span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>cost<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> cost<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>capacity<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> capacity<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>cin <span class="token operator">>></span> D <span class="token operator">>></span> K<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">bool</span> <span class="token function">bellman</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>dis<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> LLONG_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>dis<span class="token punctuation">[</span>_s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">inQ</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>_s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>inQ<span class="token punctuation">[</span>_s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token keyword">long</span> <span class="token keyword">long</span> u <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>inQ<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>net<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>cost<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="71"></td><td><pre>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>cost<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> net<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre></pre></td></tr><tr><td data-num="76"></td><td><pre>p<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inQ<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> inQ<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>_t<span class="token punctuation">]</span> <span class="token operator">==</span> LLONG_MAX<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token keyword">void</span> <span class="token function">updateflow</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="86"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> _s<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>net<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>net<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token function">updateflow</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="92"></td><td><pre></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token keyword">void</span> <span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="94"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="95"></td><td><pre><span class="token keyword">long</span> <span class="token keyword">long</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="96"></td><td><pre></pre></td></tr><tr><td data-num="97"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">bellman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="98"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="99"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>D <span class="token operator">></span> K<span class="token punctuation">)</span> ret <span class="token operator">+=</span> dis<span class="token punctuation">[</span>_t<span class="token punctuation">]</span> <span class="token operator">*</span> K<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="100"></td><td><pre><span class="token keyword">else</span> ret <span class="token operator">+=</span> dis<span class="token punctuation">[</span>_t<span class="token punctuation">]</span> <span class="token operator">*</span> D<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre></pre></td></tr><tr><td data-num="102"></td><td><pre>D <span class="token operator">-=</span> K<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="103"></td><td><pre><span class="token function">updateflow</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">,</span> _t<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="104"></td><td><pre></pre></td></tr><tr><td data-num="105"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>D <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="106"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="107"></td><td><pre></pre></td></tr><tr><td data-num="108"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>D <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Impossible.\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="109"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="110"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="111"></td><td><pre></pre></td></tr><tr><td data-num="112"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="113"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="114"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N <span class="token operator">>></span> M<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="115"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="116"></td><td><pre><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="117"></td><td><pre><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="118"></td><td><pre><span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="119"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="120"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cDovL3Byb2dyYW1taW5nLXN0dWR5LW5vdGVzLmJsb2dzcG90LmNvbS8yMDE0LzA1L3V2YS0xMDU5NC1kYXRhLWZsb3cuaHRtbA==">http://programming-study-notes.blogspot.com/2014/05/uva-10594-data-flow.html</span><br /><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JTlDJTgwJUU3JTlGJUFEJUU4JUI3JUFGJUU1JUJFJTg0JUU1JUJGJUFCJUU5JTgwJTlGJUU3JUFFJTk3JUU2JUIzJTk1">https://zh.wikipedia.org/wiki/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E5%BF%AB%E9%80%9F%E7%AE%97%E6%B3%95</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> Maximum flow </tag>
            
            <tag> Ford Fulkerson </tag>
            
            <tag> Edmonds-Karp </tag>
            
            <tag> Minimum cost </tag>
            
            <tag> bellman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11378 - Bey Battle</title>
      <link href="UVa-11378-Bey-Battle/"/>
      <url>UVa-11378-Bey-Battle/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11378-bey-battle"><a class="anchor" href="#題目-uva-11378-bey-battle">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExMzc4">UVa 11378 - Bey Battle</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給 <code>N</code>  個點 (x, y 平面座標)，每個點擴散一個正方形 (邊與 x, y 軸平行)<br /> 求正方形的最大邊長</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資輸入一個整數 <code>N</code> <br /> 接下來有 <code>N</code>  行，每行輸入兩個變數，為點的 x, y 座標</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出正方形的最大邊長</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>求正方形的最大邊長可視為找到最近的兩個點 (Closest Pair)<br /> 只差在不是算兩點間的長度，而是取兩點 <code>x軸</code> 與 <code>y軸</code> 中較大的長度</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">point</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">int</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>vector<span class="token operator">&lt;</span>point<span class="token operator">></span> V<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>V<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">double</span> <span class="token function">ds</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x <span class="token operator">-</span> b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">-</span> b<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">double</span> <span class="token function">Combine</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> mid<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">&amp;</span> l<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">&amp;</span> r<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">double</span> line <span class="token operator">=</span> <span class="token punctuation">(</span>V<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+</span> V<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">double</span> Min <span class="token operator">=</span> d<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> b <span class="token operator">&amp;&amp;</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">&lt;</span> line <span class="token operator">+</span> d<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> mid<span class="token punctuation">;</span> j <span class="token operator">>=</span> a <span class="token operator">&amp;&amp;</span> V<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">></span> line <span class="token operator">-</span> d<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>Min <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>Min<span class="token punctuation">,</span> <span class="token function">ds</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> V<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">return</span> Min<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">double</span> <span class="token function">Divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">>=</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1000000</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">double</span> l <span class="token operator">=</span> <span class="token function">Divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">double</span> r <span class="token operator">=</span> <span class="token function">Divide</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token keyword">return</span> <span class="token function">Combine</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token function">sort</span><span class="token punctuation">(</span>V<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token function">Divide</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cDovL25haXZlcmVkLmdpdGh1Yi5pby8yMDE2LzA2LzA0L1Byb2JsZW1fU29sdmluZy9VVmEvVVZhLTExMzc4LUJleS1CYXR0bGUv">http://naivered.github.io/2016/06/04/Problem_Solving/UVa/UVa-11378-Bey-Battle/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> Closest Pair </tag>
            
            <tag> DNC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10245 - The Closest Pair Problem</title>
      <link href="UVa-10245-The-Closest-Pair-Problem/"/>
      <url>UVa-10245-The-Closest-Pair-Problem/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10245-the-closest-pair-problem"><a class="anchor" href="#題目-uva-10245-the-closest-pair-problem">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwMjQ1">UVa 10245 - The Closest Pair Problem</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給 <code>N</code>  個點 (x, y 平面座標)，求這些點的最近距離</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資輸入一個整數 <code>N</code> <br /> 接下來有 <code>N</code>  行，每行輸入兩個變數，為點的 x, y 座標</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出這些點的最近距離，如果 <code>&gt;= 10000</code>  則輸出 <code>INFINITY</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>針對 <code>x</code>  做排序後，利用 <code>Divide and Conquer</code>  持續將所有點切成兩半<br />直到找到左半邊的最小值 <code>l</code> 、右半邊的最小值 <code>r</code> <br /> 將 <code>d</code>  設為 <code>min(l ,r)</code> ，在 <code>中線 - d ~ 中線 + d</code>  的範圍內尋找更小的值</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">point</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">double</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">double</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">double</span> dis<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>vector<span class="token operator">&lt;</span>point<span class="token operator">></span> V<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">double</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>V<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">double</span> <span class="token function">ds</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x <span class="token operator">-</span> b<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">-</span> b<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">double</span> <span class="token function">Combine</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> mid<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">&amp;</span> l<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">&amp;</span> r<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">double</span> line <span class="token operator">=</span> <span class="token punctuation">(</span>V<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+</span> V<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">double</span> Min <span class="token operator">=</span> d<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> b <span class="token operator">&amp;&amp;</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">&lt;</span> line <span class="token operator">+</span> d<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> mid<span class="token punctuation">;</span> j <span class="token operator">>=</span> a <span class="token operator">&amp;&amp;</span> V<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">></span> line <span class="token operator">-</span> d<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>Min <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>Min<span class="token punctuation">,</span> <span class="token function">ds</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> V<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">return</span> Min<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">double</span> <span class="token function">Divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">>=</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">10000</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token keyword">double</span> l <span class="token operator">=</span> <span class="token function">Divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token keyword">double</span> r <span class="token operator">=</span> <span class="token function">Divide</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token keyword">return</span> <span class="token function">Combine</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>dis <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> fixed <span class="token operator">&lt;&lt;</span> dis <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"INFINITY\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="68"></td><td><pre></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N<span class="token punctuation">,</span> N<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token function">sort</span><span class="token punctuation">(</span>V<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>dis <span class="token operator">=</span> <span class="token function">Divide</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cDovL3Byb2dyYW1taW5nLXN0dWR5LW5vdGVzLmJsb2dzcG90LmNvbS8yMDE0LzAxL3V2YS0xMDI0NS1jbG9zZXN0LXBhaXItcHJvYmxlbS5odG1s">http://programming-study-notes.blogspot.com/2014/01/uva-10245-closest-pair-problem.html</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> Closest Pair </tag>
            
            <tag> DNC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11096 - Nails</title>
      <link href="UVa-11096-Nails/"/>
      <url>UVa-11096-Nails/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11096-nails"><a class="anchor" href="#題目-uva-11096-nails">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExMDk2">UVa 11096 - Nails</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給 <code>N</code>  個點 (x, y 平面座標)，求這些點形成的 <code>凸包(Convex Hull)</code>  周長</p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>T</code> ，代表測資數<br />每筆測資輸入 <code>L</code> 、 <code>N</code> ，代表橡皮筋長度、點的數量<br />接下來有 <code>N</code>  行，每行輸入兩個變數 <code>(x, y)</code> ，為點的座標</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 MAX ( <code>凸包(Convex Hull)</code>  周長， <code>L</code> )</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><ol><li>如果使用 <code>Graham's Scan</code>  演算法需要做極角排序</li><li>使用 <code>Andrew's Monotone Chain</code>  演算法</li></ol></div><p>將凸包算出後再兩兩計算長度，加總即為周長</p><div class="note info"><p>涉及小數，所以題中變數盡量用 <code>double</code></p></div><h1 id="參考程式碼-grahams-scan"><a class="anchor" href="#參考程式碼-grahams-scan">#</a> 參考程式碼  <code>Graham's Scan</code></h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">point</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">double</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">double</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">double</span> d<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>vector<span class="token operator">&lt;</span> point <span class="token operator">></span> V<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>vector<span class="token operator">&lt;</span> point <span class="token operator">></span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">,</span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">double</span> L<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">double</span> <span class="token function">dist</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x <span class="token operator">-</span> b<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">-</span> b<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">double</span> <span class="token function">cross</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> o<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>x <span class="token operator">-</span> o<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>y <span class="token operator">-</span> o<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">-</span> o<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>x <span class="token operator">-</span> o<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">auto</span> c <span class="token operator">=</span> <span class="token function">cross</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">return</span> c <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> a<span class="token punctuation">.</span>d <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>d <span class="token operator">:</span> c <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>V<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">double</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>cin <span class="token operator">>></span> L <span class="token operator">>></span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token keyword">void</span> <span class="token function">GrahamScan</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token function">sort</span><span class="token punctuation">(</span>V<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>y <span class="token operator">||</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">==</span> b<span class="token punctuation">.</span>y <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token function">dist</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token function">sort</span><span class="token punctuation">(</span>V<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token keyword">int</span> m <span class="token operator">=</span> ret<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cross</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ret<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token operator">--</span>m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token keyword">double</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ret<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> ans <span class="token operator">+=</span> <span class="token function">dist</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre></pre></td></tr><tr><td data-num="82"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> fixed <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> L<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="86"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token function">GrahamScan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="94"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="95"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考程式碼-andrews-monotone-chain"><a class="anchor" href="#參考程式碼-andrews-monotone-chain">#</a> 參考程式碼  <code>Andrew's Monotone Chain</code></h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">point</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">double</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">double</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">,</span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">double</span> L<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>vector<span class="token operator">&lt;</span>point<span class="token operator">></span> V<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>vector<span class="token operator">&lt;</span>point<span class="token operator">></span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>V<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>cin <span class="token operator">>></span> L <span class="token operator">>></span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">double</span> <span class="token function">cross</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> o<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>x <span class="token operator">-</span> o<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>y <span class="token operator">-</span> o<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">-</span> o<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>x <span class="token operator">-</span> o<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">void</span> <span class="token function">Andrews_Monotone_Chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token function">sort</span><span class="token punctuation">(</span>V<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>y <span class="token operator">||</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">==</span> b<span class="token punctuation">.</span>y <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">int</span> m <span class="token operator">=</span> ret<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cross</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ret<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token operator">--</span>m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> N <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> t <span class="token operator">=</span> ret<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token keyword">int</span> m <span class="token operator">=</span> ret<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">>=</span> t <span class="token operator">&amp;&amp;</span> <span class="token function">cross</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ret<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token operator">--</span>m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token keyword">double</span> <span class="token function">dis</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x <span class="token operator">-</span> b<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">-</span> b<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="78"></td><td><pre></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token keyword">double</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ret<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> ans <span class="token operator">+=</span> <span class="token function">dis</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ret<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre></pre></td></tr><tr><td data-num="84"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> fixed <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> L<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="94"></td><td><pre><span class="token function">Andrews_Monotone_Chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="95"></td><td><pre><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="96"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="97"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vcnJpczgyMTAyOC9VVmEvYmxvYi9tYXN0ZXIvdm9sdW1lMTEwLzExMDk2JTIwLSUyME5haWxzLmNwcA==">https://github.com/morris821028/UVa/blob/master/volume110/11096%20-%20Nails.cpp</span><br /><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vYml1c19zdHJpcC9hcnRpY2xlL2RldGFpbHMvODQ1Mzg4Mg==">https://blog.csdn.net/mobius_strip/article/details/8453882</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> Convex Hull </tag>
            
            <tag> Andrew&#39;s Monotone Chain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 1206 - Boundary Points</title>
      <link href="UVa-1206-Boundary-Points/"/>
      <url>UVa-1206-Boundary-Points/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-1206-boundary-points"><a class="anchor" href="#題目-uva-1206-boundary-points">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEyMDY=">UVa 1206 - Boundary Points</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給數個點 (x, y 平面座標)，求這些點的 <code>凸包(Convex Hull)</code></p><hr /><p><strong>INPUT:</strong><br /> 每筆測資輸入一行，輸入表示為 <code>(x,y)</code> ，代表一個點的平面座標</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出組成 <code>凸包(Convex Hull)</code>  的點的座標</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><p>如果使用 <code>Graham's Scan</code>  演算法需要做極角排序<br />使用 <code>Andrew's Monotone Chain</code>  演算法則跑兩次半邊，將所有點覆蓋</p></div><p>直接讀入座標後跑 <code>Andrew's Monotone Chain</code>  即可</p><h1 id="參考程式碼-grahams-scan"><a class="anchor" href="#參考程式碼-grahams-scan">#</a> 參考程式碼  <code>Graham's Scan</code></h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">point</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">double</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">double</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">double</span> d<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>vector<span class="token operator">&lt;</span> point <span class="token operator">></span> V<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>vector<span class="token operator">&lt;</span> point <span class="token operator">></span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">double</span> <span class="token function">dist</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x <span class="token operator">-</span> b<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">-</span> b<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">double</span> <span class="token function">cross</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> o<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>x <span class="token operator">-</span> o<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>y <span class="token operator">-</span> o<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">-</span> o<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>x <span class="token operator">-</span> o<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">auto</span> c <span class="token operator">=</span> <span class="token function">cross</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">return</span> c <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> a<span class="token punctuation">.</span>d <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>d <span class="token operator">:</span> c <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>V<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">char</span> _<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">double</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>stringstream <span class="token function">ss</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>ss <span class="token operator">>></span> _ <span class="token operator">>></span> a <span class="token operator">>></span> _ <span class="token operator">>></span> b <span class="token operator">>></span> _<span class="token punctuation">)</span> V<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token keyword">void</span> <span class="token function">GrahamScan</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token function">sort</span><span class="token punctuation">(</span>V<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>y <span class="token operator">||</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">==</span> b<span class="token punctuation">.</span>y <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> V<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token function">dist</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token function">sort</span><span class="token punctuation">(</span>V<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre>V<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> V<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token keyword">int</span> m <span class="token operator">=</span> ret<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cross</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ret<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token operator">--</span>m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="77"></td><td><pre></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token keyword">int</span> S <span class="token operator">=</span> ret<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> d<span class="token punctuation">]</span> <span class="token operator">:</span> ret<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'('</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">','</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token string">')'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>S<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="88"></td><td><pre></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="94"></td><td><pre><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="95"></td><td><pre><span class="token function">GrahamScan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="96"></td><td><pre><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="97"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="98"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考程式碼-andrews-monotone-chain"><a class="anchor" href="#參考程式碼-andrews-monotone-chain">#</a> 參考程式碼  <code>Andrew's Monotone Chain</code></h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">point</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">double</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">double</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>vector<span class="token operator">&lt;</span>point<span class="token operator">></span> V<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>vector<span class="token operator">&lt;</span>point<span class="token operator">></span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>V<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">char</span> _<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">double</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>stringstream <span class="token function">ss</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>ss <span class="token operator">>></span> _ <span class="token operator">>></span> a <span class="token operator">>></span> _ <span class="token operator">>></span> b <span class="token operator">>></span> _<span class="token punctuation">)</span> V<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">double</span> <span class="token function">cross</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> o<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>x <span class="token operator">-</span> o<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>y <span class="token operator">-</span> o<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">-</span> o<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>x <span class="token operator">-</span> o<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">void</span> <span class="token function">Andrews_Monotone_Chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token function">sort</span><span class="token punctuation">(</span>V<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>y <span class="token operator">||</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">==</span> b<span class="token punctuation">.</span>y <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> V<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">int</span> m <span class="token operator">=</span> ret<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cross</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ret<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token operator">--</span>m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> V<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> t <span class="token operator">=</span> ret<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token keyword">int</span> m <span class="token operator">=</span> ret<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">>=</span> t <span class="token operator">&amp;&amp;</span> <span class="token function">cross</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ret<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token operator">--</span>m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token keyword">int</span> S <span class="token operator">=</span> ret<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">:</span> ret<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"("</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>S<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token function">Andrews_Monotone_Chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="86"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> Convex Hull </tag>
            
            <tag> Andrew&#39;s Monotone Chain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 681 - Convex Hull Finding</title>
      <link href="UVa-681-Convex-Hull-Finding/"/>
      <url>UVa-681-Convex-Hull-Finding/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-681-convex-hull-finding"><a class="anchor" href="#題目-uva-681-convex-hull-finding">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTY4MQ==">UVa 681 - Convex Hull Finding</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給 <code>N</code>  個點 (x, y 平面座標)，求這些點的 <code>凸包(Convex Hull)</code></p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>T</code> ，代表測資數<br />每筆測資輸入一個整數 <code>N</code> ，接下來有 <code>N</code>  行，每行輸入兩個點 <code>(x, y)</code> ，為點的座標<br />輸入一個 <code>-1</code>  間隔測資</p><hr /><p><strong>OUTPUT:</strong><br /> 與輸入幾乎相同<br />區別在於 <code>N</code>  改為凸包的 <code>node</code>  數量，即分別輸出 <code>node</code>  的座標</p><div class="note info"><p>起點需輸出 2 次 (頭尾)</p></div><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><p>能夠使用 <code>Graham's Scan</code>  演算法<br />或者 <code>Andrew's Monotone Chain</code>  演算法</p></div><p><code>Graham's Scan</code> <br /> 需要做極角排序</p><p><code>Andrew's Monotone Chain</code> <br /> 先找到起點 (最左下的點)，按照順序尋找下一個點，直到終點，這會構成一半的凸包<br />再從終點開始反方向尋找，直到起點，最後會構成完整的凸包</p><h1 id="參考程式碼-grahams-scan"><a class="anchor" href="#參考程式碼-grahams-scan">#</a> 參考程式碼  <code>Graham's Scan</code></h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">point</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">int</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">int</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">double</span> d<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>vector<span class="token operator">&lt;</span> point <span class="token operator">></span> V<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>vector<span class="token operator">&lt;</span> point <span class="token operator">></span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">,</span> N<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> _<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">double</span> <span class="token function">dist</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x <span class="token operator">-</span> b<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">-</span> b<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">double</span> <span class="token function">cross</span><span class="token punctuation">(</span>point <span class="token operator">&amp;</span> o<span class="token punctuation">,</span> point <span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point <span class="token operator">&amp;</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>x <span class="token operator">-</span> o<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>y <span class="token operator">-</span> o<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">-</span> o<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>x <span class="token operator">-</span> o<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">auto</span> c <span class="token operator">=</span> <span class="token function">cross</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">return</span> c <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> a<span class="token punctuation">.</span>d <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>d <span class="token operator">:</span> c <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> cin <span class="token operator">>></span> _<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>cin <span class="token operator">>></span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>V<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">void</span> <span class="token function">GrahamScan</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token function">sort</span><span class="token punctuation">(</span>V<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>y <span class="token operator">||</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">==</span> b<span class="token punctuation">.</span>y <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token function">dist</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token function">sort</span><span class="token punctuation">(</span>V<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>V<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">int</span> m <span class="token operator">=</span> ret<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cross</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ret<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token operator">--</span>m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="71"></td><td><pre></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-1\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> ret<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> d<span class="token punctuation">]</span> <span class="token operator">:</span> ret<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="78"></td><td><pre></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> T <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> T<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="86"></td><td><pre><span class="token function">read</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token function">GrahamScan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考程式碼-andrews-monotone-chain"><a class="anchor" href="#參考程式碼-andrews-monotone-chain">#</a> 參考程式碼  <code>Andrew's Monotone Chain</code></h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">point</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">int</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">,</span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>vector<span class="token operator">&lt;</span> point <span class="token operator">></span> V<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>vector<span class="token operator">&lt;</span> point <span class="token operator">></span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>V<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> _<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>cin <span class="token operator">>></span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> T<span class="token punctuation">)</span> cin <span class="token operator">>></span> _<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">double</span> <span class="token function">cross</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> o<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>x <span class="token operator">-</span> o<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>y <span class="token operator">-</span> o<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">-</span> o<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>x <span class="token operator">-</span> o<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">void</span> <span class="token function">Andrews_Monotone_Chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token function">sort</span><span class="token punctuation">(</span>V<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>point<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> point<span class="token operator">&amp;</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>y <span class="token operator">||</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">==</span> b<span class="token punctuation">.</span>y <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">int</span> m <span class="token operator">=</span> ret<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cross</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ret<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token operator">--</span>m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> N <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> t <span class="token operator">=</span> ret<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token keyword">int</span> m <span class="token operator">=</span> ret<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">>=</span> t <span class="token operator">&amp;&amp;</span> <span class="token function">cross</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ret<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token operator">--</span>m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> ret<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">:</span> ret<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> T<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-1\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> T <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="85"></td><td><pre></pre></td></tr><tr><td data-num="86"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token function">read</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token function">Andrews_Monotone_Chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnJpY2U5NTQ3Lm1lLzIwMTkvMDUvMTAvdXZhLTY4MS1jb252ZXgtaHVsbC1maW5kaW5nLw==">https://blog.rice9547.me/2019/05/10/uva-681-convex-hull-finding/</span><br /><span class="exturl" data-url="aHR0cDovL3dlYi5udG51LmVkdS50dy9+YWxnby9Db252ZXhIdWxsLmh0bWw=">http://web.ntnu.edu.tw/~algo/ConvexHull.html</span><br /><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JTg3JUI4JUU1JThDJTg1">https://zh.wikipedia.org/wiki/%E5%87%B8%E5%8C%85</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> Convex Hull </tag>
            
            <tag> Andrew&#39;s Monotone Chain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 12125 - March of the Penguins</title>
      <link href="UVa-12125-March-of-the-Penguins/"/>
      <url>UVa-12125-March-of-the-Penguins/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-12125-march-of-the-penguins"><a class="anchor" href="#題目-uva-12125-march-of-the-penguins">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEyMTI1">UVa 12125 - March of the Penguins</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個座標圖，有 <code>N</code>  塊冰塊及數隻企鵝，要使企鵝全部跳到同一塊冰塊上，求哪幾塊可以？</p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>T</code>  代表測資數<br />每筆測資第一行輸入 <code>N</code> 、 <code>D</code> ，代表冰塊的數量、企鵝能跳的距離<br />接下來有 <code>N</code>  行，每行輸入四個整數 <code>x</code> 、 <code>y</code> 、 <code>n</code> 、 <code>m</code> ，代表點 <code>(x, y)</code>  有 <code>n</code>  隻企鵝，能跳 <code>m</code>  次</p><hr /><p><strong>OUTPUT:</strong><br /> 求哪幾塊冰塊能使所有企鵝跳到上面</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><p>此題的解題概念為 <code>Maximum flow</code> 、 <code>Ford Fulkerson</code></p></div><p>將 <code>S</code>  連到所有冰塊上， <code>capacity</code>  為企鵝的數量<br />將每個冰塊連接到企鵝能跳的的冰塊上， <code>capacity</code>  為冰塊能跳的次數<br />最後依序將每個冰塊連到 <code>T</code> ，判斷所有企鵝是否都能跳至此</p><p>一樣利用 <code>Edmonds-Karp</code>  演算法解 <code>maxflow</code>  即可</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">,</span> N<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> sum<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">float</span> D<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">int</span> _s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> _t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> G<span class="token punctuation">,</span> cpy<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> p<span class="token punctuation">,</span> ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> ice<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> vis<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">void</span> <span class="token function">fast_io</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>G<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>p<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>ice<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>ans<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">bool</span> <span class="token function">canjump</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">]</span> <span class="token operator">=</span> ice<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>x2<span class="token punctuation">,</span> y2<span class="token punctuation">]</span> <span class="token operator">=</span> ice<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>D <span class="token operator">*</span> D <span class="token operator">-</span> <span class="token function">pow</span><span class="token punctuation">(</span>x2 <span class="token operator">-</span> x1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">pow</span><span class="token punctuation">(</span>y2 <span class="token operator">-</span> y1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">void</span> <span class="token function">read_build</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>cin <span class="token operator">>></span> N <span class="token operator">>></span> D<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>_t <span class="token operator">=</span> N <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>cin <span class="token operator">>></span> x <span class="token operator">>></span> y <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre>sum <span class="token operator">+=</span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>ice<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>G<span class="token punctuation">[</span>_s<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> N<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> j <span class="token operator">&amp;&amp;</span> <span class="token function">canjump</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> G<span class="token punctuation">[</span>i <span class="token operator">+</span> N<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre>cpy <span class="token operator">=</span> G<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token keyword">int</span> <span class="token function">findflow</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> _s<span class="token punctuation">)</span> <span class="token keyword">return</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>c <span class="token operator">=</span> <span class="token function">findflow</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token keyword">return</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token keyword">int</span> <span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>vis<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="80"></td><td><pre></pre></td></tr><tr><td data-num="81"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>_s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>vis<span class="token punctuation">[</span>_s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="86"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token keyword">int</span> u <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> _s<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> _t<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="94"></td><td><pre>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="95"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="96"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="97"></td><td><pre></pre></td></tr><tr><td data-num="98"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="99"></td><td><pre>ret <span class="token operator">+=</span> <span class="token function">findflow</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">,</span> _t<span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="100"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="101"></td><td><pre></pre></td></tr><tr><td data-num="102"></td><td><pre><span class="token keyword">return</span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="103"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="104"></td><td><pre></pre></td></tr><tr><td data-num="105"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="106"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="107"></td><td><pre><span class="token function">fast_io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="108"></td><td><pre></pre></td></tr><tr><td data-num="109"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="110"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="111"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="112"></td><td><pre><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="113"></td><td><pre><span class="token function">read_build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="114"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="115"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="116"></td><td><pre>G <span class="token operator">=</span> cpy<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="117"></td><td><pre>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>_t<span class="token punctuation">]</span> <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="118"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> sum<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="119"></td><td><pre>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>_t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="120"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="121"></td><td><pre></pre></td></tr><tr><td data-num="122"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ans<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="123"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="124"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="125"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="126"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="127"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="128"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="129"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="130"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="131"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-1\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="132"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="133"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xseDUyMzExMzI0MS9hcnRpY2xlL2RldGFpbHMvNDczOTk1MjE=">https://blog.csdn.net/llx523113241/article/details/47399521</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> Maximum flow </tag>
            
            <tag> Ford Fulkerson </tag>
            
            <tag> Edmonds-Karp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11506 - Angry Programmer</title>
      <link href="UVa-11506-Angry-Programmer/"/>
      <url>UVa-11506-Angry-Programmer/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11506-angry-programmer"><a class="anchor" href="#題目-uva-11506-angry-programmer">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExNTA2">UVa 11506 - Angry Programmer</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給 <code>M</code>  個 <code>node</code>  與 <code>W</code>  條 <code>edge</code>  及他們的 <code>capacity</code> <br /> 求此圖的最小割</p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入兩個整數 <code>M</code>  與 <code>W</code> ，代表有 <code>M</code>  個 <code>node</code>  與 <code>W</code>  條 <code>edge</code> <br /> 接下來有 <code>M - 2</code>  行，每行輸入兩個整數 <code>U</code> 、 <code>C</code> ，代表 <code>node U</code>  的 <code>capacity</code>  為 <code>C</code> <br /> 接下來有 <code>W</code>  行，每行輸入三個整數 <code>U</code> 、 <code>V</code> 、 <code>C</code> ，代表 <code>edge U V</code>  的 <code>capacity</code>  為 <code>C</code></p><hr /><p><strong>OUTPUT:</strong><br /> 輸出此圖的最小割</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><p>此題的解題概念為 <code>Maximum flow</code> 、 <code>Ford Fulkerson</code></p></div><p>最小割可以轉換成最大流<br />點上的 <code>capacity</code>  可視為兩個相連的點， <code>edge</code>  的 <code>capacity</code>  為點上的 <code>capacity</code> <br /> 建完圖後跑 <code>Edmonds-Karp</code>  演算法即可</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> M<span class="token punctuation">,</span> W<span class="token punctuation">,</span> U<span class="token punctuation">,</span> V<span class="token punctuation">,</span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">int</span> _s <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> _t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">int</span> G<span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">void</span> <span class="token function">fast_io</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">void</span> <span class="token function">read_build</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">int</span> node <span class="token operator">=</span> M <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">int</span> _u<span class="token punctuation">,</span> _v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>_t <span class="token operator">=</span> M <span class="token operator">+</span> node<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>cin <span class="token operator">>></span> U <span class="token operator">>></span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>G<span class="token punctuation">[</span>U<span class="token punctuation">]</span><span class="token punctuation">[</span>U <span class="token operator">+</span> node<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">[</span>U <span class="token operator">+</span> node<span class="token punctuation">]</span><span class="token punctuation">[</span>U<span class="token punctuation">]</span> <span class="token operator">=</span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>W<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>cin <span class="token operator">>></span> U <span class="token operator">>></span> V <span class="token operator">>></span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>U <span class="token operator">==</span> M<span class="token punctuation">)</span> U <span class="token operator">=</span> _t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>V <span class="token operator">==</span> M<span class="token punctuation">)</span> V <span class="token operator">=</span> _t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>_u <span class="token operator">=</span> <span class="token punctuation">(</span>U <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> U <span class="token operator">!=</span> _t <span class="token operator">?</span> U <span class="token operator">+</span> node <span class="token operator">:</span> U<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>_v <span class="token operator">=</span> <span class="token punctuation">(</span>V <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> V <span class="token operator">!=</span> _t <span class="token operator">?</span> V <span class="token operator">+</span> node <span class="token operator">:</span> V<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>G<span class="token punctuation">[</span>_u<span class="token punctuation">]</span><span class="token punctuation">[</span>V<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">[</span>_v<span class="token punctuation">]</span><span class="token punctuation">[</span>U<span class="token punctuation">]</span> <span class="token operator">=</span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">int</span> <span class="token function">findflow</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> _s<span class="token punctuation">)</span> <span class="token keyword">return</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>c <span class="token operator">=</span> <span class="token function">findflow</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token keyword">return</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token keyword">int</span> <span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre></pre></td></tr><tr><td data-num="69"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>_s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>vis<span class="token punctuation">[</span>_s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token keyword">int</span> u <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> _s<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> _t<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="85"></td><td><pre></pre></td></tr><tr><td data-num="86"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>ret <span class="token operator">+=</span> <span class="token function">findflow</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">,</span> _t<span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="89"></td><td><pre></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token keyword">return</span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="92"></td><td><pre></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="94"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="95"></td><td><pre><span class="token function">fast_io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="96"></td><td><pre></pre></td></tr><tr><td data-num="97"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> M <span class="token operator">>></span> W<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">!</span>M <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>W<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="98"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="99"></td><td><pre><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="100"></td><td><pre><span class="token function">read_build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="103"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FjX2xpb24vYXJ0aWNsZS9kZXRhaWxzLzg2NDM2MDQ=">https://blog.csdn.net/ac_lion/article/details/8643604</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> Maximum flow </tag>
            
            <tag> Ford Fulkerson </tag>
            
            <tag> Edmonds-Karp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11380 - Down Went The Titanic</title>
      <link href="UVa-11380-Down-Went-The-Titanic/"/>
      <url>UVa-11380-Down-Went-The-Titanic/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11380-down-went-the-titanic"><a class="anchor" href="#題目-uva-11380-down-went-the-titanic">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExMzgw">UVa 11380 - Down Went The Titanic</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個 <code>X * Y</code>  的圖，求 <code>*</code> (人) 能走到 <code>#</code> (終點) 的最大數量</p><div class="note info"><ul><li><code>*</code>  碎冰上站著一個人 (起點)， <code>capacity</code>  為 <code>1</code></li><li><code>.</code>  碎冰， <code>capacity</code>  為 <code>1</code></li><li><code>@</code>  厚冰， <code>capacity</code>  為無限</li><li><code>~</code>  海， <code>capacity</code>  為 <code>0</code></li><li><code>#</code>  木頭 (終點)， <code>capacity</code>  為 <code>P</code></li></ul></div><hr /><p><strong>INPUT:</strong><br /> 輸入三個整數 <code>X</code> 、 <code>Y</code> 、 <code>P</code> <br /> 接著輸入 <code>X * Y</code>  個 <code>char</code></p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>*</code> (人) 能走到 <code>#</code> (終點) 的最大數量</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><p>此題的解題概念為 <code>Maximum flow</code> 、 <code>Ford Fulkerson</code></p></div><p>點上的 <code>capacity</code>  可視為兩個相連的點，連線的 <code>capacity</code>  為點上的 <code>capacity</code> <br /> 再根據 <code>上 下 左 右</code> 中可以走的點做連接<br />最後跑 <code>Ford Fulkerson</code>  演算法，得出 <code>maximum flow</code></p><div class="note info"><p>例如第一個側資<br /> 3 4 2<br /><em>~~#<br />...@<br />.~.</em></p><p><code>S</code>  為 <code>0</code> 、 <code>T</code>  為 <code>25</code> <br /> <code>1 ~ 12</code>  分別為圖上的點<br /> <code>13 ~ 24</code>  為分離出來的點<br />所以會由 <code>S(0)</code>  -&gt;  <code>圖上的點(1 ~ 12)</code>  -&gt;  <code>分離出來的點(13 ~ 24)</code>  -&gt;  <code>上下左右圖上的點</code>  -&gt; ...... -&gt;  <code>T(25)</code></p></div><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> P<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">int</span> _s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> _t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">char</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> G<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">int</span> m<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">void</span> <span class="token function">fast_io</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">void</span> <span class="token function">read_build</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">int</span> node <span class="token operator">=</span> X <span class="token operator">*</span> Y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>_t <span class="token operator">=</span> node <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> Y<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> X<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">int</span> u <span class="token operator">=</span> X <span class="token operator">*</span> j <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>cin <span class="token operator">>></span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>u <span class="token operator">+</span> node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'@'</span><span class="token punctuation">)</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>u <span class="token operator">+</span> node<span class="token punctuation">]</span> <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>u <span class="token operator">+</span> node<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>G<span class="token punctuation">[</span>_s<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>u <span class="token operator">+</span> node<span class="token punctuation">]</span> <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>G<span class="token punctuation">[</span>u <span class="token operator">+</span> node<span class="token punctuation">]</span><span class="token punctuation">[</span>_t<span class="token punctuation">]</span> <span class="token operator">=</span> P<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">int</span> x <span class="token operator">=</span> i <span class="token operator">+</span> m<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">int</span> y <span class="token operator">=</span> j <span class="token operator">+</span> m<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> X <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;</span> Y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">int</span> v <span class="token operator">=</span> X <span class="token operator">*</span> y <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>G<span class="token punctuation">[</span>u <span class="token operator">+</span> node<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token keyword">int</span> <span class="token function">findflow</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> _s<span class="token punctuation">)</span> <span class="token keyword">return</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>c <span class="token operator">=</span> <span class="token function">findflow</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token keyword">return</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token keyword">int</span> <span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre></pre></td></tr><tr><td data-num="83"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>_s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>vis<span class="token punctuation">[</span>_s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token keyword">int</span> u <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> _t<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="94"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="96"></td><td><pre>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="97"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="98"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="99"></td><td><pre></pre></td></tr><tr><td data-num="100"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>ret <span class="token operator">+=</span> <span class="token function">findflow</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">,</span> _t<span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="103"></td><td><pre></pre></td></tr><tr><td data-num="104"></td><td><pre><span class="token keyword">return</span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="105"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="106"></td><td><pre></pre></td></tr><tr><td data-num="107"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="108"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="109"></td><td><pre><span class="token function">fast_io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="110"></td><td><pre></pre></td></tr><tr><td data-num="111"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> Y <span class="token operator">>></span> X <span class="token operator">>></span> P<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="112"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="113"></td><td><pre><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="114"></td><td><pre><span class="token function">read_build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="115"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="116"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="117"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmEtMTEzODAv">https://www.larrysprognotes.com/UVa-11380/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> Maximum flow </tag>
            
            <tag> Ford Fulkerson </tag>
            
            <tag> Edmonds-Karp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10330 - Power Transmission</title>
      <link href="UVa-10330-Power-Transmission/"/>
      <url>UVa-10330-Power-Transmission/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10330-power-transmission"><a class="anchor" href="#題目-uva-10330-power-transmission">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwMzMw">UVa 10330 - Power Transmission</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給 <code>N</code>  個點， <code>M</code>  條邊，每個點及邊上有 <code>capacity</code> <br /> 求此圖的 <code>maximum flow</code></p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>N</code> ，接著輸入 <code>N</code>  個整數，代表點 <code>1 ~ N</code>  的 <code>capacity</code> <br /> 輸入一個整數 <code>M</code> ，接著有 <code>M</code>  行，每行輸入 <code>U</code> 、 <code>V</code> 、 <code>C</code>  三個整數，代表點 <code>U</code>  與點 <code>V</code>  連線， <code>capacity</code>  為 <code>C</code> <br /> 輸入兩個整數 <code>B</code> 、 <code>D</code></p><ol><li>輸入 <code>B</code>  個整數，代表 <code>B</code>  與起點相連</li><li>輸入 <code>D</code>  個整數，代表 <code>D</code>  與終點相連</li></ol><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>maximum flow</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><p>此題的解題概念為 <code>Maximum flow</code> 、 <code>Ford Fulkerson</code></p></div><p>點上的 <code>capacity</code>  可視為兩個相連的點，連線的 <code>capacity</code>  為點上的 <code>capacity</code> <br /> 接著跑 <code>Ford Fulkerson</code>  演算法，得出 <code>maximum flow</code></p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> U<span class="token punctuation">,</span> V<span class="token punctuation">,</span> C<span class="token punctuation">,</span> B<span class="token punctuation">,</span> D<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">int</span> _s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> _t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">int</span> G<span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> P<span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">void</span> <span class="token function">fast_io</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">void</span> <span class="token function">read_build</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">int</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>_t <span class="token operator">=</span> N <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">>></span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> N<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>cin <span class="token operator">>></span> M<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>M<span class="token operator">--</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> U <span class="token operator">>></span> V <span class="token operator">>></span> C<span class="token punctuation">,</span> G<span class="token punctuation">[</span>U <span class="token operator">+</span> N<span class="token punctuation">]</span><span class="token punctuation">[</span>V<span class="token punctuation">]</span> <span class="token operator">=</span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>cin <span class="token operator">>></span> B <span class="token operator">>></span> D<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>B<span class="token operator">--</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> a<span class="token punctuation">,</span> G<span class="token punctuation">[</span>_s<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>D<span class="token operator">--</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> a<span class="token punctuation">,</span> G<span class="token punctuation">[</span>a <span class="token operator">+</span> N<span class="token punctuation">]</span><span class="token punctuation">[</span>_t<span class="token punctuation">]</span> <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">int</span> <span class="token function">findflow</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> _s<span class="token punctuation">)</span> <span class="token keyword">return</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>c <span class="token operator">=</span> <span class="token function">findflow</span><span class="token punctuation">(</span>P<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">return</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">int</span> <span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>_s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>vis<span class="token punctuation">[</span>_s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token keyword">int</span> u <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> _t<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>P<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="75"></td><td><pre></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>ret <span class="token operator">+=</span> <span class="token function">findflow</span><span class="token punctuation">(</span>P<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">,</span> _t<span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="79"></td><td><pre></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token keyword">return</span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="82"></td><td><pre></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token function">fast_io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token function">read_build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmEtMTAzMzAv">https://www.larrysprognotes.com/UVa-10330/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> Maximum flow </tag>
            
            <tag> Ford Fulkerson </tag>
            
            <tag> Edmonds-Karp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 12873 - The Programmers</title>
      <link href="UVa-12873-The-Programmers/"/>
      <url>UVa-12873-The-Programmers/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-12873-the-programmers"><a class="anchor" href="#題目-uva-12873-the-programmers">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEyODcz">UVa 12873 - The Programmers</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>有 <code>P</code>  隊隊伍， <code>S</code>  個組別，每個組別最多能有 <code>C</code>  個隊伍<br />求參加隊伍的最大數量</p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>T</code> ，代表測資數<br />每筆測資第一行輸入四個整數 <code>P</code> 、 <code>S</code> 、 <code>C</code> 、 <code>m</code> <br /> 接下來有 <code>m</code>  行，每行有兩個整數 <code>u</code> 、 <code>v</code> ，代表 <code>u</code>  隊的組別為 <code>v</code></p><hr /><p><strong>OUTPUT:</strong><br /> 輸出參加隊伍的最大數量</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><p>此題的解題概念為 <code>Maximum flow</code> 、 <code>Ford Fulkerson</code></p></div><p>此題可視為一個 <code>S -&gt; teams -&gt; sites -&gt; T</code>  的聯通圖<br /> (起點連到隊伍、隊伍連到組別、組別連到終點)<br /> 找出此圖的 <code>maxflow</code>  即為答案</p><p>先建表，建立上述所有的邊<br />之後跑 <code>Maximum flow</code>  的演算法，(此題利用 Edmonds-Karp)</p><h1 id="參考程式碼-dfs"><a class="anchor" href="#參考程式碼-dfs">#</a> 參考程式碼 (dfs)</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// connected graph: S -> teams -> sites -> T</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">,</span> P<span class="token punctuation">,</span> S<span class="token punctuation">,</span> C<span class="token punctuation">,</span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> _s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> _t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">int</span> G<span class="token punctuation">[</span><span class="token number">530</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">530</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">530</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">void</span> <span class="token function">fast_io</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>cin <span class="token operator">>></span> P <span class="token operator">>></span> S <span class="token operator">>></span> C <span class="token operator">>></span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>_t <span class="token operator">=</span> P <span class="token operator">+</span> S <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v <span class="token operator">+</span> P<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// connect teams to sites</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> P<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> G<span class="token punctuation">[</span>_s<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// connect S to teams</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> P <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _t<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>_t<span class="token punctuation">]</span> <span class="token operator">=</span> C<span class="token punctuation">;</span> <span class="token comment">// connect sites to T</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> _t<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token operator">--</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token operator">++</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token keyword">int</span> <span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>_s<span class="token punctuation">,</span> _t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="68"></td><td><pre></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token keyword">return</span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="71"></td><td><pre></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token function">fast_io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre></pre></td></tr><tr><td data-num="76"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考程式碼-bfs"><a class="anchor" href="#參考程式碼-bfs">#</a> 參考程式碼 (bfs)</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fats_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">,</span> P<span class="token punctuation">,</span> S<span class="token punctuation">,</span> C<span class="token punctuation">,</span> M<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">int</span> _s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> _t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">int</span> G<span class="token punctuation">[</span><span class="token number">550</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">550</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token number">550</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">550</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>cin <span class="token operator">>></span> P <span class="token operator">>></span> S <span class="token operator">>></span> C <span class="token operator">>></span> M<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>_t <span class="token operator">=</span> P <span class="token operator">+</span> S <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>M<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>P <span class="token operator">+</span> v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> P<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> G<span class="token punctuation">[</span>_s<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> P <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> P <span class="token operator">+</span> S<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>_t<span class="token punctuation">]</span> <span class="token operator">=</span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">int</span> <span class="token function">updateflow</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> _s<span class="token punctuation">)</span> <span class="token keyword">return</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>c <span class="token operator">=</span> <span class="token function">updateflow</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">return</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">int</span> <span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>_s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>vis<span class="token punctuation">[</span>_s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token keyword">int</span> u <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> _s<span class="token punctuation">;</span> v <span class="token operator">&lt;=</span> _t<span class="token punctuation">;</span> <span class="token operator">++</span>v<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>p<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>ret <span class="token operator">+=</span> <span class="token function">updateflow</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">,</span> _t<span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="78"></td><td><pre></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token keyword">return</span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="81"></td><td><pre></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="85"></td><td><pre></pre></td></tr><tr><td data-num="86"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9tb3JyaXM4MjEwMjguZ2l0aHViLmlvLzIwMTQvMTIvMDUvdXZhLTEyODczLw==">https://morris821028.github.io/2014/12/05/uva-12873/</span><br /><a href="https://www.pinghenotes.com/UVa-11418-Clever-Naming-Patterns/">https://www.pinghenotes.com/UVa-11418-Clever-Naming-Patterns/</a><br /><a href="https://www.pinghenotes.com/Uva-820-Internet-Bandwidth/">https://www.pinghenotes.com/Uva-820-Internet-Bandwidth/</a></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> Maximum flow </tag>
            
            <tag> Ford Fulkerson </tag>
            
            <tag> Edmonds-Karp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11418 - Clever Naming Patterns</title>
      <link href="UVa-11418-Clever-Naming-Patterns/"/>
      <url>UVa-11418-Clever-Naming-Patterns/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11418-clever-naming-patterns"><a class="anchor" href="#題目-uva-11418-clever-naming-patterns">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExNDE4">UVa 11418 - Clever Naming Patterns</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>有 <code>N</code>  組字詞，裡面分別有 <code>N(K)</code>  個字<br />你需要從每組字詞中取出一個字，必須按照字母排序</p><div class="note info"><p>例如題目中的:<br />3<br />2 Apples Oranges<br />1 Bananas<br />5 Apricots Blueberries Cranberries Zuccini Yams</p><p><code>N</code>  為 <code>3</code> ，所以必須取 <code>3</code>  個字，且開頭須為 <code>A</code> 、 <code>B</code> 、 <code>C</code> <br /> 我們取第一組的 <code>Apples</code> <br /> 第二組的 <code>Bananas</code> <br /> 第三組的 <code>Cranberries</code> <br /> 排序後輸出</p></div><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>T</code> ，代表測資數<br />每筆測資第一行輸入一個整數 <code>N</code> ，代表有 <code>N</code>  組字詞<br />接下來有 <code>N</code>  行，先輸入一個整數 <code>K</code> ，接下來再輸入 <code>K</code>  個字</p><hr /><p><strong>OUTPUT:</strong><br /> 按順序輸出每種不重複字首字母的字</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><p>此題的解題概念為 <code>Maximum flow</code> 、 <code>Ford Fulkerson</code></p></div><p>此題可視為一個 <code>S -&gt; teams -&gt; words -&gt; alphabet -&gt; T</code>  的聯通圖<br /> (起點連到字詞組、字詞組連到字、字連到字母、字母連到終點)<br /> 找出此圖的 <code>maxflow</code>  即為答案</p><p>先建表，建立上述所有的邊<br />建立一個 <code>vector&lt;string&gt; node</code> ，儲存編號對應的字串<br />之後跑 <code>Maximum flow</code>  的演算法，(此題利用 Edmonds-Karp)<br /> 最後再按照字詞組與字的連接狀況找出答案</p><h1 id="參考程式碼-dfs"><a class="anchor" href="#參考程式碼-dfs">#</a> 參考程式碼 (dfs)</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// connected graph: S -> teams -> words -> alphabet -> T</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">,</span> N<span class="token punctuation">,</span> K<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> STW<span class="token punctuation">;</span> <span class="token comment">// size of S + teams + words</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">int</span> _T<span class="token punctuation">;</span> <span class="token comment">// size except T</span></pre></td></tr><tr><td data-num="13"></td><td><pre>string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> node<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">int</span> G<span class="token punctuation">[</span><span class="token number">710</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">710</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">710</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">void</span> <span class="token function">fast_io</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>node<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>STW <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> node<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// build node(alphabet)</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>_T <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>node<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"_T"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// build node(T)</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> STW<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _T<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>_T<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// connect alphabet to T</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> STW<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span> <span class="token operator">&lt;</span> N<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span> <span class="token operator">+</span> STW<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// connect words to alphabet</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>cin <span class="token operator">>></span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>node<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"_S"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// build node(S)</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> node<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"_N"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// build node(teams)</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>cin <span class="token operator">>></span> K<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> K<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>cin <span class="token operator">>></span> str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> c <span class="token operator">:</span> str<span class="token punctuation">)</span> c <span class="token operator">=</span> <span class="token function">tolower</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">toupper</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>node<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// connect teams to words</span></pre></td></tr><tr><td data-num="65"></td><td><pre>node<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// build node(words)</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="67"></td><td><pre></pre></td></tr><tr><td data-num="68"></td><td><pre>G<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// connect S to teams</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="70"></td><td><pre></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token operator">--</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token operator">++</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="85"></td><td><pre></pre></td></tr><tr><td data-num="86"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="88"></td><td><pre></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token keyword">void</span> <span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="94"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="95"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="96"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="97"></td><td><pre></pre></td></tr><tr><td data-num="98"></td><td><pre><span class="token comment">// check if teams to words is connected or not</span></pre></td></tr><tr><td data-num="99"></td><td><pre><span class="token keyword">void</span> <span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="100"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="101"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> STW<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="102"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="103"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> G<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="104"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="105"></td><td><pre>ret<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>node<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="106"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="107"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="108"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="109"></td><td><pre><span class="token function">sort</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ret<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="110"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="111"></td><td><pre></pre></td></tr><tr><td data-num="112"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="113"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="114"></td><td><pre><span class="token function">fast_io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="115"></td><td><pre></pre></td></tr><tr><td data-num="116"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="117"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> Case <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> Case <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span> <span class="token operator">++</span>Case<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="118"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="119"></td><td><pre><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="120"></td><td><pre><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="121"></td><td><pre><span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="122"></td><td><pre><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="123"></td><td><pre></pre></td></tr><tr><td data-num="124"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case #"</span> <span class="token operator">&lt;&lt;</span> Case <span class="token operator">&lt;&lt;</span> <span class="token string">":\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="125"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> s <span class="token operator">:</span> ret<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="126"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="127"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考程式碼-bfs"><a class="anchor" href="#參考程式碼-bfs">#</a> 參考程式碼 (bfs)</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">,</span> N<span class="token punctuation">,</span> K<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">int</span> _s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> _t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">int</span> G<span class="token punctuation">[</span><span class="token number">710</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">710</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">int</span> P<span class="token punctuation">[</span><span class="token number">710</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">710</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> words<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>ans<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>words<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>cin <span class="token operator">>></span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>G<span class="token punctuation">[</span>_s<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>cin <span class="token operator">>></span> K<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> K<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>cin <span class="token operator">>></span> str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> c <span class="token operator">:</span> str<span class="token punctuation">)</span> c <span class="token operator">=</span> <span class="token function">tolower</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">toupper</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>words<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>words<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>_t <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> N <span class="token operator">+</span> <span class="token number">27</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> words<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> G<span class="token punctuation">[</span>N <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">[</span>words<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> N <span class="token operator">+</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> G<span class="token punctuation">[</span>words<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> N <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">[</span>_t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">int</span> <span class="token function">updateflow</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> _s<span class="token punctuation">)</span> <span class="token keyword">return</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>c <span class="token operator">=</span> <span class="token function">updateflow</span><span class="token punctuation">(</span>P<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token keyword">return</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="67"></td><td><pre></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token keyword">void</span> <span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>_s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>vis<span class="token punctuation">[</span>_s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token keyword">int</span> u <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> _s<span class="token punctuation">;</span> v <span class="token operator">&lt;=</span> _t<span class="token punctuation">;</span> <span class="token operator">++</span>v<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>P<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="91"></td><td><pre></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>ret <span class="token operator">+=</span> <span class="token function">updateflow</span><span class="token punctuation">(</span>P<span class="token punctuation">[</span>_t<span class="token punctuation">]</span><span class="token punctuation">,</span> _t<span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="94"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="95"></td><td><pre></pre></td></tr><tr><td data-num="96"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> words<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="97"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="98"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>N <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> G<span class="token punctuation">[</span>N <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="99"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="100"></td><td><pre>ans<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="103"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="104"></td><td><pre></pre></td></tr><tr><td data-num="105"></td><td><pre><span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="106"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="107"></td><td><pre></pre></td></tr><tr><td data-num="108"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="109"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="111"></td><td><pre></pre></td></tr><tr><td data-num="112"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> Case <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> Case <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span> <span class="token operator">++</span>Case<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="113"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="114"></td><td><pre><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="115"></td><td><pre><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="116"></td><td><pre><span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="117"></td><td><pre></pre></td></tr><tr><td data-num="118"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case #"</span> <span class="token operator">&lt;&lt;</span> Case <span class="token operator">&lt;&lt;</span> <span class="token string">":\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="119"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> s <span class="token operator">:</span> ans<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="120"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="121"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmEtMTE0MTgv">https://www.larrysprognotes.com/UVa-11418/</span><br /><a href="https://www.pinghenotes.com/Uva-820-Internet-Bandwidth/">https://www.pinghenotes.com/Uva-820-Internet-Bandwidth/</a><br /><span class="exturl" data-url="aHR0cHM6Ly9pbnN0YW50LjFwb2ludDNhY3Jlcy5jb20vdGhyZWFkLzE0MjE0NQ==">https://instant.1point3acres.com/thread/142145</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> Maximum flow </tag>
            
            <tag> Ford Fulkerson </tag>
            
            <tag> Edmonds-Karp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 820 - Internet Bandwidth</title>
      <link href="Uva-820-Internet-Bandwidth/"/>
      <url>Uva-820-Internet-Bandwidth/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-820-internet-bandwidth"><a class="anchor" href="#題目-uva-820-internet-bandwidth">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTgyMA==">Uva 820 - Internet Bandwidth</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>求 <code>S</code>  到 <code>T</code>  的最大流量</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資第一行輸入一個整數 <code>N</code> ，代表 <code>node</code>  的數量<br />第二行輸入三個整數 <code>S</code> 、 <code>T</code> 、 <code>C</code> <br /> 接下來有 <code>C</code>  行，每行有三個整數 <code>u</code> 、 <code>v</code> 、 <code>w</code> ，代表 <code>u</code>  連到 <code>v</code> ， <code>capacity</code>  為 <code>w</code> <br /> 當 <code>N</code>  為 <code>0</code>  時結束程式</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>S</code>  到 <code>T</code>  的最大流量</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><p>此題的解題概念為 <code>Maximum flow</code> 、 <code>Ford Fulkerson</code></p></div><p>先建表，按題目要求存為雙向<br />接著跑 <code>Ford Fulkerson</code> ，每次用 <code>dfs</code>  找到一條 <code>S</code>  到 <code>T</code>  的路徑<br />並記錄其中最小的 <code>capacity</code> ，直到無法找到一條 <code>S</code>  到 <code>T</code>  的路徑為止<br />將這些 <code>capacity</code>  相加即為答案</p><h1 id="參考程式碼-dfs"><a class="anchor" href="#參考程式碼-dfs">#</a> 參考程式碼 (dfs)</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> S<span class="token punctuation">,</span> T<span class="token punctuation">,</span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> cases <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">int</span> G<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token keyword">return</span> w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+=</span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">return</span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">int</span> <span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> T<span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">else</span> ret <span class="token operator">+=</span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">return</span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="50"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N<span class="token punctuation">,</span> N<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="57"></td><td><pre>cin <span class="token operator">>></span> S <span class="token operator">>></span> T <span class="token operator">>></span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token comment">// store network data</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> C<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>cin <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">>></span> w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+=</span> w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+=</span> w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="67"></td><td><pre></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token comment">// find maxflow</span></pre></td></tr><tr><td data-num="69"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Network "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>cases <span class="token operator">&lt;&lt;</span> <span class="token string">"\nThe bandwidth is "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">".\n\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考程式碼-bfs"><a class="anchor" href="#參考程式碼-bfs">#</a> 參考程式碼 (bfs)</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">auto</span> fast_io <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> S<span class="token punctuation">,</span> T<span class="token punctuation">,</span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">int</span> cases <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">int</span> G<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">int</span> P<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>cin <span class="token operator">>></span> S <span class="token operator">>></span> T <span class="token operator">>></span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> C<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>cin <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">>></span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">int</span> <span class="token function">updateflow</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> S<span class="token punctuation">)</span> <span class="token keyword">return</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>c <span class="token operator">=</span> <span class="token function">updateflow</span><span class="token punctuation">(</span>P<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">-=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">return</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token keyword">int</span> <span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>vis<span class="token punctuation">[</span>S<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token keyword">int</span> u <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> v <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>v<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>P<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>ret <span class="token operator">+=</span> <span class="token function">updateflow</span><span class="token punctuation">(</span>P<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">,</span> T<span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="77"></td><td><pre></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token keyword">return</span> ret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N<span class="token punctuation">,</span> N<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Network "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>cases <span class="token operator">&lt;&lt;</span> <span class="token string">"\nThe bandwidth is "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">maxflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">".\n\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9oZW5yeWJlYXIzMjcuZ2l0aHViLmlvL2NvZGluZ0Jsb2cvMjAxNy8wMS8xNy9VVkE4MjAv">https://henrybear327.github.io/codingBlog/2017/01/17/UVA820/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> Maximum flow </tag>
            
            <tag> Ford Fulkerson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10534 - Wavio Sequence</title>
      <link href="UVa-10534-Wavio-Sequence/"/>
      <url>UVa-10534-Wavio-Sequence/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10534-wavio-sequence"><a class="anchor" href="#題目-uva-10534-wavio-sequence">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwNTM0">UVa 10534 - Wavio Sequence</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個長度為 <code>n</code>  的整數序列，求此序列的 <code>LIS</code>  與 <code>LDS</code>  相連最長為多少</p><div class="note info"><p><code>LIS</code>  的結尾與 <code>LDS</code>  的開頭為同一個字<br /> <code>LIS</code>  的長度與 <code>LDS</code>  相同</p></div><hr /><p><strong>INPUT:</strong><br /> 每筆測資輸入一個整數 <code>n</code> ，代表序列長度<br />接下來輸入 <code>n</code>  個整數</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出相同長度且相連的最大 <code>LIS</code>  與 <code>LDS</code>  的合</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>若使用普通 <code>DP</code>  的方式找 <code>LIS</code>  與 <code>LDS</code>  會超時，所以使用 <code>greedy algorithm</code>  加速<br />分別找出 <code>LIS</code>  與 <code>LDS</code>  與每個元素的位置<br /> (  <code>LDS</code>  的找法為反向做 <code>LIS</code>  )</p><p>之後設一個 <code>t</code>  從 <code>LIS</code>  與 <code>LDS</code>  中比較小的開始尋找<br />若 <code>LIS</code>  與 <code>LDS</code>  中的元素位置 <code>num1[i]</code>  與 <code>num2[i]</code>  皆不小於 <code>t</code> ，則跳出</p><p>輸出答案為 <code>t * 2 - 1</code></p><div class="note info"><p>更詳細關於 <code>LIS</code>  與 <code>LDS</code>  每個元素的位置<br />可以參考<a href="https://www.pinghenotes.com/UVa-481-What-Goes-Up/">這篇</a></p></div><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">>></span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lis<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lds<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>lis<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>lds<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">num1</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">num2</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>num1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>num2<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">int</span> cnt1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">int</span> cnt2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">//lis</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> lis<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>lis<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>cnt1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">auto</span> it <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>lis<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lis<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token operator">*</span>it <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>it <span class="token operator">-</span> lis<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment">//lds</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">int</span> j <span class="token operator">=</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> lds<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>lds<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>num2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>cnt2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">auto</span> it <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>lds<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lds<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token operator">*</span>it <span class="token operator">=</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>num2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>it <span class="token operator">-</span> lds<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>cnt1<span class="token punctuation">,</span> cnt2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> t <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>t<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> t <span class="token operator">&amp;&amp;</span> num2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> t<span class="token punctuation">)</span> <span class="token keyword">goto</span> out<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre>out<span class="token operator">:</span></pre></td></tr><tr><td data-num="63"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> t <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> DP </tag>
            
            <tag> LIS </tag>
            
            <tag> LDS </tag>
            
            <tag> greedy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11517 - Exact Change</title>
      <link href="UVa-11517-Exact-Change/"/>
      <url>UVa-11517-Exact-Change/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11517-exact-change"><a class="anchor" href="#題目-uva-11517-exact-change">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExNTE3">UVa 11517 - Exact Change</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個 <code>price</code>  與 <code>N</code>  個面額，求這些面額加總最接近 <code>price</code>  (大於等於) 的值與面額數量</p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>T</code> ，代表測資數<br />每筆測資輸入兩個整數 <code>price</code>  與 <code>N</code> <br /> 接下來有 <code>N</code>  個整數，代表面額</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出面額加總最接近 <code>price</code>  (大於等於) 的值與面額數量</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><p>此題為 <code>Coin Change</code>  問題</p></div><p>以一個 <code>sum</code>  來判斷最少需要做到多少，也就是所有大於 <code>sum</code>  的面額及加總都忽略</p><p>轉移方程為 <code>dp[j] = min(dp[j], dp[j - coin[i]] + 1)</code> <br /> 代表 <code>sum</code>  為 <code>j</code>  時組成的面額數量<br />由後面開始做是因為每個面額只能用一次</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">,</span> price<span class="token punctuation">,</span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span> <span class="token operator">&amp;&amp;</span> cin <span class="token operator">>></span> price <span class="token operator">>></span> N<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">20001</span><span class="token punctuation">,</span> INT_MAX <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">coin</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>cin <span class="token operator">>></span> coin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> price<span class="token punctuation">)</span> sum <span class="token operator">+=</span> coin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> sum<span class="token punctuation">;</span> j <span class="token operator">>=</span> coin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="30"></td><td><pre>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> coin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>price<span class="token punctuation">]</span> <span class="token operator">==</span> INT_MAX <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">++</span>price<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> price <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>price<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmEtMTE1MTcv">https://www.larrysprognotes.com/UVa-11517/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> DP </tag>
            
            <tag> Coin Change </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10306 - e-Coins</title>
      <link href="UVa-10306-e-Coins/"/>
      <url>UVa-10306-e-Coins/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10306-e-coins"><a class="anchor" href="#題目-uva-10306-e-coins">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwMzA2">UVa 10306 - e-Coins</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p><span class="exturl" data-url="aHR0cDovL3VuZm9ydHVuYXRlZG9nLmJsb2dzcG90LmNvbS8yMDEzLzAxLzEwMzA2LWUtY29pbnMuaHRtbA==">中文題目說明</span></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><p>此題為 <code>Coin Change</code>  問題</p></div><p>定義一個 <code>dp[i][j]</code> ，代表需要的 <code>e-coin</code>  數量<br />轉移方程為 <code>dp[i][j] = min(dp[i][j], dp[i - con][j - info] + 1)</code></p><p>最後遍歷所有 <code>i</code>  與 <code>j</code> ，找到符合 <code>S = sqrt(i*i + j*j)</code>  的最小值</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> S<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>cin <span class="token operator">>></span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>N<span class="token operator">--</span> <span class="token operator">&amp;&amp;</span> cin <span class="token operator">>></span> M <span class="token operator">>></span> S<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="20"></td><td><pre>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">301</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">301</span><span class="token punctuation">,</span> INT_MAX <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">coin</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>S <span class="token operator">*=</span> S<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">,</span> coin<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>con<span class="token punctuation">,</span> info<span class="token punctuation">]</span> <span class="token operator">:</span> coin<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> con<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">300</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> info<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">300</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> con<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> info<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">// find e-modulus</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">int</span> ans <span class="token operator">=</span> INT_MAX <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">300</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">300</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> i <span class="token operator">+</span> j <span class="token operator">*</span> j <span class="token operator">==</span> S<span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> INT_MAX <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"not possible\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cDovL3VuZm9ydHVuYXRlZG9nLmJsb2dzcG90LmNvbS8yMDEzLzAxLzEwMzA2LWUtY29pbnMuaHRtbA==">http://unfortunatedog.blogspot.com/2013/01/10306-e-coins.html</span><br /><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmEtMTAzMDYv">https://www.larrysprognotes.com/UVa-10306/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> DP </tag>
            
            <tag> Coin Change </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 357 - Let Me Count The Ways</title>
      <link href="UVa-357-Let-Me-Count-The-Ways/"/>
      <url>UVa-357-Let-Me-Count-The-Ways/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-357-let-me-count-the-ways"><a class="anchor" href="#題目-uva-357-let-me-count-the-ways">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTM1Nw==">UVa 357 - Let Me Count The Ways</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>有 5 種不同面額的幣值， <code>1、5、10、25、50</code> <br /> 給一個 <code>N</code> ，求由以上幣值組合成 <code>N</code>  共有幾種方法數</p><hr /><p><strong>INPUT:</strong><br /> 每筆資料輸入一個整數 <code>N</code></p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>N</code>  有幾種組合</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><p>此題為 <code>Coin Change</code>  問題</p></div><p>先建表，轉移方程為 <code>coin[i] += coin[i - j]</code> <br /> 其中 <code>i</code>  為當前的 <code>N</code> ， <code>j</code>  為幣值<br />之後查表輸出即可</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">long</span> <span class="token keyword">long</span> coin<span class="token punctuation">[</span><span class="token number">30001</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> dif<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>coin<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> j <span class="token operator">:</span> dif<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">30000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> coin<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> coin<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>coin<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"There is only 1 way to produce "</span> <span class="token operator">&lt;&lt;</span> N <span class="token operator">&lt;&lt;</span> <span class="token string">" cents change.\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"There are "</span> <span class="token operator">&lt;&lt;</span> coin<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" ways to produce "</span> <span class="token operator">&lt;&lt;</span> N <span class="token operator">&lt;&lt;</span> <span class="token string">" cents change.\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmEtMzU3Lw==">https://www.larrysprognotes.com/UVa-357/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> DP </tag>
            
            <tag> Coin Change </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11463 - Commandos</title>
      <link href="UVa-11463-Commandos/"/>
      <url>UVa-11463-Commandos/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11463-commandos"><a class="anchor" href="#題目-uva-11463-commandos">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExNDYz">UVa 11463 - Commandos</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>有一群敢死隊，他們的目的是摧毀所有敵方建築<br />給一個無向圖，所有 <code>edge</code>  的 <code>weight</code>  皆為 <code>1</code> <br /> 求起點 <code>s</code>  經過最遠的點後到終點 <code>d</code>  的最短路徑</p><div class="note info"><p>題目原意為需要經過所有的點，但是同時有複數個人從起點出發<br />所以可以改為從起點經過最遠的點最後到終點的問題</p></div><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>T</code> ，代表測資數<br />每筆測資先輸入兩個整數 <code>N</code>  與 <code>R</code> ，代表 <code>N</code>  個點中有 <code>R</code>  條線<br />接下來有 <code>R</code>  行，每行輸入兩個整數 <code>u</code> 、 <code>v</code> ，代表 <code>u</code>  連到 <code>v</code>  (雙向)<br /> 最後有兩個整數 <code>s</code>  與 <code>d</code> ，代表起點與終點</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>起點 -&gt; 最遠的點 -&gt; 終點</code> 的最短路徑</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先建圖</p><ol><li>將所有點設為 <code>101</code>  (相當於此題的無限大)</li><li>將 <code>G[u][v]</code>  與 <code>G[v][u]</code>  設為 <code>1</code>  (一條連接 <code>u</code> 、 <code>v</code>  的路)</li><li>將 <code>G[i][i]</code>  設為 <code>0</code>  (自己走到自己)</li></ol><p>接下來跑 <code>Floyd-Warshall algorithm</code>  (佛洛依德演算法)<br /> 轉移方程為:  <code>G[i][j] = min(G[i][j], G[i][k] + G[k][j])</code></p><p>最後找出所有從起點 <code>s</code>  走到任意點 <code>i</code> ，再從任意點 <code>i</code>  走到終點 <code>d</code>  的 <code>max</code></p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">,</span> N<span class="token punctuation">,</span> R<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cases <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> cases <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span> <span class="token operator">++</span>cases<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>cin <span class="token operator">>></span> N <span class="token operator">>></span> R<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">G</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> R<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment">// Floyd-Warshall algorithm</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> G<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">int</span> Max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> d<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>cin <span class="token operator">>></span> s <span class="token operator">>></span> d<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> Max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Max<span class="token punctuation">,</span> G<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case "</span> <span class="token operator">&lt;&lt;</span> cases <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> Max <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vYml1c19zdHJpcC9hcnRpY2xlL2RldGFpbHMvNDY2MDU4NDE=">https://blog.csdn.net/mobius_strip/article/details/46605841</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> Floyd-Warshall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10171 - Meeting Prof. Miguel</title>
      <link href="UVa-10171-Meeting-Prof-Miguel/"/>
      <url>UVa-10171-Meeting-Prof-Miguel/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10171-meeting-prof-miguel"><a class="anchor" href="#題目-uva-10171-meeting-prof-miguel">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwMTcx">UVa 10171 - Meeting Prof. Miguel</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個有 <code>weight</code>  的有向圖，圖中的道路有年齡限制<br />給 <code>Y</code>  與 <code>M</code>  的起始點，求 <code>Y</code>  與 <code>M</code>  要會合的最短路徑</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資第一行輸入一個整數 <code>N</code> ，代表接下來有 <code>N</code>  行</p><p>接著輸入四個大寫字元 <code>age</code> 、 <code>connect</code> 、 <code>u</code> 、 <code>v</code> ，與一個整數 <code>w</code></p><ol><li><code>age = Y</code>  代表只有年輕人能走的路、 <code>age = M</code>  代表只有老人能走的路</li><li><code>connect = U</code>  為單向連通、 <code>connect = B</code>  為雙向連通</li><li><code>u</code>  連接到 <code>v</code>  的 <code>weight(cost)</code>  為 <code>w</code></li></ol><p>接下來有兩個大寫字元 <code>y</code>  與 <code>m</code> ，前者代表年輕人的起始點，後者代表老人的起始點</p><p>當 <code>N</code>  為 <code>0</code>  時結束程式</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>Y</code>  與 <code>M</code>  會合的最短路徑與會合的點<br />如果無法會合，則輸出 <code>You will never meet.</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>定義兩個 <code>vector&lt; vector&lt;int&gt; &gt;</code> ，分別為 <code>G[0]</code>  與 <code>G[1]</code> <br /> <code>G[x][i][j]</code>  代表從 <code>i</code>  到 <code>j</code>  的最短路徑<br />先將 <code>G[x]</code>  中所有元素設為 <code>501</code> ，相當於無限大 (題目限制範圍為 <code>&lt; 500</code> )</p><p>判斷 <code>age</code>  為年輕人 (tmp = 0) 或老人 (tmp = 1)<br /> 將 <code>G[tmp][U][V]</code>  設為 <code>w</code> ，若為雙向則將 <code>G[tmp][V][U]</code>  設為 <code>w</code></p><div class="note info"><p>記得將自己走到自己設為 <code>0</code> <br /> 對於所有 <code>0 ~ 25</code>  的 <code>i</code> ， <code>G[tmp][i][i] = 0</code></p></div><p>接下來跑 <code>Floyd-Warshall algorithm</code>  (佛洛依德演算法)<br /> 轉移方程為:  <code>G[tmp][i][j] = min(G[tmp][i][j], G[tmp][i][k] + G[tmp][k][j])</code></p><p>最後判斷是否會合，與輸出匯合點</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> w<span class="token punctuation">,</span> U<span class="token punctuation">,</span> V<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> M<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">char</span> age<span class="token punctuation">,</span> connect<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> y<span class="token punctuation">,</span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> G<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N<span class="token punctuation">,</span> N<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="21"></td><td><pre>G<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>G<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> G<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">501</span><span class="token punctuation">)</span><span class="token punctuation">,</span> G<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">501</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">int</span> Max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">501</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">// store data in target graph</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>cin <span class="token operator">>></span> age <span class="token operator">>></span> connect <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">>></span> w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>U <span class="token operator">=</span> u <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>V <span class="token operator">=</span> v <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">==</span> <span class="token string">'Y'</span><span class="token punctuation">)</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">else</span> tmp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>G<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">[</span>U<span class="token punctuation">]</span><span class="token punctuation">[</span>V<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>connect <span class="token operator">==</span> <span class="token string">'B'</span><span class="token punctuation">)</span> G<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">[</span>U<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre>Max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Max<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>U<span class="token punctuation">,</span> V<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> G<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token comment">// Floyd-Warshall algorithm</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> Max<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Max<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> Max<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>G<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> G<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> G<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>G<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> G<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> G<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre>cin <span class="token operator">>></span> y <span class="token operator">>></span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>Y <span class="token operator">=</span> y <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>M <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Max<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> G<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> G<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> <span class="token number">501</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"You will never meet.\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Max<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> G<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> G<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">char</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vcnJpczgyMTAyOC9VVmEvYmxvYi9tYXN0ZXIvdm9sdW1lMTAxLzEwMTcxJTIwLSUyME1lZXRpbmclMjBQcm9mLiUyME1pZ3VlbC5jcHA=">https://github.com/morris821028/UVa/blob/master/volume101/10171%20-%20Meeting%20Prof.%20Miguel.cpp</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> Floyd-Warshall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 821 - Page Hopping</title>
      <link href="UVa-821-Page-Hopping/"/>
      <url>UVa-821-Page-Hopping/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-821-page-hopping"><a class="anchor" href="#題目-uva-821-page-hopping">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTgyMQ==">UVa 821 - Page Hopping</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>求 <code>u與v最短路徑</code> 的加總，再除以 <code>u與v的組合數</code> <br /> ( <code>u與v</code>  屬於 <code>G</code>  中任意兩點)</p><hr /><p><strong>INPUT:</strong><br /> 每次輸入兩個整數 <code>u</code>  與 <code>v</code> ，代表 <code>u</code>  連到 <code>v</code> ，直到 <code>u</code>  與 <code>v</code>  為 <code>0</code> <br /> 若 <code>u</code>  與 <code>v</code>  的第一次輸入皆為 <code>0</code> ，結束程式</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>u與v最短路徑</code> 的加總，再除以 <code>u與v的組合數</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>定義一個 <code>vector&lt;vector&lt;int&gt;&gt; G</code> ， <code>G[i][j]</code>  代表從 <code>i</code>  到 <code>j</code>  的最短路徑<br />先將 <code>G</code>  中所有元素設為 <code>101</code> ，相當於無限大 (題目限制範圍為 <code>1 ~ 100</code> )<br /> 將 <code>G[u][v]</code>  設為 <code>1</code> ，代表 <code>weight</code></p><p>接下來跑 <code>Floyd-Warshall algorithm</code>  (佛洛依德演算法)<br /> 轉移方程為:  <code>G[i][j] = min(G[i][j], G[i][k] + G[k][j])</code></p><p>最後將 <code>u與v最短路徑</code> 加總<br />並算出 <code>u與v的組合數</code>  =  <code>不重複元素的size * (不重複元素的size - 1)</code> <br /> 相除後即可輸出</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_set></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="12"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> cases <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">G</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> S<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">,</span> u <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>S<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">double</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">int</span> Max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">do</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>Max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Max<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>S<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>S<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">,</span> u <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment">// Floyd-Warshall algorithm</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> Max<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Max<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> Max<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> G<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">int</span> Size <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> S<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> j <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j <span class="token operator">!=</span> S<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>i <span class="token operator">!=</span> <span class="token operator">*</span>j<span class="token punctuation">)</span> ans <span class="token operator">+=</span> G<span class="token punctuation">[</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>cases <span class="token operator">&lt;&lt;</span> <span class="token string">": average length between pages = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> fixed <span class="token operator">&lt;&lt;</span> ans <span class="token operator">/</span> Size <span class="token operator">&lt;&lt;</span> <span class="token string">" clicks\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><a href="https://www.pinghenotes.com/UVa-12319-Edgetown-s-Traffic-Jams/">https://www.pinghenotes.com/UVa-12319-Edgetown-s-Traffic-Jams/</a></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> Floyd-Warshall </tag>
            
            <tag> unordered set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11495 - Bubbles and Buckets</title>
      <link href="UVa-11495-Bubbles-and-Buckets/"/>
      <url>UVa-11495-Bubbles-and-Buckets/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11495-bubbles-and-buckets"><a class="anchor" href="#題目-uva-11495-bubbles-and-buckets">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExNDk1">UVa 11495 - Bubbles and Buckets</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>你需要將一串有 <code>N</code>  個數字的陣列做排序，每次只能將相鄰的倆倆數字互換<br />求由 <code>Marcelo</code>  先手， <code>Marcelo</code>  與 <code>Carlos</code>  輪流做一次互換，誰會完成排序？</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資先輸入一個整數 <code>N</code> <br /> 接著輸入 <code>N</code>  個數字 (此數字限制範圍為 <code>1 ~ N</code> )</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>Marcelo</code>  與 <code>Carlos</code>  中誰會勝出 (完成排序)</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>讀入資料後，利用 <code>merge sort</code>  將資料做排序</p><div class="note info"><p><code>merge sort</code>  的時間複雜度為 <code>O(n*log n)</code> <br /> 每次將陣列中的數字分成兩半，直到剩餘一個數字<br />再比對倆倆子陣列，按照大小排序合併</p></div><p><code>ans</code>  的方法數為 <code>每次選擇右半邊的陣列時，左半邊剩餘的元素數</code> 的總和</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// merge sort</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> P<span class="token punctuation">,</span> <span class="token keyword">int</span> front<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">left</span><span class="token punctuation">(</span>P<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> front<span class="token punctuation">,</span> P<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">right</span><span class="token punctuation">(</span>P<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> P<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>left<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>right<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> front<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> P<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>P<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">[</span>r<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>ans <span class="token operator">+=</span> left<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment">// merge function</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">void</span> <span class="token function">mergesort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> P<span class="token punctuation">,</span> <span class="token keyword">int</span> front<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>front <span class="token operator">&lt;</span> end<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>front <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token function">mergesort</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> front<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token function">mergesort</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token function">merge</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> front<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="45"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> P<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N<span class="token punctuation">,</span> N<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>P<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">>></span> P<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre>ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token function">mergesort</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>ans <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">"Marcelo\n"</span> <span class="token operator">:</span> <span class="token string">"Carlos\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vYml1c19zdHJpcC9hcnRpY2xlL2RldGFpbHMvODIxNzY2OQ==">https://blog.csdn.net/mobius_strip/article/details/8217669</span><br /><span class="exturl" data-url="aHR0cHM6Ly9hbHJpZ2h0Y2hpdS5naXRodWIuaW8vU2Vjb25kUm91bmQvY29tcGFyaXNvbi1zb3J0LW1lcmdlLXNvcnRoZS1iaW5nLXBhaS14dS1mYS5odG1s">https://alrightchiu.github.io/SecondRound/comparison-sort-merge-sorthe-bing-pai-xu-fa.html</span><br /><span class="exturl" data-url="aHR0cHM6Ly9zaXRlcy5nb29nbGUuY29tL3NpdGUvenNnaXRpdGl0L2hvbWUvamluLWppZWMtY2hlbmctc2hpLXNoZS1qaS91dmEtMTE0OTUtLS1idWJibGVzLWFuZC1idWNrZXRz">https://sites.google.com/site/zsgititit/home/jin-jiec-cheng-shi-she-ji/uva-11495---bubbles-and-buckets</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> merge sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10755 - Garbage Heap</title>
      <link href="UVa-10755-Garbage-Heap/"/>
      <url>UVa-10755-Garbage-Heap/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10755-garbage-heap"><a class="anchor" href="#題目-uva-10755-garbage-heap">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwNzU1">UVa 10755 - Garbage Heap</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>求一個 <code>A * B * C</code>  大小矩陣的最大子矩陣合</p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>T</code> ，代表測資數<br />每筆測資第一行輸入三個整數 <code>A</code> 、 <code>B</code> 、 <code>C</code> <br /> 接下來有 <code>A * B * C</code>  個整數，代表矩陣的值</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>A * B * C</code>  大小矩陣的最大子矩陣合</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先建表儲存矩陣的值</p><p>將 <code>3D最大子矩陣合</code> 透過 2 層迴圈壓縮成 <code>2D最大子矩陣合</code> 的問題<br />再將 <code>2D最大子矩陣合</code> 透過 2 層迴圈壓縮成 <code>1D最大子矩陣合</code> 的問題<br /> <code>1D最大子矩陣合</code> 問題直接跑 <code>Kadane's Algorithm</code>  即可</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">,</span> A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">long</span> <span class="token keyword">long</span> G<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">long</span> <span class="token keyword">long</span> sum2d<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">long</span> <span class="token keyword">long</span> sum1d<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// Kadane's Algorithm</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">get_max1d</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">long</span> <span class="token keyword">long</span> Max1d<span class="token punctuation">,</span> localmax<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>Max1d <span class="token operator">=</span> localmax <span class="token operator">=</span> sum1d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>localmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>localmax <span class="token operator">+</span> sum1d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> sum1d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>Max1d <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Max1d<span class="token punctuation">,</span> localmax<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">return</span> Max1d<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">get_max2d</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">long</span> <span class="token keyword">long</span> Max2d <span class="token operator">=</span> LLONG_MIN<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> B<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>sum1d<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sum1d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> B<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> A<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> sum1d<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+=</span> sum2d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>Max2d <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Max2d<span class="token punctuation">,</span> <span class="token function">get_max1d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">return</span> Max2d<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">get_max3d</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">long</span> <span class="token keyword">long</span> Max3d <span class="token operator">=</span> LLONG_MIN<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> C<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>sum2d<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sum2d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> C<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> A<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> B<span class="token punctuation">;</span> <span class="token operator">++</span>l<span class="token punctuation">)</span> sum2d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+=</span> G<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>Max3d <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Max3d<span class="token punctuation">,</span> <span class="token function">get_max2d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token keyword">return</span> Max3d<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="66"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span> <span class="token operator">&amp;&amp;</span> cin <span class="token operator">>></span> A <span class="token operator">>></span> B <span class="token operator">>></span> C<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token comment">// store data in graph</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> B<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> C<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="76"></td><td><pre>cin <span class="token operator">>></span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre></pre></td></tr><tr><td data-num="78"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token function">get_max3d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>T <span class="token operator">?</span> <span class="token string">"\n\n"</span> <span class="token operator">:</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmEtMTA3NTUv">https://www.larrysprognotes.com/UVa-10755/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> DP </tag>
            
            <tag> Kadane&#39;s Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11951 - Area</title>
      <link href="UVa-11951-Area/"/>
      <url>UVa-11951-Area/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11951-area"><a class="anchor" href="#題目-uva-11951-area">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExOTUx">UVa 11951 - Area</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>有一個 <code>N * M</code>  大小的矩陣，求 <code>子矩陣合 &lt;= K</code>  的 <code>最大子矩陣範圍</code></p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>T</code> ，代表測資數<br />每筆測資第一行有三個整數 <code>N</code> 、 <code>M</code> 、 <code>K</code> <br /> 接下來有 <code>N * M</code>  個整數，代表矩陣的值</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>子矩陣合 &lt;= K</code>  的 <code>最大子矩陣範圍</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先建表儲存矩陣的值</p><p>將 <code>2D最大子矩陣合</code> 透過 2 層迴圈壓縮成 <code>1D最大子矩陣合</code> 的問題</p><p>以一個變數 <code>top</code>  控制起點，若目前 <code>localmax &gt; K</code>  則將範圍下移一格<br />計算目前的範圍及子矩陣合，最後儲存最大的範圍至 <code>maxS</code> 、最小的值至 <code>maxP</code></p><h1 id="參考程式"><a class="anchor" href="#參考程式">#</a> 參考程式</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">,</span> N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> K<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> maxS<span class="token punctuation">,</span> maxP<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">int</span> G<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">int</span> sum<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// Kadane's Algorithm</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">void</span> <span class="token function">max1d</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> localsum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>localsum <span class="token operator">+=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>localsum <span class="token operator">></span> K<span class="token punctuation">)</span> localsum <span class="token operator">-=</span> sum<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">int</span> localS <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> top <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>localS <span class="token operator">></span> maxS<span class="token punctuation">)</span> maxS <span class="token operator">=</span> localS<span class="token punctuation">,</span> maxP <span class="token operator">=</span> localsum<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>localS <span class="token operator">==</span> maxS<span class="token punctuation">)</span> maxP <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>maxP<span class="token punctuation">,</span> localsum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="31"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cases <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> cases <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span> <span class="token operator">++</span>cases<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>cin <span class="token operator">>></span> N <span class="token operator">>></span> M <span class="token operator">>></span> K<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>maxS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>maxP <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token comment">// store data in graph</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> cin <span class="token operator">>></span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>l<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>r <span class="token operator">=</span> l<span class="token punctuation">;</span> r <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>r<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token function">max1d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case #"</span> <span class="token operator">&lt;&lt;</span> cases <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> maxS <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> maxP <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmEtMTE5NTEv">https://www.larrysprognotes.com/UVa-11951/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> DP </tag>
            
            <tag> Kadane&#39;s Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10827 - Maximum sum on a torus</title>
      <link href="UVa-10827-Maximum-sum-on-a-torus/"/>
      <url>UVa-10827-Maximum-sum-on-a-torus/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10827-maximum-sum-on-a-torus"><a class="anchor" href="#題目-uva-10827-maximum-sum-on-a-torus">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwODI3">UVa 10827 - Maximum sum on a torus</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>求一個 <code>N * N</code>  大小矩陣的最大子矩陣合，子矩陣可跨越邊線組合</p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>T</code> ，代表測資數<br />每筆測資第一行有一個整數 <code>N</code> ，代表陣列的大小<br />接下來會有 <code>N * N</code>  個整數，代表矩陣的值</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出最大的子矩陣合</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先建表儲存矩陣的值</p><p>將 <code>2D最大子矩陣合</code> 透過 2 層迴圈壓縮成 <code>1D最大子矩陣合</code> 的問題</p><ol><li>利用一個變數 <code>st</code>  解決左右超出的問題</li><li>上下超出的問題可視為 <code>整個矩陣 - 最小子矩陣</code></li></ol><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> G<span class="token punctuation">[</span><span class="token number">152</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> sum<span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// Kadane's Algorithm</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> <span class="token function">max1d</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> globalmax<span class="token punctuation">,</span> localmax<span class="token punctuation">,</span> globalmin<span class="token punctuation">,</span> localmin<span class="token punctuation">,</span> total<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>globalmax <span class="token operator">=</span> localmax <span class="token operator">=</span> globalmin <span class="token operator">=</span> localmin <span class="token operator">=</span> total <span class="token operator">=</span> sum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>total <span class="token operator">+=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>localmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>localmax <span class="token operator">+</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>localmin <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>localmin <span class="token operator">+</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>globalmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>globalmax<span class="token punctuation">,</span> localmax<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>globalmin <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>globalmin<span class="token punctuation">,</span> localmin<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>globalmax<span class="token punctuation">,</span> total <span class="token operator">-</span> globalmin<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="33"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span> <span class="token operator">&amp;&amp;</span> cin <span class="token operator">>></span> N<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">int</span> Max <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token comment">// store data in graph</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> cin <span class="token operator">>></span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> st <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">,</span> <span class="token operator">++</span>st<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>st <span class="token operator">==</span> N<span class="token punctuation">)</span> st <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> sum<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+=</span> G<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>Max <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>Max<span class="token punctuation">,</span> <span class="token function">max1d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> Max <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmEtMTA4Mjcv">https://www.larrysprognotes.com/UVa-10827/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> DP </tag>
            
            <tag> Kadane&#39;s Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 12218 - An Industrial Spy</title>
      <link href="UVa-12218-An-Industrial-Spy/"/>
      <url>UVa-12218-An-Industrial-Spy/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-12218-an-industrial-spy"><a class="anchor" href="#題目-uva-12218-an-industrial-spy">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEyMjE4">UVa 12218 - An Industrial Spy</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個至多 7 位的數，求每個數字排列後，為質數的數量</p><div class="note info"><p>例如:  <code>17</code> <br /> 可以排成:  <code>1、7、17、71</code> <br /> 共有 <code>7、17、71</code> 3 個質數</p></div><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>N</code> ，代表測資數<br />每筆測資輸入一個至多 7 位的數 <code>str</code></p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>str</code>  排列後，為質數的數量</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先根據題目範圍建質數表 <code>1 ~ 10000000</code> <br /> 接著跑 <code>dfs</code> ，找出所有可能的排列並存入 <code>result</code> <br /> 最後計算質數的數量</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_set></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> is_prime<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">void</span> <span class="token function">find_prime</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>is_prime<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>is_prime<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> is_prime<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>is_prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span> is_prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>string str<span class="token punctuation">,</span> string target<span class="token punctuation">,</span> <span class="token keyword">int</span> now<span class="token punctuation">,</span> <span class="token keyword">int</span> Max<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">==</span> Max<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>stringstream <span class="token function">ss</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">int</span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>ss <span class="token operator">>></span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>result<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">auto</span> s <span class="token operator">=</span> str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> target <span class="token operator">+</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> now <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> Max<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="50"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token comment">// find all prime number between 1 ~ 10000000</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token function">find_prime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>cin <span class="token operator">>></span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>N<span class="token operator">--</span> <span class="token operator">&amp;&amp;</span> cin <span class="token operator">>></span> str<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>result<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token comment">// use dfs to find all permutation of str</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> result<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>is_prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> dfs </tag>
            
            <tag> unordered set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11489 - Integer Game</title>
      <link href="UVa-11489-Integer-Game/"/>
      <url>UVa-11489-Integer-Game/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11489-integer-game"><a class="anchor" href="#題目-uva-11489-integer-game">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExNDg5">UVa 11489 - Integer Game</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>有兩位玩家 <code>S</code>  與 <code>T</code>  要玩一個回合制遊戲，由 <code>S</code>  先行動<br />從 <code>N</code>  開始，每位玩家要輪流移除一個字元的數字<br />條件為:</p><ol><li>移除後所有數字相加需要為 <code>3</code>  的倍數</li><li>當剩餘一個數字時，可以直接移除<br />誰先不能移除數字誰就輸了</li></ol><div class="note info"><p>例如當 <code>N = 1234</code> <br /> 可以移除 <code>4</code> ，會使得剩下的數字 <code>1 + 2 + 3 = 6</code>  為 <code>3</code>  的倍數<br />也可以移除 <code>1</code> ，會使得剩下的數字 <code>2 + 3 + 4 = 9</code>  也為 <code>3</code>  的倍數</p></div><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>T</code> ，代表測資數<br />每筆測資輸入一個整數 <code>N</code></p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>S</code>  (S 贏) 或 <code>T</code>  (T 贏)</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先將 <code>N</code>  存入一個 <code>vector&lt;int&gt; num</code> ，每個字元一位<br />設一個變數 <code>sum</code>  為 <code>num</code>  的數字合<br />判斷 <code>sum - num[i]</code>  是否為 <code>3</code>  的倍數，是則移除那個數字並換另一個玩家行動<br />重複做至當 <code>num</code>  剩餘一個數字或 <code>sum - num[i]</code>  沒有找到 <code>3</code>  的倍數</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>string N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cases <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> cases <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span> <span class="token operator">++</span>cases<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">bool</span> s_win <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>cin <span class="token operator">>></span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> c <span class="token operator">:</span> N<span class="token punctuation">)</span> num<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>c <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> num<span class="token punctuation">)</span> sum <span class="token operator">+=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sum <span class="token operator">-</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>s_win <span class="token operator">^=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>num<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>s_win <span class="token operator">^=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> num<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case "</span> <span class="token operator">&lt;&lt;</span> cases <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>s_win <span class="token operator">?</span> <span class="token string">"S"</span> <span class="token operator">:</span> <span class="token string">"T"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10921 - Find the Telephone</title>
      <link href="UVa-10921-Find-the-Telephone/"/>
      <url>UVa-10921-Find-the-Telephone/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10921-find-the-telephone"><a class="anchor" href="#題目-uva-10921-find-the-telephone">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwOTIx">UVa 10921 - Find the Telephone</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>你需要將一串訊息轉換成對應的號碼</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資輸入一個字串 <code>str</code></p><hr /><p><strong>OUTPUT:</strong><br /> 輸出轉換後的字串</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>純粹的條件判斷後輸出即可</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> str<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> c <span class="token operator">:</span> str<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'C'</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'D'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'F'</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'G'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'I'</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'J'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'L'</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'M'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'O'</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'P'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'S'</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'T'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'V'</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'W'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 12019 - Doom&#39;s Day Algorithm</title>
      <link href="UVa-12019-Doom-s-Day-Algorithm/"/>
      <url>UVa-12019-Doom-s-Day-Algorithm/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-12019-dooms-day-algorithm"><a class="anchor" href="#題目-uva-12019-dooms-day-algorithm">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEyMDE5">UVa 12019 - Doom's Day Algorithm</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個日期 <code>M</code>  月 <code>D</code>  日<br />求 <code>2011年M月D日</code> 是星期幾<br />已知:  <code>4/4</code> 、 <code>6/6</code> 、 <code>8/8</code> 、 <code>10/10</code> 、 <code>12/12</code>  都是星期一</p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>N</code> ，代表測資數<br />每筆測資輸入兩個整數 <code>M</code> 、 <code>D</code> ，代表 <code>M</code>  月 <code>D</code>  日</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>2011年M月D日</code> 是星期幾</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先建一個每月有幾天的陣列<br />將 <code>2011年1月0日</code> 到 <code>2011年M月D日</code> 的總天數算出來<br /> <code>%= 7</code>  後輸出即可</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> days<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> D<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>cin <span class="token operator">>></span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>N<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>cin <span class="token operator">>></span> M <span class="token operator">>></span> D<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">int</span> day <span class="token operator">=</span> D<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> day <span class="token operator">+=</span> days<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>day <span class="token operator">%=</span> <span class="token number">7</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Friday\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Saturday\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sunday\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Monday\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Tuesday\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Wednesday\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Thursday\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 725 - Division</title>
      <link href="UVa-725-Division/"/>
      <url>UVa-725-Division/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-725-division"><a class="anchor" href="#題目-uva-725-division">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTcyNQ==">UVa 725 - Division</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>輸入一個範圍 <code>2 ~ 79</code>  的整數 <code>N</code> ，找到  <code>abcde / fghij = N</code> <br /> <code>abcdefghij</code>  為 <code>0 ~ 9</code>  不重複數字</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資輸入一個整數 <code>N</code> <br /> 當 <code>N</code>  為 <code>0</code>  時結束</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出所有符合條件的 <code>abcde / fghij = N</code> ，以升冪排序<br />如果都不符合條件，輸出 <code>There are no solutions for N</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>採取暴力破解法</p><p>先將條件置換成 <code>abcde / N = fghij</code> <br /> <code>abcde</code>  的範圍為 <code>01234 ~ 98765</code> ，設一個變數 <code>i</code>  除以 <code>N</code></p><p>若 <code>i % N = 0</code>  則進行下一步判斷<br />設一個變數 <code>num = i / N</code> <br /> 若 <code>num</code>  與 <code>i</code>  中擁有 <code>0123456789</code>  所有元素，則符合條件，存入 <code>priority queue</code> <br /> 最後再依序輸出</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">p pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span> </span></span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>string s <span class="token operator">=</span> <span class="token string">"0123456789"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N<span class="token punctuation">,</span> N<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>priority_queue<span class="token operator">&lt;</span>p<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>p<span class="token operator">>></span> ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">98765</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1234</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> N <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">int</span> num <span class="token operator">=</span> i <span class="token operator">/</span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>string t1<span class="token punctuation">,</span> t2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>stringstream ss1<span class="token punctuation">,</span> ss2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>ss1 <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">,</span> ss1 <span class="token operator">>></span> t1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>ss2 <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">,</span> ss2 <span class="token operator">>></span> t2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>str <span class="token operator">=</span> t1 <span class="token operator">+</span> t2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> str <span class="token operator">+=</span> <span class="token string">'0'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token function">sort</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> s<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>cnt<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"There are no solutions for "</span> <span class="token operator">&lt;&lt;</span> N <span class="token operator">&lt;&lt;</span> <span class="token string">".\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>ans<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" / "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> j <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> N <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>ans<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> DP </tag>
            
            <tag> priority queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11566 - Let&#39;s Yum Cha</title>
      <link href="UVa-11566-Let-s-Yum-Cha/"/>
      <url>UVa-11566-Let-s-Yum-Cha/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11566-lets-yum-cha"><a class="anchor" href="#題目-uva-11566-lets-yum-cha">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExNTY2">UVa 11566 - Let's Yum Cha</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p><span class="exturl" data-url="aHR0cDovL3VuZm9ydHVuYXRlZG9nLmJsb2dzcG90LmNvbS8yMDEzLzA3LzExNTY2LWxldHMteXVtLWNoYV8yMy5odG1s">中文題目說明</span></p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入 4 個整數 <code>N</code> 、 <code>x</code> 、 <code>T</code> 、 <code>K</code> <br /> 你與 <code>N</code>  位朋友去飲茶，每人最多付 <code>x</code>  元，需要支付 <code>T</code>  元的茶費，總共有 <code>K</code>  種點心可以點<br />接下來有 <code>K</code>  行，每行有 <code>N + 2</code>  個整數，第一個為點心的價格，後面 <code>N + 1</code>  個為每人的滿意度<br />當 <code>N</code> 、 <code>x</code> 、 <code>T</code> 、 <code>K</code>  為 <code>0</code>  時結束程式</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出最大的 <code>mean favour value</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先計算預算 <code>P</code> <br /> <code>P = (總人數 * 每人最多支付金額) / 服務費 - (每個人的茶費)</code> <br /> 寫成數學算式如下:<br /> <code>P = (++N * x) / (float)1.1 - (N * T);</code></p><div class="note info"><p><code>++N</code>  是因為人數要加上 &quot;我&quot;<br /> <code>(float)1.1</code> ，原本 <code>1.1</code>  的型態為 <code>double</code> ，直接做除法運算會使得某些數字出錯，所以改用 <code>float</code></p></div><hr /><p>接下來輸入資料存到 <code>vector&lt; pair&lt;int, int&gt; &gt; pf</code> <br /> 前者為點心的價格，後者為所有人滿意度之合<br />每樣點心最多點兩個，所以存兩次</p><hr /><p>之後同樣用 <code>knapsack problems</code>  的概念跑動態規劃<br />定義一個 <code>dp[i][j]</code> <br /> 代表選了 <code>i</code>  個點心，總價格為 <code>j</code>  元</p><p>轉移方程為:<br /> <code>dp[i][j] = max(dp[i][j], dp[i - 1][j], dp[i - 1][j - price] + favour)</code></p><hr /><p>最後將價格固定，遍歷所有選擇數量的最大滿意度</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="11"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> x<span class="token punctuation">,</span> T<span class="token punctuation">,</span> K<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">int</span> P<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N <span class="token operator">>></span> x <span class="token operator">>></span> T <span class="token operator">>></span> K<span class="token punctuation">,</span> N <span class="token operator">+</span> x <span class="token operator">+</span> T <span class="token operator">+</span> K<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// calculate the tatal (maximum) price</span></pre></td></tr><tr><td data-num="22"></td><td><pre>P <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">++</span>N <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token number">1.1</span> <span class="token operator">-</span> <span class="token punctuation">(</span>N <span class="token operator">*</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">//cout &lt;&lt; P &lt;&lt; "\n";</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>vector<span class="token operator">&lt;</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> pf<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">// store price and favour index</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment">// put each of the dim sums twice in the vector</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> K<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">int</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>cin <span class="token operator">>></span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> cin <span class="token operator">>></span> tmp<span class="token punctuation">,</span> b <span class="token operator">+=</span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>pf<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>pf<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> pf<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>price<span class="token punctuation">,</span> favour<span class="token punctuation">]</span> <span class="token operator">=</span> pf<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> N <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> P<span class="token punctuation">;</span> j <span class="token operator">>=</span> price<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> price<span class="token punctuation">]</span> <span class="token operator">+</span> favour<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>P<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> fixed <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>ans <span class="token operator">/</span> N <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9zdW1tb241MjguZ2l0aHViLmlvLzIwMTcvMTIvMDcvVVZBLTExNTY2LUxldC1zLVl1bS1DaGEv">https://summon528.github.io/2017/12/07/UVA-11566-Let-s-Yum-Cha/</span><br /><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NhbWxlZTk0Ni9hcnRpY2xlL2RldGFpbHMvMzg0ODE1MzM=">https://blog.csdn.net/samlee946/article/details/38481533</span><br /><span class="exturl" data-url="aHR0cDovL3VuZm9ydHVuYXRlZG9nLmJsb2dzcG90LmNvbS8yMDEzLzA3LzExNTY2LWxldHMteXVtLWNoYV8yMy5odG1s">http://unfortunatedog.blogspot.com/2013/07/11566-lets-yum-cha_23.html</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> DP </tag>
            
            <tag> knapsack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10616 - Divisible Group Sums</title>
      <link href="UVa-10616-Divisible-Group-Sums/"/>
      <url>UVa-10616-Divisible-Group-Sums/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10616-divisible-group-sums"><a class="anchor" href="#題目-uva-10616-divisible-group-sums">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwNjE2">UVa 10616 - Divisible Group Sums</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個有 <code>N</code>  個數字的序列，取出 <code>M</code>  個數字相加，使結果能整除 <code>D</code> ，求總方法數</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資第一行輸入兩個整數 <code>N</code> 、 <code>Q</code> <br /> 接下來有 <code>N</code>  行，每行輸入一個整數<br />接下來有 <code>Q</code>  行，每行輸入兩個整數 <code>D</code> 、 <code>M</code> <br /> 當 <code>N</code> 、 <code>Q</code>  為 <code>0</code>  時結束程式</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出符合題目條件的總方法數</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><p>此題為 <code>knapsack problems</code>  (背包問題)</p></div><p>需要先將輸入的 <code>N</code>  個數字 ( <code>num[i]</code> ) 做處理</p><ol><li>若為<strong>正數</strong>， <code>num2[i] = num[i] % D</code> ，直接取 <code>D</code>  的餘數</li><li>若為<strong>負數</strong>， <code>num2[i] = num[i] % D + D</code> ，取 <code>D</code>  的餘數後加 <code>D</code> ，使之變正數</li></ol><p>定義一個 <code>dp[j][k]</code> <br /> <code>j</code>  為當前取到的數值<br /> <code>k</code>  為取幾個數</p><p>轉移方程為 <code>dp[j][k] += dp[j - num2[f]][k - 1]</code> <br /> 最後將所有 <code>dp[D的倍數][M]</code>  相加為答案</p><div class="note info"><p>由於題目限制為 <code>32 bit</code>  的有號整數，所以需要用 <code>long long</code>  以防 overflow</p></div><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> Q<span class="token punctuation">,</span> D<span class="token punctuation">,</span> M<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">int</span> a<span class="token punctuation">,</span> cases <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">long</span> <span class="token keyword">long</span> dp<span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N <span class="token operator">>></span> Q<span class="token punctuation">,</span> N <span class="token operator">&amp;&amp;</span> Q<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>N<span class="token operator">--</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> a<span class="token punctuation">,</span> num<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"SET "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>cases <span class="token operator">&lt;&lt;</span> <span class="token string">":\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Q<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>cin <span class="token operator">>></span> D <span class="token operator">>></span> M<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> num2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> j <span class="token operator">:</span> num<span class="token punctuation">)</span> num2<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>j <span class="token operator">%</span> D <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> j <span class="token operator">%</span> D <span class="token operator">:</span> j <span class="token operator">%</span> D <span class="token operator">+</span> D<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> f <span class="token operator">&lt;</span> num2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>f<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> num2<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> M<span class="token punctuation">;</span> k <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>k<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> num2<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">200</span><span class="token punctuation">;</span> j <span class="token operator">+=</span> D<span class="token punctuation">)</span> ans <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"QUERY "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vYml1c19zdHJpcC9hcnRpY2xlL2RldGFpbHMvNDEyNTIzMDc=">https://blog.csdn.net/mobius_strip/article/details/41252307</span><br /><span class="exturl" data-url="aHR0cHM6Ly9zdW1tb241MjguZ2l0aHViLmlvLzIwMTcvMTIvMDUvVVZBLTEwNjE2LURpdmlzaWJsZS1Hcm91cC1TdW1zLw==">https://summon528.github.io/2017/12/05/UVA-10616-Divisible-Group-Sums/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> DP </tag>
            
            <tag> knapsack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 1213 - Sum of Different Primes</title>
      <link href="UVa-1213-Sum-of-Different-Primes/"/>
      <url>UVa-1213-Sum-of-Different-Primes/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-1213-sum-of-different-primes"><a class="anchor" href="#題目-uva-1213-sum-of-different-primes">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEyMTM=">UVa 1213 - Sum of Different Primes</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>求將 <code>K</code>  個小於等於 <code>N</code>  的質數相加後等於 <code>N</code>  的方法數量</p><div class="note info"><p>例如:<br /> <code>N = 24</code> 、 <code>K = 3</code> <br /> 則答案有 2 種</p></div><hr /><p><strong>INPUT:</strong><br /> 每筆測資輸入兩個整數 <code>N</code> 、 <code>K</code> <br /> 當 <code>N</code>  與 <code>K</code>  為 <code>0</code>  時結束程式</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>dp[N][K]</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><p>此題為 <code>knapsack problems</code>  (背包問題)</p></div><p>先將 <code>&lt;=1120</code>  的所有質數找出，存入 <code>prime</code></p><p>定義一個 <code>dp[i][j]</code> <br /> <code>i</code>  為當前的 <code>N</code> ，也就是能取到的最大數字<br /> <code>j</code>  為相加的質數數量</p><p><code>dp[i][j] += dp[i - prime[k]][j - 1]</code> <br /> 代表將 <code>dp[i - prime[k]][j - 1]</code>  加上當前的 <code>prime[k]</code> <br /> 將其所有可能加總，即為 <code>dp[i][j]</code></p><div class="note info"><p>避免資料被覆蓋，所以需要從 1120 往回做動態規劃</p></div><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span><span class="token expression"><span class="token punctuation">;</span></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> K<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> prime<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">vis</span><span class="token punctuation">(</span><span class="token number">1121</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">1121</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// find prime number</span></pre></td></tr><tr><td data-num="19"></td><td><pre>prime<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1120</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>prime<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">1120</span><span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span> vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">// dp (knapsack)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> prime<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1120</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> prime<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> prime<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N <span class="token operator">>></span> K<span class="token punctuation">,</span> N <span class="token operator">&amp;&amp;</span> K<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>K<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vcnJpczgyMTAyOC9VVmEvYmxvYi9tYXN0ZXIvdm9sdW1lMDEyLzEyMTMlMjAtJTIwU3VtJTIwb2YlMjBEaWZmZXJlbnQlMjBQcmltZXMuYw==">https://github.com/morris821028/UVa/blob/master/volume012/1213%20-%20Sum%20of%20Different%20Primes.c</span><br /><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vYml1c19zdHJpcC9hcnRpY2xlL2RldGFpbHMvNzM2NTc4NjA=">https://blog.csdn.net/mobius_strip/article/details/73657860</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> DP </tag>
            
            <tag> knapsack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11790 - Murcia&#39;s Skyline</title>
      <link href="UVa-11790-Murcia-s-Skyline/"/>
      <url>UVa-11790-Murcia-s-Skyline/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11790-murcias-skyline"><a class="anchor" href="#題目-uva-11790-murcias-skyline">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExNzkw">UVa 11790 - Murcia's Skyline</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>有 <code>N</code>  棟建築，每棟建築有 <code>高度h</code>  與 <code>寬度n</code> <br /> 你需要依照高度找出從左至右的 <code>longest increasing subsequence</code>  與 <code>longest decreasing subsequence</code> <br /> 將這些 <code>subsequence</code>  的 <code>w</code>  加總，各找出某一個序列的最大 <code>w</code>  合，稱為 <code>w(in)</code>  與 <code>w(de)</code> <br /> 若 <code>w(in)</code>  比 <code>w(de)</code>  大，則先輸出 <code>longest increasing subsequence</code> <br /> 反之則先輸出 <code>longest decreasing subsequence</code></p><hr /><p><strong>INPUT:</strong><br /> 第一行有一個整數 <code>S</code> ，代表測資數<br />每筆測資第一行有一個整數 <code>N</code> ，代表建築的數量<br />接下來有 <code>N</code>  個整數，代表建築的高度<br />最後有 <code>N</code>  個整數，代表建築的寬度</p><hr /><p><strong>OUTPUT:</strong><br /> 依照大小輸出 <code>Increasing subsequence</code>  的最大 <code>w</code>  合與 <code>decreasing subsequence</code>  最大 <code>w</code>  合</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>標準的動態規劃題<br />採用 <code>DP</code>  時間複雜度為 <code>O(N^2)</code>  的解法<br />因為要找 <code>LIS</code>  與 <code>LDS</code> ，所以須做 2 次<br />其餘與上一題 (11456) 大致相同</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> S<span class="token punctuation">,</span> N<span class="token punctuation">,</span> cases <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>cin <span class="token operator">>></span> S<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>S<span class="token operator">--</span> <span class="token operator">&amp;&amp;</span> cin <span class="token operator">>></span> N<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="20"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">w</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">lis</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">lds</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">int</span> ans_lis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ans_lds <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">>></span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">>></span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> lds<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">// find lis and lds</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> h<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> lis<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> h<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> lds<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>lds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> lds<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>ans_lis <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans_lis<span class="token punctuation">,</span> lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>ans_lds <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans_lds<span class="token punctuation">,</span> lds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>cases <span class="token operator">&lt;&lt;</span> <span class="token string">". "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ans_lis <span class="token operator">>=</span> ans_lds<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Increasing ("</span> <span class="token operator">&lt;&lt;</span> ans_lis <span class="token operator">&lt;&lt;</span> <span class="token string">"). Decreasing ("</span> <span class="token operator">&lt;&lt;</span> ans_lds <span class="token operator">&lt;&lt;</span> <span class="token string">").\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Decreasing ("</span> <span class="token operator">&lt;&lt;</span> ans_lds <span class="token operator">&lt;&lt;</span> <span class="token string">"). Increasing ("</span> <span class="token operator">&lt;&lt;</span> ans_lis <span class="token operator">&lt;&lt;</span> <span class="token string">").\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><a href="https://www.pinghenotes.com/UVa-11456-Trainsorting/">https://www.pinghenotes.com/UVa-11456-Trainsorting/</a><br /><span class="exturl" data-url="aHR0cHM6Ly9zdW1tb241MjguZ2l0aHViLmlvLzIwMTcvMTIvMDUvVVZBLTExNzkwLU11cmNpYS1zLVNreWxpbmUv">https://summon528.github.io/2017/12/05/UVA-11790-Murcia-s-Skyline/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> DP </tag>
            
            <tag> LIS </tag>
            
            <tag> LDS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 481 - What Goes Up</title>
      <link href="UVa-481-What-Goes-Up/"/>
      <url>UVa-481-What-Goes-Up/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-481-what-goes-up"><a class="anchor" href="#題目-uva-481-what-goes-up">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWQyNDI=">UVa 481 - What Goes Up</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一串整數序列，找出 <code>最長的嚴格遞增子序列</code>  ( <code>strictly increasing subsequence</code> )</p><hr /><p><strong>INPUT:</strong><br /> 輸入一連串的整數</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>最長的嚴格遞增子序列</code> 的長度與其中的元素<br /> (若有多組元素的長度一樣，以最後出現的為準)</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>將資料存取後，利用貪婪演算法找出嚴格遞增子序列的長度<br />紀錄每次選取的位置<br /> <code>vector V</code>  儲存輸入的整數<br /> <code>vector S</code>  儲存現在的嚴格遞增子序列<br /> <code>vector dp</code>  儲存元素的位置</p><div class="note info"><p>若使用動態規劃，時間複雜度會為 <code>O(N^2)</code> ，會超時<br />所以改用貪婪演算法，將時間複雜度降至 <code>N * log(N)</code></p></div><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">int</span> a<span class="token punctuation">,</span> L <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> V<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> S<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> dp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> a<span class="token punctuation">)</span> V<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>dp<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>V<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>S<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> V<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> S<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>S<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>L<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">auto</span> it <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> S<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token operator">*</span>it <span class="token operator">=</span> V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>it <span class="token operator">-</span> S<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> V<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> L<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>ans<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token operator">--</span>L<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n-\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly95dWlodWFuZy5jb20vZHAtbGlzLw==">https://yuihuang.com/dp-lis/</span><br /><span class="exturl" data-url="aHR0cDovL3dlYi5udG51LmVkdS50dy9+YWxnby9TdWJzZXF1ZW5jZS5odG1s">http://web.ntnu.edu.tw/~algo/Subsequence.html</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> DP </tag>
            
            <tag> LIS </tag>
            
            <tag> greedy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11456 - Trainsorting</title>
      <link href="UVa-11456-Trainsorting/"/>
      <url>UVa-11456-Trainsorting/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11456-trainsorting"><a class="anchor" href="#題目-uva-11456-trainsorting">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExNDU2">UVa 11456 - Trainsorting</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>一節車廂可以選擇放在火車頭或火車尾<br />車廂必須按照重量由重到輕從火車頭開始排列<br />你需要找到最多能連接幾節車廂</p><hr /><p><strong>INPUT:</strong><br /> 第一行有一個整數 <code>S</code> ，代表測資數<br />每筆測資第一行有一個整數 <code>N</code> ，代表車廂數<br />接下來 <code>N</code>  行，每行有一個整數，代表車廂的重量</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出最多能連接幾節車廂</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>這是 <code>Longest Increasing Subsequence</code>  ( <code>最長遞增子序列</code> ) 的問題<br />由於車廂可以排在前後，所以我們將輸入的資料複製一份顛倒放在前面</p><p>例如:</p><div class="note info"><p>N = 3<br />1 2 3<br /> 則排成: 3 2 1 1 2 3</p></div><p>接著透過 <code>dp</code>  找到最長遞增子序列</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">int</span> S<span class="token punctuation">,</span> N<span class="token punctuation">,</span> a<span class="token punctuation">,</span> ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> train<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> len<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>cin <span class="token operator">>></span> S<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>S<span class="token operator">--</span> <span class="token operator">&amp;&amp;</span> cin <span class="token operator">>></span> N<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>train<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>len<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>cin <span class="token operator">>></span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>train<span class="token punctuation">[</span>N <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span>N <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>train<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> train<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> len<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>len<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> len<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> len<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDI1MzU3Nw==">https://ithelp.ithome.com.tw/articles/10253577</span><br /><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1mVi1URjRPdlpwaw==">https://www.youtube.com/watch?v=fV-TF4OvZpk</span><br /><span class="exturl" data-url="aHR0cDovL25haXZlcmVkLmdpdGh1Yi5pby8yMDE4LzAzLzA0L1Byb2JsZW1fU29sdmluZy9VVmEvVVZhLTExNDU2LVRyYWluc29ydGluZy8=">http://naivered.github.io/2018/03/04/Problem_Solving/UVa/UVa-11456-Trainsorting/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> DP </tag>
            
            <tag> LIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to Algorithms UVa Collections</title>
      <link href="Introduction-to-Algorithms-UVa-Collections/"/>
      <url>Introduction-to-Algorithms-UVa-Collections/</url>
      
        <content type="html"><![CDATA[<h1 id="dynamic-programming"><a class="anchor" href="#dynamic-programming">#</a> Dynamic programming</h1><p><a href="https://www.pinghenotes.com/UVa-10337-Flight-Planner/">UVa 10337 - Flight Planner</a><br /><a href="https://www.pinghenotes.com/UVa-10721-Bar-Codes/">UVa 10721 - Bar Codes</a><br /><a href="https://www.pinghenotes.com/UVa-10943-How-do-you-add/">UVa 10943 - How do you add</a></p><hr /><p><a href="https://www.pinghenotes.com/UVa-10003-Cutting-Sticks/">UVa 10003 - Cutting Sticks</a><br /><a href="https://www.pinghenotes.com/UVa-10912-Simple-Minded-Hashing/">UVa 10912 - Simple Minded Hashing</a><br /><a href="https://www.pinghenotes.com/UVa-11420-Chest-of-Drawers/">UVa 11420 - Chest of Drawers</a></p><h1 id="dynamic-programming-longest-increasing-subsequence"><a class="anchor" href="#dynamic-programming-longest-increasing-subsequence">#</a> Dynamic programming (Longest Increasing Subsequence)</h1><p><a href="https://www.pinghenotes.com/UVa-481-What-Goes-Up/">UVa 481 - What Goes Up</a><br /><a href="https://www.pinghenotes.com/UVa-11456-Trainsorting/">UVa 11456 - Trainsorting</a><br /><a href="https://www.pinghenotes.com/UVa-11790-Murcia-s-Skyline/">UVa 11790 - Murcia's Skyline</a><br /><a href="https://www.pinghenotes.com/UVa-10534-Wavio-Sequence/">UVa 10534 - Wavio Sequence</a></p><h1 id="dynamic-programming-0-1-knapsack"><a class="anchor" href="#dynamic-programming-0-1-knapsack">#</a> Dynamic programming (0-1 Knapsack)</h1><p><a href="https://www.pinghenotes.com/UVa-1213-Sum-of-Different-Primes/">UVa 1213 - Sum of Different Primes</a><br /><a href="https://www.pinghenotes.com/UVa-10616-Divisible-Group-Sums/">UVa 10616 - Divisible Group Sums</a><br /><a href="https://www.pinghenotes.com/UVa-11566-Let-s-Yum-Cha/">UVa 11566 - Let's Yum Cha</a></p><h1 id="dynamic-programming-max-2d3d-range-sum"><a class="anchor" href="#dynamic-programming-max-2d3d-range-sum">#</a> Dynamic programming (Max 2D/3D Range Sum)</h1><p><a href="https://www.pinghenotes.com/UVa-10827-Maximum-sum-on-a-torus/">UVa 10827 - Maximum sum on a torus</a><br /><a href="https://www.pinghenotes.com/UVa-11951-Area/">UVa 11951 - Area</a><br /><a href="https://www.pinghenotes.com/UVa-10755-Garbage-Heap/">UVa 10755 - Garbage Heap</a></p><h1 id="dynamic-programming-floyd-warshalls-algorithm"><a class="anchor" href="#dynamic-programming-floyd-warshalls-algorithm">#</a> Dynamic programming (Floyd Warshall’s Algorithm)</h1><p><a href="https://www.pinghenotes.com/UVa-821-Page-Hopping/">UVa 821 - Page Hopping</a><br /><a href="https://www.pinghenotes.com/UVa-10171-Meeting-Prof-Miguel/">UVa 10171 - Meeting Prof. Miguel</a><br /><a href="https://www.pinghenotes.com/UVa-11463-Commandos/">UVa 11463 - Commandos</a></p><h1 id="dynamic-programming-coin-change"><a class="anchor" href="#dynamic-programming-coin-change">#</a> Dynamic programming (Coin Change)</h1><p><a href="https://www.pinghenotes.com/UVa-357-Let-Me-Count-The-Ways/">UVa 357 - Let Me Count The Ways</a><br /><a href="https://www.pinghenotes.com/UVa-10306-e-Coins/">UVa 10306 - e-Coins</a><br /><a href="https://www.pinghenotes.com/UVa-11517-Exact-Change/">UVa 11517 - Exact Change</a></p><h1 id="maximum-flow"><a class="anchor" href="#maximum-flow">#</a> Maximum flow</h1><p><a href="https://www.pinghenotes.com/Uva-820-Internet-Bandwidth/">UVa 820 - Internet Bandwidth</a><br /><a href="https://www.pinghenotes.com/UVa-11418-Clever-Naming-Patterns/">UVa 11418 - Clever Naming Patterns</a><br /><a href="https://www.pinghenotes.com/UVa-12873-The-Programmers/">UVa 12873 - The Programmers</a></p><h1 id="maximum-flow-2"><a class="anchor" href="#maximum-flow-2">#</a> Maximum flow</h1><p><a href="https://www.pinghenotes.com/UVa-10330-Power-Transmission/">UVa 10330 - Power Transmission</a><br /><a href="https://www.pinghenotes.com/UVa-11380-Down-Went-The-Titanic/">UVa 11380 - Down Went The Titanic</a><br /><a href="https://www.pinghenotes.com/UVa-11506-Angry-Programmer/">UVa 11506 - Angry Programmer</a><br /><a href="https://www.pinghenotes.com/UVa-12125-March-of-the-Penguins/">UVa 12125 - March of the Penguins</a></p><h1 id="computational-geometry-convex-hull"><a class="anchor" href="#computational-geometry-convex-hull">#</a> Computational Geometry (Convex Hull)</h1><p><a href="https://www.pinghenotes.com/UVa-681-Convex-Hull-Finding/">UVa 681 - Convex Hull Finding</a><br /><a href="https://www.pinghenotes.com/UVa-1206-Boundary-Points/">UVa 1206 - Boundary Points</a><br /><a href="https://www.pinghenotes.com/UVa-11096-Nails/">UVa 11096 - Nails</a></p><h1 id="computational-geometry-closest-pair-problem"><a class="anchor" href="#computational-geometry-closest-pair-problem">#</a> Computational Geometry (Closest Pair problem)</h1><p><a href="https://www.pinghenotes.com/UVa-10245-The-Closest-Pair-Problem/">UVa 10245 - The Closest Pair Problem</a><br /><a href="https://www.pinghenotes.com/UVa-11378-Bey-Battle/">UVa 11378 - Bey Battle</a></p><h1 id="minimum-cost-maximum-flow"><a class="anchor" href="#minimum-cost-maximum-flow">#</a> Minimum cost Maximum flow</h1><p><a href="https://www.pinghenotes.com/UVa-10594-Data-Flow/">UVa 10594 - Data Flow</a><br /><a href="https://www.pinghenotes.com/UVa-10806-Dijkstra-Dijkstra/">UVa 10806 - Dijkstra, Dijkstra</a><br /><a href="https://www.pinghenotes.com/UVa-10888-Warehouse/">UVa 10888 - Warehouse</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11420 - Chest of Drawers</title>
      <link href="UVa-11420-Chest-of-Drawers/"/>
      <url>UVa-11420-Chest-of-Drawers/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11420-chest-of-drawers"><a class="anchor" href="#題目-uva-11420-chest-of-drawers">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExNDIw">UVa 11420 - Chest of Drawers</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>題目中的櫃子由數個抽屜堆疊而成，但是這種櫃子有安全上的疑慮<br />若你將一個抽屜完全抽出，那你能拿到下一層抽屜的東西<br />當前有 <code>L</code>  個抽屜，有 <code>S</code>  格是完全安全的，求總共有幾種排列法？</p><p>例如:  <code>L = 6, S = 4</code> <br /> 則有 6 種可能</p><ol><li><strong>U</strong> <strong>L</strong> L L L L</li><li>L <strong>U</strong> <strong>L</strong> L L L</li><li>L L <strong>U</strong> <strong>L</strong> L L</li><li>L L L <strong>U</strong> <strong>L</strong> L</li><li>L L L L <strong>U</strong> <strong>L</strong></li><li>L L L L <strong>U</strong> <strong>U</strong><br />( <code>L</code>  為上鎖的， <code>U</code>  為未上鎖的，粗體為不安全)</li></ol><hr /><p><strong>INPUT:</strong><br /> 每筆測資輸入兩個整數 <code>L</code> 、 <code>S</code> ，前者代表總抽屜數，後者代表安全的抽屜數<br />當 <code>L</code> 、 <code>S</code>  小於 <code>0</code>  時結束</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>L</code>  個抽屜中有 <code>S</code>  個是安全的共有幾種排列法？</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先將所以可能的情況以動態規劃算出，再根據 <code>L</code>  及 <code>S</code>  的值查表輸出</p><hr /><p>先定義一個 <code>dp[i][j][k]</code></p><ol><li><code>i</code>  為抽屜的數量</li><li><code>j</code>  為有多少抽屜式安全的</li><li><code>k</code>  分兩種情況， <code>k = 0</code>  代表最上層的抽屜未上鎖， <code>k = 1</code>  代表最上層抽屜上鎖</li></ol><hr /><p>將 <code>dp[1][0][0]</code>  與 <code>dp[1][1][1]</code>  設為 <code>1</code></p><ol><li>若只有 1 個抽屜時，0 個抽屜是安全的，代表最上層為未上鎖的抽屜</li><li>若只有 1 個抽屜時，1 個抽屜是安全的，代表最上層為上鎖的抽屜</li></ol><hr /><p>若 <code>j = 0</code> ，則 <code>k</code>  不可能為 1，所以只有 1 種情況，需分開處理<br /> <code>dp[i][0][0] = dp[i - 1][1][1] + dp[i - 1][0][0]</code> <br /> 當從 <code>i - 1</code>  個抽屜新增一個未上鎖的抽屜時</p><ol><li>若 <code>k = 1</code>  只有最上層一個抽屜是安全時，新增一個未上鎖的抽屜會使原本安全的抽屜變不安全</li><li>若沒有抽屜是安全的，則新增一個未上鎖的抽屜不影響</li></ol><hr /><p>以下為 <code>i</code>  與 <code>j</code>  均不為 0 的情況</p><ol><li><code>dp[i][j][0]</code> ，也就是 <code>k = 0</code>  時，代表在最上層新增一個未上鎖的抽屜<ul><li><code>dp[i - 1][j + 1][1]</code>  此情況下在最上層新增一個未上鎖的抽屜，會導致原本安全的抽屜變不安全</li><li><code>dp[i - 1][j][0]</code>  不影響其他抽屜</li></ul></li><li><code>dp[i][j][1]</code> ，也就是 <code>k = 1</code>  時，代表在最上層新增一個上鎖的抽屜<ul><li><code>dp[i - 1][j - 1][1]</code>  直接新增一個安全的抽屜，不影響其他抽屜</li><li><code>dp[i - 1][j - 1][0]</code>  同上</li></ul></li></ol><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">long</span> <span class="token keyword">long</span> dp<span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> S<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="11"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// if there is one drawer, and no safe drawers, the top drawer must be unlock</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// if there is one drawer, and exist one safe drawer, the top drawer must be lock</span></pre></td></tr><tr><td data-num="17"></td><td><pre>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">66</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">// if there is i drawers, and no safe drawers =</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">// there is (i - 1) drawers, the top one is the only lock drawer +</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">// there is (i - 1) drawers, no drawer is safe</span></pre></td></tr><tr><td data-num="25"></td><td><pre>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">// add one unlock drawer</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment">// if the top drawer is lock, this will lead to it unsafe</span></pre></td></tr><tr><td data-num="31"></td><td><pre>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">// add one lock drawer</span></pre></td></tr><tr><td data-num="34"></td><td><pre>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N <span class="token operator">>></span> S<span class="token punctuation">,</span> N <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> S <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>S<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>S<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmEtMTE0MjAv">https://www.larrysprognotes.com/UVa-11420/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10912 - Simple Minded Hashing</title>
      <link href="UVa-10912-Simple-Minded-Hashing/"/>
      <url>UVa-10912-Simple-Minded-Hashing/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10912-simple-minded-hashing"><a class="anchor" href="#題目-uva-10912-simple-minded-hashing">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwOTEy">UVa 10912 - Simple Minded Hashing</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>題目定義一個 <code>hashing</code>  函數，它是由小寫英文字母的嚴格遞增字串組成，函數值為英文字母的編號數之合<br />求長度為 <code>L</code> ，函數值為 <code>S</code>  時的可能組數</p><div class="note info"><p>例如:<br />L = 3, S = 10<br /> 則有 4 種可能: abg, acf, ade, bce</p></div><hr /><p><strong>INPUT:</strong><br /> 每筆測資輸入兩個整數 <code>L</code> 、 <code>S</code> ，前者代表字串長度，後者代表函數值</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出當字串長度為 <code>L</code> ，函數值為 <code>S</code>  時的組數</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>題目的範圍過於浮誇<br />由於限制小寫英文字母，所以 <code>a ~ z</code>  有 26 個，而函數值為 <code>1 + 2 + ... + 25 + 26 = 351</code></p><p>設一個 <code>dp[i][j][k]</code> <br /> <code>i</code>  代表選到哪一個字母<br /> <code>j</code>  為 <code>L</code> ，代表字串長度<br /> <code>k</code>  為 <code>S</code> ，代表函數值</p><p>字母 <code>i</code>  可選也可不選，所以 <code>dp[i][j][k] = dp[i - 1][j][k] + dp[i - 1][j - 1][k - i]</code> <br />(前者不選 <code>i</code> ，後者選 <code>i</code> )</p><p>同樣是事先全部建完表後再輸入資料<br />最後輸出答案 <code>dp[26][L][S]</code></p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">352</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">int</span> L<span class="token punctuation">,</span> S<span class="token punctuation">,</span> cases <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">351</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&amp;&amp;</span> k <span class="token operator">>=</span> i<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> L <span class="token operator">>></span> S<span class="token punctuation">,</span> L <span class="token operator">&amp;&amp;</span> S<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>cases <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>L <span class="token operator">&lt;=</span> <span class="token number">26</span> <span class="token operator">&amp;&amp;</span> S <span class="token operator">&lt;=</span> <span class="token number">351</span><span class="token punctuation">)</span> <span class="token operator">?</span> dp<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">[</span>S<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vYml1c19zdHJpcC9hcnRpY2xlL2RldGFpbHMvNzY2NDA3MjM=">https://blog.csdn.net/mobius_strip/article/details/76640723</span><br /><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc3RhZ2lubmVyL2FyY2hpdmUvMjAxMS8xMi8xNy8yMjkxMzA4Lmh0bWw=">https://www.cnblogs.com/staginner/archive/2011/12/17/2291308.html</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10003 - Cutting Sticks</title>
      <link href="UVa-10003-Cutting-Sticks/"/>
      <url>UVa-10003-Cutting-Sticks/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10003-cutting-sticks"><a class="anchor" href="#題目-uva-10003-cutting-sticks">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwMDAz">UVa 10003 - Cutting Sticks</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>你需要將一條木頭特定的點切割，每次 cost 木頭當前的長度，求最小的切割 cost</p><p>例如:<br /> 長 100 公分的木頭，你需要在 25、50、75 的地方切割<br /> 1.<br /> 若你按 <code>25、50、75</code>  的順序切割<br />第一次 <code>cost 100</code> ，木頭剩下 75 公分 (25 ~ 100)<br /> 第二次 <code>cost 75</code> ，木頭剩下 50 公分 (50 ~ 100)<br /> 第二次 <code>cost 50</code> ，木頭剩下 25 公分 (75 ~ 100)<br /> 這樣的總 <code>cost = 225</code> <br />2.<br /> 若你按 50、25、75 或 50、72、25 的順序切割<br />總 cost 會是 <code>100 + 50 + 50 = 200</code></p><hr /><p><strong>INPUT:</strong><br /> 每筆測資第一行輸入一個整數 <code>L</code> ，代表木頭的長度<br />第二行輸入一個整數 <code>N</code> ，代表切割的次數<br />接著會有 <code>N</code>  個整數，代表切割的位置</p><p>當 <code>L</code>  為 <code>0</code>  時結束程式</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出最小的切割 cost</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><p>以下以第一筆測資為例<br /> input:<br />100<br />3<br />25 50 75</p></div><p>先將切割點存入 <code>wood</code> ，從 <code>1 ~ N</code> <br /> <code>wood[0]</code>  放 0， <code>wood[N + 1]</code>  放 <code>L</code> <br /> 所以我們會得到一個表 <code>wood[] = &#123;0, 25, 50, 75, 100&#125;</code></p><p>接下來就是動態規劃的部份<br />當 <code>r = 1</code>  也就是只有一塊的時候，不需要切割，所以 <code>cost</code>  為 <code>0</code> ，所以我們的程式直接從 <code>r = 2</code>  開始<br />先從小塊的切割開始，慢慢往後處理<br />按照例子會跑以下:</p><ol><li>r=2 b=0 e=2 : dp[0][2] = 50</li><li>r=2 b=1 e=3 : dp[1][3] = 50</li><li>r=2 b=2 e=4 : dp[2][4] = 50</li><li>r=3 b=0 e=3 : dp[0][3] = 125</li><li>r=3 b=1 e=4 : dp[1][4] = 125</li><li>r=4 b=0 e=4 : dp[0][4] = 200</li></ol><div class="note info"><p><code>dp[0][2]</code>  代表 0 ~ 2 的區間內的切割 cost<br /> 也就是 wood [0] = 0, wood [2] = 50 的切割 cost 為 50</p></div><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> wood<span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="13"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">int</span> L<span class="token punctuation">,</span> N<span class="token punctuation">,</span> a<span class="token punctuation">,</span> e<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> L<span class="token punctuation">,</span> L <span class="token operator">&amp;&amp;</span> cin <span class="token operator">>></span> N<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>wood<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>wood<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">// wood[0] is 0, wood[N + 1] is L</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">>></span> wood<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>wood<span class="token punctuation">[</span><span class="token operator">++</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment">// when r = 0, the cost is always 0, so we start with r = 2</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> r <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>r<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> b <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> b <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">></span> N<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>dp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> e<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">int</span> tmp <span class="token operator">=</span> dp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">+</span> wood<span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">-</span> wood<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>dp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The minimum cutting is "</span> <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">".\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cDovL3dvcmxkb2Ztb25tb24uYmxvZ3Nwb3QuY29tLzIwMTgvMDIvdXZhLTEwMDAzLWN1dHRpbmctc3RpY2tzLWRwLmh0bWw=">http://worldofmonmon.blogspot.com/2018/02/uva-10003-cutting-sticks-dp.html</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10943 - How do you add</title>
      <link href="UVa-10943-How-do-you-add/"/>
      <url>UVa-10943-How-do-you-add/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10943-how-do-you-add"><a class="anchor" href="#題目-uva-10943-how-do-you-add">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwOTQz">UVa 10943 - How do you add</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>你需要解決一個計算的問題<br />給一個最大數 <code>N</code> ，由小於 <code>N</code>  的數中取 <code>K</code>  個數加至 <code>N</code> ，求有幾種加法？</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資輸入兩個整數 <code>N</code> 、 <code>K</code> <br /> 當 <code>N</code>  與 <code>K</code>  為 0 時結束程式</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出最大數 <code>N</code>  時，每次取 <code>K</code>  個數有幾種加法？( <code>dp[N][K]</code> )</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>同樣將所有情況的答案算出儲存，再根據 <code>N, K</code>  的值輸出答案</p><p>當 <code>K = 1</code>  時，只有一種可能，所以將 <code>dp[i][1]</code>  設為 1<br /> 利用 2 層 for 迴圈動態規劃，對於 <code>dp[i][j]</code>  來說，為 <code>dp[i - k][j - 1]</code>  的總和 (k 為 0 ~ i)</p><div class="note info"><p><code>dp[i][j]</code>  記得要 <code>&amp;= 1000000</code></p></div><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> K<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">101</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">101</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">101</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N <span class="token operator">>></span> K<span class="token punctuation">,</span> N <span class="token operator">&amp;&amp;</span> K<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>K<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmEtMTA5NDMv">https://www.larrysprognotes.com/UVa-10943/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10721 - Bar Codes</title>
      <link href="UVa-10721-Bar-Codes/"/>
      <url>UVa-10721-Bar-Codes/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10721-bar-codes"><a class="anchor" href="#題目-uva-10721-bar-codes">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwNzIx">UVa 10721 - Bar Codes</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p><code>bar-code</code>  是由黑色及白色線條組成的，相鄰所有同顏色的線條視為一個區域<br />有一個算法 <code>BC(N, K, M)</code> ，代表總共有 <code>N</code>  條線， <code>K</code>  個區域，每個區域最多有 <code>M</code>  條線<br />給一組 <code>(N, K, M)</code> ，求此情況的排列數</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資輸入 3 個整數 <code>N</code> 、 <code>K</code> 、 <code>M</code></p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>BC(N, K, M)</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先將所有情況的答案算出儲存，再根據 <code>N, K, M</code>  的值輸出答案</p><p>0 條線、0 個區域必定只有一種可能，將所有 <code>bc[0][0][i]</code>  設為 1<br /> 利用 3 層 for 迴圈動態規劃，對於 <code>bc[i][j][k]</code>  來說，為 <code>bc[i - x][j - 1][k]</code>  的總和 (x 為 1 ~ min (i, k))</p><div class="note info"><p>當 <code>j與i</code>  多 1 時，必定是在最後加上一個不同顏色的線條<br />例如題目裡的 <code>bc[7][4][3]</code>  的答案為 <code>16</code> <br /> 是 <code>bc[6][3][3]</code> 、 <code>bc[5][3][3]</code> 、 <code>bc[4][3][3]</code>  的加總， <code>7 + 6 + 3 = 16</code> <br />... 以此類推</p></div><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><h2 id="c-code"><a class="anchor" href="#c-code">#</a> C++ code</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">long</span> <span class="token keyword">long</span> bc<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">51</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> bc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">51</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">51</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">51</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> i <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span> bc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+=</span> bc<span class="token punctuation">[</span>i <span class="token operator">-</span> x<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> k <span class="token operator">>></span> m<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> bc<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="java-code"><a class="anchor" href="#java-code">#</a> java code</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Main</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>       </pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">long</span> bc<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">51</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> bc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">51</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">51</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">51</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> i <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span> bc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+=</span> bc<span class="token punctuation">[</span>i <span class="token operator">-</span> x<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            n <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            k <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            m <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bc<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vYml1c19zdHJpcC9hcnRpY2xlL2RldGFpbHMvNDUwOTIzODc=">https://blog.csdn.net/mobius_strip/article/details/45092387</span><br /><span class="exturl" data-url="aHR0cHM6Ly9zdW1tb241MjguZ2l0aHViLmlvLzIwMTcvMTIvMTMvVVZBLTEwNzIxLUJhci1Db2Rlcy8=">https://summon528.github.io/2017/12/13/UVA-10721-Bar-Codes/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10337 - Flight Planner</title>
      <link href="UVa-10337-Flight-Planner/"/>
      <url>UVa-10337-Flight-Planner/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10337-flight-planner"><a class="anchor" href="#題目-uva-10337-flight-planner">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwMzM3">UVa 10337 - Flight Planner</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>你需要為一架飛機規劃最省油的路線 (從 <code>起點(0, 0)</code>  到 <code>終點(0, X)</code> )<br /> 飛機有 3 種飛行方式</p><ol><li>上升，會耗 60 的油</li><li>平飛，會耗 30 的油</li><li>下降，會耗 20 的油<br />飛行過程中會碰到風阻，負數為逆風，正數為順風</li></ol><hr /><p><strong>INPUT:</strong><br /> 輸入一個 <code>N</code> ，代表有 <code>N</code>  筆測資<br />每筆測資第一行輸入一個整數 <code>X</code> ，代表飛機飛行的距離 (每 100 為一單位)<br /> 接著輸入 <code>10 * X</code>  個整數，代表每個位置的風阻</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出最少的耗油量</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先儲存資料，建立 <code>wind</code>  風阻的表<br />將 <code>起點dp[0][0]</code>  設為 <code>0</code> <br /> 從起點開始對 <code>10 * X</code>  表中每一個位置動態規劃</p><div class="note info"><p>第 0 層只能由降落到達，不能上升或平飛<br />第 9 層只能由平飛或上升到達</p></div><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> X<span class="token punctuation">,</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> wind<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> dp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>cin <span class="token operator">>></span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>N<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>cin <span class="token operator">>></span> X<span class="token punctuation">,</span> X <span class="token operator">/=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="23"></td><td><pre>wind<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>dp<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>X <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">// store wind data (up to down)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> X<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>cin <span class="token operator">>></span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>wind<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">// DP</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> X<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">int</span> Min <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>Min <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>Min<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">30</span> <span class="token operator">-</span> wind<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>Min <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>Min<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">60</span> <span class="token operator">-</span> wind<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">9</span><span class="token punctuation">)</span> Min <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>Min<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">20</span> <span class="token operator">-</span> wind<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Min<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>X<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9zdW1tb241MjguZ2l0aHViLmlvLzIwMTcvMTIvMTMvVVZBLTEwMzM3LUZsaWdodC1QbGFubmVyLw==">https://summon528.github.io/2017/12/13/UVA-10337-Flight-Planner/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> DP </tag>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10189 - Minesweeper</title>
      <link href="UVa-10189-Minesweeper/"/>
      <url>UVa-10189-Minesweeper/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10189-minesweeper"><a class="anchor" href="#題目-uva-10189-minesweeper">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwMTg5">UVa 10189 - Minesweeper</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給你 <code>n * m</code>  的矩形，並告訴你地雷的位置 (*)，求完成後踩地雷</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資輸入兩個整數 <code>n</code>  與 <code>m</code> ，代表範圍<br />接下來輸入 <code>n * m</code>  個字元</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出完成後的踩地雷圖</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>一個一個字元讀取，當遇到 <code>*</code>  時，將其位置 <code>-10</code> ，以他為中心的九宮格全部 <code>+1</code> <br /> 最後為負數則輸出 <code>*</code> ，其餘直接輸出</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> cases <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">char</span> ch<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">int</span> G<span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">,</span> n <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>cin <span class="token operator">>></span> ch<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token operator">++</span>G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>cases <span class="token operator">?</span> <span class="token string">"\n"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"Field #"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>cases <span class="token operator">&lt;&lt;</span> <span class="token string">":\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> cout <span class="token operator">&lt;&lt;</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">:</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"*"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11498 - Division of Nlogonia</title>
      <link href="UVa-11498-Division-of-Nlogonia/"/>
      <url>UVa-11498-Division-of-Nlogonia/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11498-division-of-nlogonia"><a class="anchor" href="#題目-uva-11498-division-of-nlogonia">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExNDk4">UVa 11498 - Division of Nlogonia</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給你一個分割點的座標，求另一點在這個點的何處</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資第一行輸入一個整數 <code>k</code> ，代表要輸入幾個點<br />輸入兩個整數 <code>(n, m)</code> ，代表分割點的座標<br />接下來 <code>k</code>  行，每行輸入一個點 <code>(x, y)</code></p><hr /><p><strong>OUTPUT:</strong><br /> 輸出點 <code>(x, y)</code>  位於分割點 <code>(n, m)</code>  的位置</p><ol><li>在線上則輸出 <code>divisa</code></li><li>在東北輸出 <code>NE</code></li><li>在西北輸出 <code>NO</code></li><li>在東南輸出 <code>SE</code></li><li>在西南輸出 <code>SO</code></li></ol><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>直接讀取資料進行 <code>if</code>  判斷即可</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> k<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> k<span class="token punctuation">,</span> k<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>cin <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> n <span class="token operator">||</span> y <span class="token operator">==</span> m<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"divisa\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> n <span class="token operator">&amp;&amp;</span> y <span class="token operator">></span> m<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NE\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> n <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"SE\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">></span> m<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"SO\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPE Collections</title>
      <link href="CPE-Collections/"/>
      <url>CPE-Collections/</url>
      
        <content type="html"><![CDATA[<p><strong><span class="exturl" data-url="aHR0cHM6Ly9jcGUuY3NlLm5zeXN1LmVkdS50dy8=">CPE 官網</span></strong></p><h1 id="cpe介紹"><a class="anchor" href="#cpe介紹">#</a> CPE 介紹</h1><p><code>CPE</code>  的全名為 <code>Collegiate Programming Examination</code> ，中文為 <code>大學程式能力檢定</code> <br /> <code>CPE</code>  的目標是做為全台灣程式檢定的標準與提升台灣學生的程式能力，目前已經有多校將其列入畢業門檻<br /> (通常與資訊相關的科系都會被要求去考)</p><h1 id="cpe考試"><a class="anchor" href="#cpe考試">#</a> CPE 考試</h1><ol><li><code>CPE</code>  每年舉辦 4 次</li><li>採取當場上機考的形式，封閉網路、不能攜帶資料，每次考試 3 小時</li><li><code>CPE</code>  的題目來源為 <code>UVa</code>  <span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcv">Online Judge</span> 但可能會修改題目</li><li>總共有 7 題，前 3 題為基本題 (至少有 1 題難度為 1 星)，第 4-5 題通常需要用到不同的容器及演算法，第 6-7 題則需要一定的英文能力才能理解題目</li><li>使用 <code>瘋狂程設</code> 的評判系統，與一般 compiler 不太一樣，需要熟悉一下，例如：要使用 <code>string</code>  需要 <code>include &lt;string&gt;</code></li><li>能使用 <code>C</code> 、 <code>C++</code> 、 <code>Java</code>  程式語言</li><li>題目會提供題目測資與人工公開測資供考生除錯，能多次提交結果，並當場知道正確與否</li></ol><h1 id="cpe歷屆考題-參考解答"><a class="anchor" href="#cpe歷屆考題-參考解答">#</a> CPE 歷屆考題 參考解答</h1><p><strong><span class="exturl" data-url="aHR0cHM6Ly9jcGUuY3NlLm5zeXN1LmVkdS50dy9oaXN0b3J5LnBocA==">CPE 歷屆考題</span></strong><br /> (以下題目以 UVa 原題為準)</p><hr /><p><strong>2022/03/22</strong></p><ol><li><a href="https://www.pinghenotes.com/UVa-12908-The-book-thief/">UVa 12908 - The book thief</a></li><li><a href="https://www.pinghenotes.com/UVa-10642-Can-You-Solve-It/">UVa 10642 - Can You Solve It</a></li><li><a href="https://www.pinghenotes.com/UVa-13171-Pixel-Art/">UVa 13171 - Pixel Art</a></li><li><a href="https://www.pinghenotes.com/UVa-11360-Have-Fun-with-Matrices/">UVa 11360 - Have Fun with Matrices</a></li><li><a href="https://www.pinghenotes.com/UVa-10326-The-Polynomial-Equation/">UVa 10326 - The Polynomial Equation</a></li><li><a href="https://www.pinghenotes.com/UVa-12627-Erratic-Expansion/">UVa 12627 - Erratic Expansion</a></li><li><a href="https://www.pinghenotes.com/UVa-11659-Informants/">UVa 11659 - Informants</a></li></ol><hr /><p><strong>2021/03/23</strong></p><ol><li><a href="https://www.pinghenotes.com/UVa-12019-Doom-s-Day-Algorithm/">UVa 12019 - Doom's Day Algorithm</a></li><li><a href="https://www.pinghenotes.com/UVa-10921-Find-the-Telephone/">UVa 10921 - Find the Telephone</a></li><li><a href="https://www.pinghenotes.com/UVa-725-Division/">UVa 725 - Division</a></li><li><a href="https://www.pinghenotes.com/UVa-11489-Integer-Game/">UVa 11489 - Integer Game</a></li><li><a href="https://www.pinghenotes.com/UVa-12218-An-Industrial-Spy/">UVa 12218 - An Industrial Spy</a></li><li><a href="https://www.pinghenotes.com/UVa-11495-Bubbles-and-Buckets/">UVa 11495 - Bubbles and Buckets</a></li></ol><hr /><p><strong>2020/12/22</strong></p><ol><li><a href="https://www.pinghenotes.com/UVa-11689-Soda-Surpler/">UVa 11689 - Soda Surpler</a></li><li><a href="https://www.pinghenotes.com/UVa-10188-Automated-Judge-Script/">UVa 10188 - Automated Judge Script</a></li><li><a href="https://www.pinghenotes.com/UVa-10415-Eb-Alto-Saxophone-Player/">UVa 10415 - Eb Alto Saxophone Player</a></li><li><a href="https://www.pinghenotes.com/UVa-11536-Smallest-Sub-Array/">UVa 11536 - Smallest Sub-Array</a></li><li><a href="https://www.pinghenotes.com/UVa-11960-Divisor-Game/">UVa 11960 - Divisor Game</a></li><li><a href="https://www.pinghenotes.com/UVa-12319-Edgetown-s-Traffic-Jams/">UVa 12319 - Edgetown's Traffic Jams'</a></li><li><a href="https://www.pinghenotes.com/UVa-11633-Food-portion-sizes/">UVa 11633 - Food portion sizes</a></li></ol><hr /><p><strong>2020/10/20</strong></p><ol><li><a href="https://www.pinghenotes.com/UVa-10050-Hartals/">UVa 10050 - Hartals</a></li><li><a href="https://www.pinghenotes.com/UVa-458-The-Decoder/">UVa 458 - The Decoder</a></li><li><a href="https://www.pinghenotes.com/UVa-389-Basically-Speaking/">UVa 389 - Basically Speaking</a></li><li><a href="https://www.pinghenotes.com/UVa-10267-Graphical-Editor/">UVa 10267 - Graphical Editor</a></li><li><a href="https://www.pinghenotes.com/UVa-615-Is-It-A-Tree/">UVa 615 - Is It A Tree</a></li><li><a href="https://www.pinghenotes.com/UVa-1746-String-Theory/">UVa 1746 - String Theory</a></li><li><a href="https://www.pinghenotes.com/UVa-165-Stamps/">UVa 165 - Stamps</a></li></ol><hr /><p><strong>2020/06/09</strong></p><ol><li><a href="https://www.pinghenotes.com/UVa-11498-Division-of-Nlogonia/">UVa 11498 - Division of Nlogonia</a></li><li><a href="https://www.pinghenotes.com/UVa-10189-Minesweeper/">UVa 10189 - Minesweeper</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 165 - Stamps</title>
      <link href="UVa-165-Stamps/"/>
      <url>UVa-165-Stamps/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-165-stamps"><a class="anchor" href="#題目-uva-165-stamps">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTE2NQ==">UVa 165 - Stamps</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>有 <code>k</code>  種面額郵票，每張明信片上最多能貼 <code>h</code>  張郵票<br /> <code>n(h, k)</code>  代表從 <code>k</code>  種面額中選擇至多 <code>h</code>  張郵票，使得可以組成面額為 <code>1 2 3 4 ... n</code>  的連續整數明信片<br />求 <code>n</code>  的最大值，及是哪 <code>k</code>  種面額的郵票</p><p>例如:<br /> <code>h = 3</code>  及 <code>k = 2</code> <br /> 則面額 <code>1</code>  與 <code>3</code>  可以組成連續最大 <code>7</code>  種面額的明信片<br /> (  <code>1</code> 、 <code>1+1</code> 、 <code>3</code> 、 <code>3+1</code> 、 <code>3+1+1</code> 、 <code>3+3</code> 、 <code>3+3+1</code>  )<br /> 當面額為 <code>1</code>  與 <code>2</code>  或 <code>1</code>  與 <code>4</code>  時，只能組出最大 <code>6</code>  種</p><div class="note info"><p>不論 <code>h</code>  與 <code>k</code>  是多少，一定包刮面額為 <code>1</code>  的郵票，不然就無法組成面額為 <code>1</code>  的明信片</p></div><hr /><p><strong>INPUT:</strong><br /> 每筆測資輸入兩個整數 <code>h</code>  與 <code>k</code> <br /> 當 <code>h</code>  與 <code>k</code>  為 <code>0</code>  時，結束程式</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出能組成最大 <code>n</code>  面額的郵票，與 <code>n</code>  的值</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><p>以下的寫法是使用雙層 <code>dfs</code>  去遍歷所有可能，若使用 <code>dfs + dp</code>  的話能增加效率</p></div><p><code>stamp</code>  儲存目前的郵票組合，第一層 <code>dfs</code>   <code>search</code>  則為遍歷所有郵票組合<br /> <code>maxstamp[i]</code>  儲存第 <code>i</code>  張郵票能從 <code>1</code>  開始數到得最大值<br />對於 <code>stamp[i + 1]</code>  的範圍為 <code>stamp[i] + 1</code>  到 <code>maxstamp[i] + 1</code> <br />(  <code>stamp[0]</code>  一定為 <code>1</code> 、 <code>maxstamp[0]</code>  一定為 <code>h</code>  )<br /> 第二層 <code>dfs</code>  為固定郵票組合，遍歷所有可能數量的郵票組合</p><p>例如 <code>h = 3</code>  及 <code>k = 2</code>  時<br />第一層 <code>dfs</code>  會找出 <code>1 2</code> 、 <code>1 3</code> 、 <code>1 4</code> 3 種組合<br />固定 <code>1 2</code>  時，會找出 <code>1</code> 、 <code>2</code> 、 <code>1+2</code> 、 <code>2+2</code> 、 <code>1+2+2</code> 、 <code>2+2+2</code>  等 6 種組合<br />以此類推...</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> h<span class="token punctuation">,</span> k<span class="token punctuation">,</span> maxval<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> stamp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> maxstamp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> check<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> h<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>check<span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>check<span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> index<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> sum <span class="token operator">+</span> stamp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">void</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> k<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>maxstamp<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> maxval<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>maxval <span class="token operator">=</span> maxstamp<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>ans <span class="token operator">=</span> stamp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> stamp<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxstamp<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>check<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>stamp<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>check<span class="token punctuation">[</span><span class="token operator">++</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>maxstamp<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token function">search</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> h <span class="token operator">>></span> k<span class="token punctuation">,</span> h <span class="token operator">&amp;&amp;</span> k<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>stamp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>maxstamp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>maxval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>stamp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>maxstamp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token function">search</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token operator">:</span> ans<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> val<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" ->"</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> maxval <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmVubWluZ3czMi5kZXYvMjAxOC8wOS8xNS9VVmEtMTY1LVN0YW1wcy8=">https://blog.enmingw32.dev/2018/09/15/UVa-165-Stamps/</span><br /><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NodWFuZ2RlODAwL2FydGljbGUvZGV0YWlscy83NzU1NDUy">https://blog.csdn.net/shuangde800/article/details/7755452</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 1746 - String Theory</title>
      <link href="UVa-1746-String-Theory/"/>
      <url>UVa-1746-String-Theory/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-1746-string-theory"><a class="anchor" href="#題目-uva-1746-string-theory">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTE3NDY=">UVa 1746 - String Theory</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>巢狀引文不只適合寫文章，也適合寫程式，以下是說明:</p><p>1 層的引文 (1-quotation) 定義為一個字串的頭尾都有一個 <code>'</code> <br /> 例如:  <code>'this is a string'</code></p><p>k 層的引文 (k-quotation) 定義為頭尾都有 k 個 <code>'</code> ，而裡面有 (k - 1) 層的引文<br />例如:  <code>''All 'work' and no 'play'''</code>  就是一個 2 層的引文</p><hr /><p><strong>INPUT:</strong><br /> 每筆測茲有兩行輸入<br />第一行為一個整數 <code>N</code> ，代表接下來有 <code>N</code>  個整數<br />第二行輸入 <code>N</code>  個整數，代表引號的數量</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出測資為幾層的巢狀引文 (k)<br /> 若沒有 <code>k</code> ，則輸出 <code>no quotation</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>儲存資料之後，從頭尾之間比較小的數字開始爆破<br />從最左及最右開始每次減 <code>tmp</code> ，隨後 <code>tmp - 1</code> ，直到 <code>tmp = 0</code>  或不符合 <code>while</code>  條件<br />當 <code>tmp = 0</code>  時，若剩餘數字的合可以整除 2，則輸出答案</p><div class="note info"><p>注意當 <code>k = 1</code>  時，只有兩種輸入會成立  <code>1 2</code>  及  <code>2 1 1</code>  ，需要特別處理</p></div><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">// store data</span></pre></td></tr><tr><td data-num="18"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> data<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">>></span> a<span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// i start with the smallest number</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">// copy the original data</span></pre></td></tr><tr><td data-num="25"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> cpy <span class="token operator">=</span> data<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">int</span> tmp <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left <span class="token operator">&lt;</span> N <span class="token operator">&amp;&amp;</span> cpy<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">>=</span> tmp <span class="token operator">&amp;&amp;</span> cpy<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> tmp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cpy<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">-=</span> tmp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">++</span>left<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cpy<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">-=</span> tmp<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">--</span>right<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> j <span class="token operator">:</span> cpy<span class="token punctuation">)</span> sum <span class="token operator">+=</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token comment">// if i = 1, thete are only two cases: 1 2 and 2 1 1</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>sum <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span> sum <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no quotation\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">goto</span> finish<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>finish<span class="token operator">:</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9jcGUuY3NlLm5zeXN1LmVkdS50dy9jcGUvZmlsZS9hdHRlbmRhbmNlL3Byb2JsZW1QZGYvMTc0Ni5waHA=">https://cpe.cse.nsysu.edu.tw/cpe/file/attendance/problemPdf/1746.php</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 615 - Is It A Tree</title>
      <link href="UVa-615-Is-It-A-Tree/"/>
      <url>UVa-615-Is-It-A-Tree/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-615-is-it-a-tree"><a class="anchor" href="#題目-uva-615-is-it-a-tree">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTYxNQ==">UVa 615 - Is It A Tree</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給你一串 <code>node</code>  的連結關係，求是否為一個 tree</p><hr /><p><strong>INPUT:</strong><br /> 每筆資料連續輸入兩個整數 <code>u</code>  與 <code>v</code> ，代表 <code>u</code>  連結到 <code>v</code> <br /> 當 <code>u</code>  與 <code>v</code>  皆為 <code>0</code>  時，結束這筆資料<br />當 <code>u</code>  與 <code>v</code>  皆小於 <code>0</code>  時，結束程式</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>Case x is a tree.</code>  或 <code>Case 1 is not a tree.</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先用 <code>map</code>  建雙向的圖<br />對每一個點跑 <code>dfs</code> ，若一個點已經走過則忽略<br />從 <code>main</code>  呼叫 <code>dfs</code>  的次數為連通圖的數目 (若大於 1 則不是 tree)<br /> <code>dfs</code>  裡，若有 <code>cycle</code> ，則不是 <code>tree</code></p><div class="note info"><p><code>node</code>  的數量有可能為 <code>0</code> <br /> <code>node</code>  可能連接到自己</p></div><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> G<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> vis<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">int</span> root<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token operator">++</span>vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> p<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">else</span> <span class="token operator">++</span>root<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="27"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> cases <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">,</span> u <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="36"></td><td><pre>G<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>vis<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>root <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>u<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>G<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>u<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token operator">:</span> G<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token operator">++</span>root<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>cases <span class="token operator">&lt;&lt;</span> <span class="token string">" is"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>root <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> <span class="token string">" not"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" a tree.\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> map </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10267 - Graphical Editor</title>
      <link href="UVa-10267-Graphical-Editor/"/>
      <url>UVa-10267-Graphical-Editor/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10267-graphical-editor"><a class="anchor" href="#題目-uva-10267-graphical-editor">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwMjY3">UVa 10267 - Graphical Editor</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>你需要實做一個編輯圖像的程式</p><hr /><p><strong>INPUT:</strong><br /> 共有 9 種指令</p><ol><li><code>I M N</code> : 生成一個 <code>N * M</code>  大小的圖，所有字元預設為 <code>O</code>  (大寫 O)</li><li><code>C</code> : 清除圖，將所有字元設為 <code>O</code></li><li><code>L X Y C</code> : 將圖的 <code>(X, Y)</code>  設為 <code>C</code></li><li><code>V X Y1 Y2 C</code> : 畫垂直線 <code>(X, Y1)</code>  至 <code>(X, Y2)</code></li><li><code>H X1 X2 Y C</code> : 畫水平線 <code>(X1, Y)</code>  至 <code>(X2, Y)</code></li><li><code>K X1 Y1 X2 Y2 C</code> : 畫矩形 <code>(X1, Y1)</code>  至 <code>(X2, Y2)</code></li><li><code>F X Y C</code> : 填滿顏色，將 <code>(X, Y)</code>  與之相鄰的同色填為 <code>C</code></li><li><code>S Name</code> : 寫入檔案名稱，並印出</li><li><code>X</code> : 結束程式</li></ol><hr /><p><strong>OUTPUT:</strong><br /> 輸出當前的檔案名稱及圖</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>針對每個指令做出相對應動作<br />比較需要注意的是指令 <code>F</code>  需要用 <code>dfs</code>  填色</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">char</span> G<span class="token punctuation">[</span><span class="token number">251</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">251</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> M <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> N <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">char</span> now<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> y <span class="token operator">></span> N <span class="token operator">||</span> x <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> x <span class="token operator">></span> M <span class="token operator">||</span> G<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> now<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>G<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token function">dfs</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> now<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token function">dfs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> now<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> now<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> now<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="24"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">char</span> cmd<span class="token punctuation">,</span> C<span class="token punctuation">,</span> Now<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">int</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> y2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>string Name<span class="token punctuation">,</span> str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> cmd<span class="token punctuation">,</span> cmd <span class="token operator">!=</span> <span class="token string">'X'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">case</span> <span class="token string">'I'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="39"></td><td><pre>cin <span class="token operator">>></span> M <span class="token operator">>></span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">case</span> <span class="token string">'C'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">case</span> <span class="token string">'L'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="48"></td><td><pre>cin <span class="token operator">>></span> x1 <span class="token operator">>></span> y1 <span class="token operator">>></span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>G<span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token punctuation">[</span>x1<span class="token punctuation">]</span> <span class="token operator">=</span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">case</span> <span class="token string">'V'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="53"></td><td><pre>cin <span class="token operator">>></span> x1 <span class="token operator">>></span> y1 <span class="token operator">>></span> y2 <span class="token operator">>></span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>y1 <span class="token operator">></span> y2<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>y1<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> y1<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> y2<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>x1<span class="token punctuation">]</span> <span class="token operator">=</span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token keyword">case</span> <span class="token string">'H'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="59"></td><td><pre>cin <span class="token operator">>></span> x1 <span class="token operator">>></span> x2 <span class="token operator">>></span> y1 <span class="token operator">>></span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">></span> x2<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x1<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x2<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> G<span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token keyword">case</span> <span class="token string">'K'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="65"></td><td><pre>cin <span class="token operator">>></span> x1 <span class="token operator">>></span> y1 <span class="token operator">>></span> x2 <span class="token operator">>></span> y2 <span class="token operator">>></span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>y1 <span class="token operator">></span> y2<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>y1<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">></span> x2<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> y1<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> y2<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> x1<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> x2<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token keyword">case</span> <span class="token string">'F'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="73"></td><td><pre>cin <span class="token operator">>></span> x1 <span class="token operator">>></span> y1 <span class="token operator">>></span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>G<span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token punctuation">[</span>x1<span class="token punctuation">]</span> <span class="token operator">!=</span> C<span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> G<span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token keyword">case</span> <span class="token string">'S'</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="78"></td><td><pre>cin <span class="token operator">>></span> Name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> Name <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token keyword">default</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="88"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="93"></td><td><pre></pre></td></tr><tr><td data-num="94"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="95"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vYml1c19zdHJpcC9hcnRpY2xlL2RldGFpbHMvNzExNzI4Mjg=">https://blog.csdn.net/mobius_strip/article/details/71172828</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> string </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 389 - Basically Speaking</title>
      <link href="UVa-389-Basically-Speaking/"/>
      <url>UVa-389-Basically-Speaking/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-389-basically-speaking"><a class="anchor" href="#題目-uva-389-basically-speaking">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTM4OQ==">UVa 389 - Basically Speaking</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一串數字，並告訴你它是 <code>n</code>  進位的數字，將它轉為 <code>m</code>  進位的數字，並遵守以下規則:</p><ol><li>有 7 位數的輸出，超過以 <code>ERROR</code>  表示</li><li>使用數字 <code>0 - 9</code>  與字母 <code>A - F</code></li><li><code>n</code>  及 <code>m</code>  的範圍為 <code>2 - 16</code></li></ol><hr /><p><strong>INPUT:</strong><br /> 每筆資料輸入 1 個字串、兩個整數 <code>n</code>  及 <code>m</code></p><hr /><p><strong>OUTPUT:</strong><br /> 輸出轉換過後的數字，7 位數為限，並向右靠齊</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><ol><li>先將 <code>n</code>  進位的數字轉為 10 進位<br /> (使用一個基底 <code>div = 1</code> ，從個位開始，每向前一位 <code>div * n</code> )</li><li>將 10 進位的數字轉為 <code>m</code>  進位</li><li>最後分別處理超過 7 位及 0 位的情況</li></ol><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> str <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">int</span> _10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>string ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// turn the base n to decimal</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> div <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">,</span> div <span class="token operator">*=</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> _10 <span class="token operator">+=</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> div<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">else</span> _10 <span class="token operator">+=</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> div<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">// turn decimal to base m</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>_10 <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>_10 <span class="token operator">%</span> m <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>_10 <span class="token operator">%</span> m <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">else</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>_10 <span class="token operator">%</span> m <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>_10 <span class="token operator">/=</span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">7</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  ERROR"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">int</span> sp <span class="token operator">=</span> <span class="token number">7</span> <span class="token operator">-</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>sp<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 458 - The Decoder</title>
      <link href="UVa-458-The-Decoder/"/>
      <url>UVa-458-The-Decoder/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-458-the-decoder"><a class="anchor" href="#題目-uva-458-the-decoder">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTQ1OA==">UVa 458 - The Decoder</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>你需要將一串亂碼解碼成正常句子</p><hr /><p><strong>INPUT:</strong><br /> 每筆資料輸入一串連續亂碼 <code>string</code></p><hr /><p><strong>OUTPUT:</strong><br /> 輸出解碼後的句子</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>找到規律，亂碼為 <code>正常句子+7</code> ，所以將每個字元 - 7 後輸出即可</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> str<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> c <span class="token operator">:</span> str<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>c <span class="token operator">-</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11633 - Food portion sizes</title>
      <link href="UVa-11633-Food-portion-sizes/"/>
      <url>UVa-11633-Food-portion-sizes/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11633-food-portion-sizes"><a class="anchor" href="#題目-uva-11633-food-portion-sizes">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExNjMz">UVa 11633 - Food portion sizes</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>大學學生餐廳不希望任何學生離開餐廳時沒吃飽<br />所以只要學生的肚子還餓，他就能免費拿到另一份餐點</p><p>為了節省時間，學生餐廳統一了每份餐點的份量，但這會導致浪費的發生</p><p>給兩個常數 <code>a</code>  及 <code>b</code> ，你需要找到 <code>a * x + b * y</code>  的最小值</p><ul><li><code>x</code>  為浪費的餐點量</li><li><code>y</code>  為學生領餐的次數</li></ul><hr /><p><strong>INPUT:</strong><br /> 每筆資料第一行有一個整數 <code>N</code> ，代表學生的數量<br />下一行有兩個整數 <code>a</code>  與 <code>b</code> <br /> 接下來有 <code>N</code>  個整數，代表每個學生吃的份量<br />當 <code>N = 0</code>  時結束程式</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>a * x + b * y</code>  的最小值<br />如果為分數需要分開輸出<br />例如 <code>17.5</code>  輸出為 <code>35 / 2</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><ol><li>由於可能跑 <code>1、2、3</code>  次，通分為 6，所以先將所有輸入乘以 6 儲存，並找出最大值</li><li>窮舉所有符合條件的可能 (不取餐超過 3 次)，依序計算 <code>x、y</code>  次數</li><li>將最小的 <code>a * x + b * y</code>  紀錄，最後輸出</li></ol><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N<span class="token punctuation">,</span> N<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="19"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> student<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> minn <span class="token operator">=</span> <span class="token punctuation">&#123;</span> INT_MAX<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">// store data</span></pre></td></tr><tr><td data-num="24"></td><td><pre>cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>cin <span class="token operator">>></span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>student<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>maxn <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxn<span class="token punctuation">,</span> x <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">// run all posible of n</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> div <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> div <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>div<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> student<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">int</span> s1 <span class="token operator">=</span> i <span class="token operator">/</span> div<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>s1 <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">&lt;</span> maxn<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> j <span class="token operator">:</span> student<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">int</span> s2 <span class="token operator">=</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>s1 <span class="token operator">-</span> s2 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> s2 <span class="token operator">-=</span> s1<span class="token punctuation">,</span> <span class="token operator">++</span>y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>x <span class="token operator">+=</span> <span class="token punctuation">(</span>s1 <span class="token operator">-</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token operator">++</span>y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>minn <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>minn<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> x <span class="token operator">*</span> a <span class="token operator">+</span> y <span class="token operator">*</span> b <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">,</span> div <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> minn<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">/</span> <span class="token number">6</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">*</span> j <span class="token operator">/</span> <span class="token number">6</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" / "</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9tb3JyaXM4MjEwMjguZ2l0aHViLmlvLzIwMTQvMDcvMjQvb2ovdXZhL3V2YS0xMTYzMy8=">https://morris821028.github.io/2014/07/24/oj/uva/uva-11633/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 12319 - Edgetown&#39;s Traffic Jams&#39;</title>
      <link href="UVa-12319-Edgetown-s-Traffic-Jams/"/>
      <url>UVa-12319-Edgetown-s-Traffic-Jams/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-12319-edgetowns-traffic-jams"><a class="anchor" href="#題目-uva-12319-edgetowns-traffic-jams">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEyMzE5">UVa 12319 - Edgetown's Traffic Jams'</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一張無向圖，一張有像圖<br />求有像圖中任兩點的距離不能大於無向圖中任兩點距離的 <code>a</code>  倍 + <code>b</code></p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>N</code> ，代表無向圖及有像圖的大小<br />重複以下步驟兩次，分別為無向圖及有像圖</p><p>接下來有 <code>N</code>  行，每行至少有 2 個數字<br />設第 1 個數字為 <code>u</code> 、其後任一數字為 <code>v</code> ，則 <code>u</code>  連通至 <code>v</code></p><p>最後有兩個數字 <code>a</code>  和 <code>b</code></p><hr /><p><strong>OUTPUT:</strong><br /> 符合條件則輸出 <code>Yes</code> ，反之輸出 <code>No</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先將 <code>g1</code>  (無向圖)、 <code>g2</code>  (有像圖) 建圖<br />將值設為 <code>101</code>  是因為 <code>N</code>  最多 <code>100</code> ， <code>101</code>  對於 <code>N</code>  即為無限大</p><p>讀取連通的點，將連通的點設為 <code>1</code></p><p>之後跑 <code>Floyd-Warshall</code>  演算法，找出每個點間的最短路徑<br />最後判斷是否符合題目要求</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="11"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> g1<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">,</span> g2<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N<span class="token punctuation">,</span> N<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="22"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>g1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>g2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">// store graph</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>stringstream <span class="token function">ss</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>ss <span class="token operator">>></span> u<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>ss <span class="token operator">>></span> v<span class="token punctuation">)</span> i <span class="token operator">&lt;=</span> N <span class="token operator">?</span> g1<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">:</span> g2<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token comment">// Floyd-Warshall algorithm</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>g1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>g1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> g1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> g1<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>g2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>g2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> g2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> g2<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token keyword">bool</span> out <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>out<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> N <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>out<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>g2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> g1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span> out <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>out <span class="token operator">?</span> <span class="token string">"No"</span> <span class="token operator">:</span> <span class="token string">"Yes"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIwOTE4Ng==">https://ithelp.ithome.com.tw/articles/10209186</span><br /><span class="exturl" data-url="aHR0cHM6Ly9sb3Vpc2ZnaGJ2Yy5waXhuZXQubmV0L2Jsb2cvcG9zdC8zMjk3NTYxNDktdXZhLTEyMzE5LWVkZ2V0b3duJUUyJTgwJTk5cy10cmFmZmljLWphbXM=">https://louisfghbvc.pixnet.net/blog/post/329756149-uva-12319-edgetown%E2%80%99s-traffic-jams</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> Floyd-Warshall </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11960 - Divisor Game</title>
      <link href="UVa-11960-Divisor-Game/"/>
      <url>UVa-11960-Divisor-Game/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11960-divisor-game"><a class="anchor" href="#題目-uva-11960-divisor-game">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExOTYw">UVa 11960 - Divisor Game</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個整數 <code>N</code> ，求 <code>&lt;= N</code>  中的哪一個整數有最多因數</p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>T</code> ，代表有幾筆資料<br />每筆資料輸入一個整數 <code>N</code></p><hr /><p><strong>OUTPUT:</strong><br /> <code>&lt;= N</code>  中有最多因數的整數</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先做質因數分解，透過以下公式能找到每個整數的因數個數<br />假設 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>24</mn><mo>=</mo><msup><mn>2</mn><mn>3</mn></msup><mo>⋅</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">24 = 2^3 \cdot 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span><br /> 其因數為  <code>1, 2, 3, 4, 6, 8, 12, 24</code> ，共 8 個<br />則將分解後的次方加 1 相乘即為因數個數<br /><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>3</mn><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>⋅</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mn>8</mn></mrow><annotation encoding="application/x-tex">(3 + 1) \cdot (1 + 1) = 8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span></p><p>先找到 <code>2 - 1000000</code>  中每個數字的最小因數 (不包括 1)，並建表 <code>fact</code> <br /> 對每個數除以它的最小因數，反覆做後能得到次方數<br />將所有次方數加 1 相乘後，則為因數個數，並建表 <code>ans</code>  儲存<br />最後再將 <code>&lt;= N</code>  中的有最大因數個數的數分別存入表 <code>ans</code>  中</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">maxx <span class="token number">1000000</span></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token comment">// init</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">int</span> T<span class="token punctuation">,</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> fact<span class="token punctuation">,</span> ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    fact<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>maxx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    ans<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>maxx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">// find the smallest factor of 2 - 1000000 (except 1)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxx<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fact<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        fact<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> j <span class="token operator">=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> maxx<span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fact<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> fact<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token comment">// count the numbers of factors</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxx<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">auto</span> tmp <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">int</span> f <span class="token operator">=</span> fact<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">%</span> f <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>                tmp <span class="token operator">/=</span> fact<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                <span class="token operator">++</span>cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*=</span> <span class="token punctuation">(</span>cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token comment">// find the number that has most factors &lt;= i</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> maxans <span class="token operator">=</span> ans<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxx<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> maxans<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            maxans <span class="token operator">=</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>            maxn <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> maxn<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre>    cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        cin <span class="token operator">>></span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQFNDSVNUL0Jhc2ljTWF0aDM=">https://hackmd.io/@SCIST/BasicMath3</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11536 - Smallest Sub-Array</title>
      <link href="UVa-11536-Smallest-Sub-Array/"/>
      <url>UVa-11536-Smallest-Sub-Array/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11536-smallest-sub-array"><a class="anchor" href="#題目-uva-11536-smallest-sub-array">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExNTM2">UVa 11536 - Smallest Sub-Array</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>建構出按照一定規則的數字序列<br />找出包含所有 <code>1 - K</code>  的最短子序列</p><p>序列的規則如下:</p><ul><li><code>x1</code>  = 1</li><li><code>x2</code>  = 2</li><li><code>x3</code>  = 3</li><li><code>xi</code>  = (xi-1 + xi-2 + xi-3) % M + 1</li></ul><hr /><p><strong>INPUT:</strong><br /> 第一行有一個整數 <code>T</code> ，代表有幾筆資料<br />每筆資料有 3 個整數 <code>N</code>  、  <code>M</code>  、  <code>K</code></p><ol><li><code>N</code>  代表數字序列的長度</li><li><code>M</code>  代表 <code>xi</code>  取 <code>M</code>  的餘數</li><li><code>K</code>  代表目標數字</li></ol><hr /><p><strong>OUTPUT:</strong><br /> 輸出最短子序列的長度<br />如果不存在，則輸出 <code>sequence nai</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>按照 <code>N</code>  的大小先建構數字序列，以 <code>G</code>  儲存<br />從頭開始遍歷 <code>G</code> ，計算每個符合條件 (&lt;=K) 的數字數量<br />如果為第 1 次新增，則將 <code>cnt + 1</code> ，當 <code>cnt = K</code> ，則找到一個符合條件的子序列<br />比對是否比其他序列更短，並盡可能的縮減序列 (從頭開始刪除)</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">int</span> T<span class="token punctuation">,</span> N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> K<span class="token punctuation">,</span> cases <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> G<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> check<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>    cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        cin <span class="token operator">>></span> N <span class="token operator">>></span> M <span class="token operator">>></span> K<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token comment">// init</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        G<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        G<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> G<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> G<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>G<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> G<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> G<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> M <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        check<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>K <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token comment">// find the smallest subsequence</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">int</span> result <span class="token operator">=</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> K<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>check<span class="token punctuation">[</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span>f <span class="token operator">&lt;=</span> i <span class="token operator">&amp;&amp;</span> cnt <span class="token operator">==</span> K<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>G<span class="token punctuation">[</span>f<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">></span> K<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre>                result <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> i <span class="token operator">-</span> f <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>check<span class="token punctuation">[</span>G<span class="token punctuation">[</span>f <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">--</span>cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>cases <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sequence nai\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tlc2h1YWkxOTk0MDcyMi9hcnRpY2xlL2RldGFpbHMvMTg4ODMzNTc=">https://blog.csdn.net/keshuai19940722/article/details/18883357</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11689 - Soda Surpler</title>
      <link href="UVa-11689-Soda-Surpler/"/>
      <url>UVa-11689-Soda-Surpler/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11689-soda-surpler"><a class="anchor" href="#題目-uva-11689-soda-surpler">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExNjg5">UVa 11689 - Soda Surpler</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>Tim 今天超級渴<br />求他今天最多能喝幾罐可樂？</p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>N</code> ，代表有 <code>N</code>  筆資料<br />每筆資料有三個整數 <code>e</code> 、 <code>f</code> 、 <code>c</code></p><ol><li><code>e</code>  代表他擁有的瓶子數</li><li><code>f</code>  代表他今天找到的瓶子數</li><li><code>c</code>  代表幾個瓶子能換一瓶可樂</li></ol><hr /><p><strong>OUTPUT:</strong><br /> 輸出能兌換可樂的最大數量</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>重複累加 <code>(e + f / c)</code>  的數量，直到 <code>e + f &lt; c</code></p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">,</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cin <span class="token operator">>></span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>N<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>cin <span class="token operator">>></span> e <span class="token operator">>></span> f <span class="token operator">>></span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> now <span class="token operator">=</span> e <span class="token operator">+</span> f<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>now <span class="token operator">>=</span> c<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>total <span class="token operator">+=</span> now <span class="token operator">/</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>now <span class="token operator">=</span> now <span class="token operator">%</span> c <span class="token operator">+</span> now <span class="token operator">/</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> total <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10415 - Eb Alto Saxophone Player</title>
      <link href="UVa-10415-Eb-Alto-Saxophone-Player/"/>
      <url>UVa-10415-Eb-Alto-Saxophone-Player/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10415-eb-alto-saxophone-player"><a class="anchor" href="#題目-uva-10415-eb-alto-saxophone-player">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwNDE1">UVa 10415 - Eb Alto Saxophone Player</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>你喜歡薩克斯風嗎？<br /> 寫一個程式計算彈奏一段旋律，每根手指的按壓次數</p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>T</code> ，代表有 <code>T</code>  筆資料<br />每筆資料輸入一個字串</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 10 個整數 (每根手指的按壓次數)</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先利用 <code>map</code>  建立每個音需要按壓的手指<br />之後判斷每個音，如果一個位置被按下，則此位置 + 1<br /> 最後輸出總共的次數</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="11"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> finger<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> count<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> string<span class="token operator">></span> notes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>string str<span class="token punctuation">,</span> cur<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// init map</span></pre></td></tr><tr><td data-num="22"></td><td><pre>notes<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">"0111001111"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>notes<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">"0111001110"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>notes<span class="token punctuation">[</span><span class="token string">'e'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0111001100"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>notes<span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0111001000"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>notes<span class="token punctuation">[</span><span class="token string">'g'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0111000000"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>notes<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0110000000"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>notes<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0100000000"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>notes<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0010000000"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>notes<span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1111001110"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>notes<span class="token punctuation">[</span><span class="token string">'E'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1111001100"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>notes<span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1111001000"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>notes<span class="token punctuation">[</span><span class="token string">'G'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1111000000"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>notes<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1110000000"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>notes<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1100000000"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="43"></td><td><pre>finger<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>count<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>cur <span class="token operator">=</span> <span class="token string">"0000000000"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> ch <span class="token operator">:</span> str<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> notes<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token operator">++</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>cur <span class="token operator">=</span> notes<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> string </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10188 - Automated Judge Script</title>
      <link href="UVa-10188-Automated-Judge-Script/"/>
      <url>UVa-10188-Automated-Judge-Script/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10188-automated-judge-script"><a class="anchor" href="#題目-uva-10188-automated-judge-script">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwMTg4">UVa 10188 - Automated Judge Script</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>程式競賽的評審很嚴格但又很懶散，他們希望能少一點工作及多一點錯誤答案<br />你需要寫一個自動化的評審系統，根據標準答案及回答，給出:<br /> <code>Accepted</code> 、 <code>Presentation Error</code> 、 <code>Wrong Answer</code>  其中之一</p><ul><li><code>Accepted</code>  :  <code>string</code>  中所有字元皆相同</li><li><code>Presentation Error</code>  : 所有數字皆正確，但至少有 1 個以上的字元錯誤</li><li><code>Wrong Answer</code>  : 數字錯誤</li></ul><hr /><p><strong>INPUT:</strong><br /> 每筆資料第一行有一個整數 <code>N</code> ，代表接下來有幾行標準答案<br />接下來輸入 <code>N</code>  個 <code>string</code> <br /> 當 <code>N = 0</code>  時結束程式</p><p>之後會有一個整數 <code>M</code> ，代表接下來有幾行回答<br />接下來輸入 <code>M</code>  個 <code>string</code></p><hr /><p><strong>OUTPUT:</strong><br /> 每筆資料輸出一個 <code>Accepted</code> 、 <code>Presentation Error</code>  或 <code>Wrong Answer</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先用兩個 <code>vector</code>  儲存資料<br />比對兩個 <code>vector</code>  是否完全相同，相同則輸出 <code>Accepted</code> <br /> 接著將兩個 <code>vector</code>  中的所有數字分別存入兩個 <code>string</code> <br /> 若兩個 <code>string</code>  相同則輸出 <code>Presentation Error</code> <br /> 否則則輸出 <code>Wrong Answer</code></p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> cases <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>string tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N<span class="token punctuation">,</span> N<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ans<span class="token punctuation">,</span> team<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>N<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>ans<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>cin <span class="token operator">>></span> M<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>M<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>team<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Run #"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>cases <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> team<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Accepted\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre>string ans_num<span class="token punctuation">,</span> team_num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> ans<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> j <span class="token operator">:</span> i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> ans_num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> team<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> j <span class="token operator">:</span> i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> team_num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ans_num <span class="token operator">==</span> team_num<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Presentation Error\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Wrong Answer\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10050 - Hartals</title>
      <link href="UVa-10050-Hartals/"/>
      <url>UVa-10050-Hartals/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10050-hartals"><a class="anchor" href="#題目-uva-10050-hartals">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwMDUw">UVa 10050 - Hartals</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>題目給總天數及各個 <code>party</code>  的間隔天數<br />天數從禮拜天開始算，禮拜天為 <code>day 1</code> <br /> 周五及周六不算<br />求 <code>hartal</code>  的天數</p><p>例如:<br /> 天數 <code>N = 9</code> ， <code>party1 = 3</code> 、 <code>party2 = 4</code></p><table><thead><tr><th style="text-align:center">星期</th><th style="text-align:center">日</th><th style="text-align:center">一</th><th style="text-align:center">二</th><th style="text-align:center">三</th><th style="text-align:center">四</th><th style="text-align:center">五</th><th style="text-align:center">六</th><th style="text-align:center">日</th><th>一</th></tr></thead><tbody><tr><td style="text-align:center">天數</td><td style="text-align:center">day1</td><td style="text-align:center">day2</td><td style="text-align:center">day3</td><td style="text-align:center">day4</td><td style="text-align:center">day5</td><td style="text-align:center">day6</td><td style="text-align:center">day7</td><td style="text-align:center">day8</td></tr><tr><td style="text-align:center">party1</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">o</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">o</td><td style="text-align:center"></td><td style="text-align:center"></td><td>o</td></tr><tr><td style="text-align:center">party2</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">o</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">o</td><td></td></tr><tr><td style="text-align:center">hartal</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">3</td><td>4</td></tr></tbody></table><p><code>hartal = 4</code></p><hr /><p><strong>INPUT:</strong><br /> 第一行為一個整數 <code>T</code> ，代表有幾筆資料<br />每筆資料第一行有兩個整數 <code>N</code>  與 <code>P</code></p><ol><li><code>N</code>  代表天數</li><li><code>P</code>  代表有 <code>P</code>  個 <code>party</code> <br /> 接下來有 <code>P</code>  行，每行讀入一個整數代表這個 <code>party</code>  的間隔天數</li></ol><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>hartal</code>  的天數</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先將罷工的天數設為 <code>true</code> <br /> 再把周五及周六設為 <code>false</code> <br /> 最後算 <code>true</code>  的次數</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">,</span> N<span class="token punctuation">,</span> P<span class="token punctuation">,</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> days<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>cin <span class="token operator">>></span> N <span class="token operator">>></span> P<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>days<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>P<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>cin <span class="token operator">>></span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> num<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i <span class="token operator">+=</span> num<span class="token punctuation">)</span> days<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">7</span><span class="token punctuation">)</span> days<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> days<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>days<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 673 - Parentheses Balance</title>
      <link href="UVa-673-Parentheses-Balance/"/>
      <url>UVa-673-Parentheses-Balance/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-673-parentheses-balance"><a class="anchor" href="#題目-uva-673-parentheses-balance">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTY3Mw==">UVa 673 - Parentheses Balance</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>有一個包含 <code>[</code> 、 <code>]</code> 、 <code>(</code> 、 <code>)</code>  這四種符號的字串，你需要判斷此字串是否符合以下規則</p><ol><li>空字串為 <code>correct</code></li><li>如果 <code>A</code>  與 <code>B</code>  皆為 <code>correct</code> ， <code>AB</code>  為 <code>correct</code></li><li>如果 <code>A</code>  為 <code>correct</code> ，那 <code>[A]</code>  與 <code>(A)</code>  也為 <code>correct</code></li></ol><hr /><p><strong>INPUT:</strong><br /> 第一行為一個整數 <code>T</code> ，代表有幾筆資料<br />每筆資料輸入一串字串</p><hr /><p><strong>OUTPUT:</strong><br /> 結果為 <code>correct</code>  輸出 <code>Yes</code> ，否則輸出 <code>No</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>使用 <code>stack</code> <br /> 當輸入為 <code>]</code> 、 <code>)</code>  時，判斷 <code>stack.top()</code>  是否為 <code>[</code> 、 <code>(</code> ，是則 <code>pop</code> <br /> 其餘狀況皆 <code>push</code>  進 <code>stack</code> <br /> 最後判斷 <code>stack</code>  是否為空即可</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> S<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> c <span class="token operator">:</span> str<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">']'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>S<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> S<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'['</span><span class="token punctuation">)</span> S<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">else</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>S<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> S<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> S<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">else</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">else</span> S<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"Yes"</span> <span class="token operator">:</span> <span class="token string">"No"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10765 - Doves and Bombs</title>
      <link href="UVa-10765-Doves-and-Bombs/"/>
      <url>UVa-10765-Doves-and-Bombs/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10765-doves-and-bombs"><a class="anchor" href="#題目-uva-10765-doves-and-bombs">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwNzY1">UVa 10765 - Doves and Bombs</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個無向圖，當拿掉一個割點時，此圖會分成數個連通圖<br />求前 <code>m</code>  個可以分為最多連通圖的點及連通圖的數量</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資第一行有兩個整數 <code>n</code> 、 <code>m</code> ，當 <code>n</code> 、 <code>m</code>  為 <code>0</code>  時結束</p><ol><li><code>n</code>  代表節點數</li><li><code>m</code>  代表輸出 <code>m</code>  筆結果 (降冪排序)<br /> 接下來每行有兩個整數，代表兩整數存在一條邊連通<br />當兩整數為 <code>-1</code>  時結束</li></ol><hr /><p><strong>OUTPUT:</strong><br /> 輸出前 <code>m</code>  筆結果 (降冪排序)</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先建圖，建雙向邊<br />之後跑 <code>dfs</code> ，紀錄每個點的 <code>dfn值</code> 及 <code>low值</code> <br />以割點的定義紀錄每個點被多少個點視為割點<br />最後排序後輸出</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> graph<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> dfn<span class="token punctuation">,</span> low<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>vector<span class="token operator">&lt;</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">int</span> dep<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur<span class="token punctuation">,</span> <span class="token keyword">int</span> par<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">int</span> child <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>dfn<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>dep<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> graph<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token operator">++</span>child<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> par<span class="token punctuation">)</span> low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>low<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> dfn<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>par <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> child <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>result<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">return</span> a<span class="token punctuation">.</span>second <span class="token operator">==</span> b<span class="token punctuation">.</span>second <span class="token operator">?</span> a<span class="token punctuation">.</span>first <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>first <span class="token operator">:</span> a<span class="token punctuation">.</span>second <span class="token operator">></span> b<span class="token punctuation">.</span>second<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">,</span> n <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="48"></td><td><pre>graph<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>dfn<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>low<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>result<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>dep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token comment">// build graph</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">,</span> a <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>graph<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>graph<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token comment">// find articulation point</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token comment">// sort</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token function">sort</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="71"></td><td><pre></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTA3NjUv">https://www.larrysprognotes.com/UVa%20-%2010765/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> dfs </tag>
            
            <tag> articulation point </tag>
            
            <tag> bridge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 796 - Critical Links</title>
      <link href="UVa-796-Critical-Links/"/>
      <url>UVa-796-Critical-Links/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-796-critical-links"><a class="anchor" href="#題目-uva-796-critical-links">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTc5Ng==">UVa 796 - Critical Links</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個無向圖，求 <code>bridge</code>  的數量及 <code>bridge</code>  為哪兩個點連接</p><p>bridge 定義:</p><div class="note info"><ol><li>一個連通圖，若拿掉一個邊會使此圖不連通，則此邊為 <code>bridge</code></li><li>對於任意邊，一點不存在連通至 <code>ancester</code>  的 <code>backedge</code> ，則此邊為 <code>bridge</code></li></ol></div><hr /><p><strong>INPUT:</strong><br /> 每筆測資第一行有一個整數 <code>N</code> ，代表有 <code>N</code>  個節點 <code>(0 ~ N-1)</code> <br /> 接下來有 <code>N</code>  行，每行第一個數字為該點，括號刮起來為連到的節點數<br />例如 <code>2 (2) 1 3</code>  代表有兩個邊 <code>(2, 1)、(2, 3)</code></p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>bridge</code>  的數量及 <code>bridge</code>  為哪兩個點連接</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先建圖<br />之後跑 <code>dfs</code> ，由於此圖不一定連通，所以最多跑 <code>N</code>  次<br />之後跑 <code>dfs</code> ，紀錄每個點的 <code>dfn值</code> 及 <code>low值</code> <br />如果下一點的 <code>low值</code> 大於此點的 <code>dfn值</code> ，則這兩個點間存在一條 <code>bridge</code></p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">p pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> graph<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> dfn<span class="token punctuation">,</span> low<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>priority_queue<span class="token operator">&lt;</span>p<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>p<span class="token operator">>></span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> dep<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur<span class="token punctuation">,</span> <span class="token keyword">int</span> par<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>dfn<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>dep<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> graph<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> par<span class="token punctuation">)</span> low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>p tmp <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>low<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> dfn<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>graph<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>dfn<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>low<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>dep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">char</span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>cin <span class="token operator">>></span> a <span class="token operator">>></span> tmp <span class="token operator">>></span> n <span class="token operator">>></span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> b<span class="token punctuation">,</span> graph<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" critical links\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" - "</span> <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>result<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwNzk2Lw==">https://www.larrysprognotes.com/UVa%20-%20796/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> queue </tag>
            
            <tag> dfs </tag>
            
            <tag> bridge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 315 - Network</title>
      <link href="UVa-315-Network/"/>
      <url>UVa-315-Network/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-315-network"><a class="anchor" href="#題目-uva-315-network">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTMxNQ==">UVa 315 - Network</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個點皆連通的無向圖<br />求 <code>割點(Articulation Points</code>  的數量</p><p>割點定義:</p><div class="note info"><ol><li>對於 <code>root</code> ，如果 <code>root</code>  有兩顆以上的 <code>subtree</code> ，那 <code>root</code>  為割點</li><li>對於非 <code>leaf</code>  的其他節點，其 <code>child</code>  沒有一條 <code>back edge</code>  指到 <code>ancester</code> ，則該點為割點</li></ol></div><hr /><p><strong>INPUT:</strong><br /> 每筆測資第一行有一個整數 <code>N</code> ，代表有 <code>N</code>  個節點<br />當 <code>N = 0</code>  時結束程式<br />接下來有最多 <code>N</code>  行，每行有數個整數<br />例如 <code>5 1 2 3 4</code>  代表有四個邊 <code>(5, 1)、(5, 2)、(5, 3)、(5, 4)</code></p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>Articulation Points</code>  的數量。</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先建圖 (為無向圖，所以建雙邊)<br /> 之後跑 <code>dfs</code> ，紀錄每個點的 <code>dfn值</code> 及 <code>low值</code> <br />如果一節點滿足以下則為割點</p><ol><li>下一點的 <code>low值</code> 大於等於此點的 <code>dfn值</code></li><li><code>root</code>  有兩個 <code>child</code>  或不為 <code>root</code></li></ol><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> edge<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> dfn<span class="token punctuation">,</span> low<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">int</span> result<span class="token punctuation">,</span> dep<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur<span class="token punctuation">,</span> <span class="token keyword">int</span> par<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">bool</span> cut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">int</span> child <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>dfn<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>dep<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> edge<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token operator">++</span>child<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>low<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> dfn<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span> cut <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> par<span class="token punctuation">)</span> low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>child <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">||</span> par <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> cut<span class="token punctuation">)</span> <span class="token operator">++</span>result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N <span class="token operator">&amp;&amp;</span> N<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>edge<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>dfn<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>low<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>stringstream <span class="token function">ss</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre>ss <span class="token operator">>></span> u<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>u<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>ss <span class="token operator">>></span> v<span class="token punctuation">)</span> edge<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMzE1Lw==">https://www.larrysprognotes.com/UVa%20-%20315/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> string </tag>
            
            <tag> dfs </tag>
            
            <tag> articulation point </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10305 - Ordering Tasks</title>
      <link href="UVa-10305-Ordering-Tasks/"/>
      <url>UVa-10305-Ordering-Tasks/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10305-ordering-tasks"><a class="anchor" href="#題目-uva-10305-ordering-tasks">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwMzA1">UVa 10305 - Ordering Tasks</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給 <code>n</code>  件事及 <code>m</code>  個規則，求符合的順序</p><hr /><p><strong>INPUT:</strong><br /> 第一行有兩個整數 <code>n</code> 、 <code>m</code> ，代表有 <code>n</code>  件事要做，有 <code>m</code>  個規則<br />接下來有 <code>m</code>  行，每行有兩個整數，代表要先做前者才能做後者</p><hr /><p><strong>OUTPUT:</strong><br /> 符合規則的做事順序</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先建圖，將後者先標為 <code>true</code> <br /> 之後跑 <code>dfs</code> ，將走過的點設為 <code>true</code>  並 <code>push</code>  到 <code>result</code></p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> graph<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">bool</span> check<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">,</span> link<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>check<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> graph<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>check<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>result<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">||</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token function">fill</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> graph <span class="token operator">+</span> <span class="token number">101</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>check<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>check<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>result<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>graph<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>link<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>link<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">" "</span> <span class="token operator">:</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTAzMDUv">https://www.larrysprognotes.com/UVa%20-%2010305/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> dfs </tag>
            
            <tag> topological sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 872 - Ordering</title>
      <link href="UVa-872-Ordering/"/>
      <url>UVa-872-Ordering/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-872-ordering"><a class="anchor" href="#題目-uva-872-ordering">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTg3Mg==">UVa 872 - Ordering</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>題目給數個字母及排列順序<br />求所有的可能排序</p><hr /><p><strong>INPUT:</strong><br /> 第一行有一個整數 <code>T</code> ，代表有 <code>T</code>  筆測資<br />接著有兩行字串，第一行為所有的字母，第二行為這些字母的排列順序<br />每個字母間以空格隔開</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出所有可能的字母排序</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>以字串儲存字母並排序<br />接著跑 <code>dfs</code> ，判斷字母是否有跑過、是否符合規則，都是則繼續跑下一層 <code>dfs</code></p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">bool</span> graph<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">bool</span> check<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">bool</span> t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>string sdata<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> sdata<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">" "</span> <span class="token operator">:</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>t <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sdata<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>check<span class="token punctuation">[</span>sdata<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>graph<span class="token punctuation">[</span>sdata<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>check<span class="token punctuation">[</span>sdata<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token function">dfs</span><span class="token punctuation">(</span>s <span class="token operator">+</span> sdata<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>check<span class="token punctuation">[</span>sdata<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>sdata<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>t <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>check<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>check<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>stringstream ss<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>ss <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>ss <span class="token operator">>></span> str<span class="token punctuation">)</span> sdata <span class="token operator">+=</span> str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token function">sort</span><span class="token punctuation">(</span>sdata<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sdata<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>ss<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>ss <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>ss <span class="token operator">>></span> str<span class="token punctuation">)</span> graph<span class="token punctuation">[</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwODcyLw==">https://www.larrysprognotes.com/UVa%20-%20872/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> string </tag>
            
            <tag> dfs </tag>
            
            <tag> topological sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10557 - XYZZY</title>
      <link href="UVa-10557-XYZZY/"/>
      <url>UVa-10557-XYZZY/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10557-xyzzy"><a class="anchor" href="#題目-uva-10557-xyzzy">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwNTU3">UVa 10557 – XYZZY</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一張有向圖，每個點都有能量變化 (可能正可能負)，起點為 100 能量<br />求起點是否能走到終點</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資第一行有一個整數 <code>n</code> ，代表有 <code>n</code>  個點，若 <code>n = -1</code>  結束程式<br />接下來有 <code>n</code>  行，依序為 <code>1 ~ n</code>  個點的資訊，每行至少有兩個整數 <code>val</code> 、 <code>j</code></p><ol><li><code>val</code>  代表該點的能量消耗</li><li><code>j</code>  代表接下來有 <code>j</code>  個整數，該點連接到這些整數</li></ol><hr /><p><strong>OUTPUT:</strong><br /> 從起點 ( <code>1</code> ) 能走到終點 ( <code>n</code> ) 輸出 <code>winnable</code> ，否則輸出 <code>hopeless</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>因為題目為能量消耗，所以我們要找最大路徑<br />當有正環發生時，若該點能走到終點，則能量無限，直接輸出 <code>winnable</code> <br /> 透過 <code>dfs</code>  從終點反向找，終點是否能走到該點</p><p>先建圖，同時建一個反向的圖方便 <code>dfs</code> <br /> 接著以 <code>bellman</code>  演算法找到最大路徑，之後判斷正環<br />有則執行上述，無則判斷終點的能量是否大於 0 即可</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_set></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> G<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> G_<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> energy<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> dis<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> us<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>us<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> G_<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>us<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">bool</span> <span class="token function">bellman</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>dis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> u <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>u<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> energy<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> u <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>u<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> energy<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>us<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> energy<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">return</span> dis<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="43"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n<span class="token punctuation">,</span> n <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="51"></td><td><pre>G<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>G_<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>energy<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>dis<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>us<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">int</span> val<span class="token punctuation">,</span> j<span class="token punctuation">,</span> nxt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>cin <span class="token operator">>></span> val <span class="token operator">>></span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>energy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>j<span class="token operator">--</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> nxt<span class="token punctuation">,</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>nxt<span class="token punctuation">)</span><span class="token punctuation">,</span> G_<span class="token punctuation">[</span>nxt<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token comment">// bellman algorithm</span></pre></td></tr><tr><td data-num="68"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token function">bellman</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"winnable\n"</span> <span class="token operator">:</span> <span class="token string">"hopeless\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="70"></td><td><pre></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTA1NTcv">https://www.larrysprognotes.com/UVa%20-%2010557/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> dfs </tag>
            
            <tag> bellman </tag>
            
            <tag> unordered set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 558 - Wormholes</title>
      <link href="UVa-558-Wormholes/"/>
      <url>UVa-558-Wormholes/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-558-wormholes"><a class="anchor" href="#題目-uva-558-wormholes">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTU1OA==">UVa 558 - Wormholes</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一張有向圖， <code>n</code>  個點透過 <code>m</code>  條邊相連，每個邊有 weight<br /> 求圖上是否有負環</p><hr /><p><strong>INPUT:</strong><br /> 第一行有一個整數 <code>T</code> ，代表有幾筆測資<br />每筆測資第一行有兩個整數 <code>n</code> 、 <code>m</code> ，代表有 <code>n</code>  個點及 <code>m</code>  條邊<br />接下來有 <code>m</code>  行，每行有三個整數 <code>u</code> 、 <code>v</code> 、 <code>w</code> ，代表點 <code>u</code>  連接到點 <code>v</code>  (單向) 且 weight 為 <code>w</code></p><hr /><p><strong>OUTPUT:</strong><br /> 有負環輸出 <code>possible</code> ，無則輸出 <code>not possible</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先建圖<br />接著以 <code>bellman</code>  演算法找到最短路徑，若還能找到更短的邊則有負環</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tuple></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>vector<span class="token operator">&lt;</span> tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> edge<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">int</span> dis<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">bool</span> <span class="token function">bellman</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>dis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">]</span> <span class="token operator">:</span> edge<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">]</span> <span class="token operator">:</span> edge<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> w <span class="token operator">&lt;</span> dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="26"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="39"></td><td><pre>edge<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token function">fill</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> dis <span class="token operator">+</span> n<span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>cin <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">>></span> w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>edge<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token function">make_tuple</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token comment">// bellman algorithm</span></pre></td></tr><tr><td data-num="50"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token function">bellman</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"possible\n"</span> <span class="token operator">:</span> <span class="token string">"not possible\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwNTU4Lw==">https://www.larrysprognotes.com/UVa%20-%20558/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> bellman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10449 - Traffic</title>
      <link href="UVa-10449-Traffic/"/>
      <url>UVa-10449-Traffic/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10449-traffic"><a class="anchor" href="#題目-uva-10449-traffic">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwNDQ5">UVa 10449 - Traffic</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個有向圖，圖中每個點皆有值，而從一個點移動到下一個點的 cost 為 <code>(目的點的值 - 當前點的值) * 3</code> <br /> 求 <code>1</code>  到終點的最短路徑</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資第一個輸入為整數 <code>n</code> ，代表有 <code>n</code>  個點<br />接下來有 <code>n</code>  個整數，代表從 <code>1 ~ n</code>  的點的值<br />第二行有一個整數 <code>m</code> ，代表有 <code>m</code>  條邊<br />接下來有 <code>m</code>  行，每行有兩個整數，代表前者連接到後者 (單向)<br /> 最後有一個整數 <code>q</code> ，代表終點的數量<br />之後 <code>q</code>  個整數代表終點的位置</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出從 <code>1</code>  到終點的最短路徑<br />如果最短路徑或無法找到，則輸出 <code>?</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先儲存個點的值及建圖<br />接著以 <code>bellman</code>  演算法找到最短路徑，如果有負的值，則 push 至 <code>unordered_set</code>  內</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_set></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token operator">></span> edge<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> busyness<span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">int</span> dis<span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> store<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">void</span> <span class="token function">bellman</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>dis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> u <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>u<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>v<span class="token punctuation">,</span> w<span class="token punctuation">]</span> <span class="token operator">:</span> edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">!=</span> INT_MAX<span class="token punctuation">)</span> dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> u <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>u<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>v<span class="token punctuation">,</span> w<span class="token punctuation">]</span> <span class="token operator">:</span> edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>store<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment">// fast io </span></pre></td></tr><tr><td data-num="38"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">,</span> cases <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="46"></td><td><pre>edge<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>busyness<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>busyness<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token function">fill</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> dis <span class="token operator">+</span> <span class="token number">201</span><span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>store<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> tmp<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">>></span> tmp<span class="token punctuation">,</span> busyness<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">int</span> m<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>cin <span class="token operator">>></span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> u <span class="token operator">>></span> v<span class="token punctuation">,</span> edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> v<span class="token punctuation">,</span> <span class="token function">pow</span><span class="token punctuation">(</span>busyness<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">-</span> busyness<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token function">bellman</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Set #"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>cases <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token keyword">int</span> q<span class="token punctuation">,</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>cin <span class="token operator">>></span> q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>cin <span class="token operator">>></span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">||</span> dis<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">||</span> dis<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">==</span> INT_MAX<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"?\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> dis<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTA0NDkv">https://www.larrysprognotes.com/UVa%20-%2010449/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> bellman </tag>
            
            <tag> unordered set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 200 - Rare Order</title>
      <link href="UVa-200-Rare-Order/"/>
      <url>UVa-200-Rare-Order/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-200-rare-order"><a class="anchor" href="#題目-uva-200-rare-order">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTIwMA==">UVa 200 - Rare Order</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>有一本書，裡面的文字是英文字母，但排列字典序與英文字典序不同<br />求該書的字典序為何</p><hr /><p><strong>INPUT:</strong><br /> 輸入數個字串直到 <code>#</code> 結束</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出子串的字典序排序</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>將每兩個字串從第一個字元開始比對，當不同時</p><ol><li>將 <code>str2</code> push 到 <code>graph[str1]</code>  裡面</li><li>將 <code>path[str2]</code>  設為 <code>true</code> <br /> 接著跑 <code>dfs</code>  將字串照順序加入 <code>result</code></li></ol><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_set></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> graph<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">bool</span> check<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> path<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>check<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> graph<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>check<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>result<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>string str1<span class="token punctuation">,</span> str2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>cin <span class="token operator">>></span> str1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> us<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> str2 <span class="token operator">&amp;&amp;</span> str2 <span class="token operator">!=</span> <span class="token string">"#"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>us<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>us<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>graph<span class="token punctuation">[</span>str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>path<span class="token punctuation">[</span>str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>str1 <span class="token operator">=</span> str2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> us<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMjAwLw==">https://www.larrysprognotes.com/UVa%20-%20200/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> stack </tag>
            
            <tag> dfs </tag>
            
            <tag> topological sort </tag>
            
            <tag> unordered set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10986 - Sending email</title>
      <link href="UVa-10986-Sending-email/"/>
      <url>UVa-10986-Sending-email/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10986-sending-email"><a class="anchor" href="#題目-uva-10986-sending-email">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwOTg2">UVa 10986 - Sending email</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>有 <code>n</code>  台 SMTP 伺服器，以 <code>m</code>  條網路線互相連接<br />當一台 SMTP 伺服器向另一台 SMTP 伺服器傳送訊息時會產生延遲<br />求從 <code>s</code>  伺服器向 <code>v</code>  伺服器傳送訊息的最小延遲</p><hr /><p><strong>INPUT:</strong><br /> 第一行有一個整數 <code>T</code> ，代表有 <code>T</code>  筆測資<br />每筆測資第一行有四個整數 <code>n</code> 、 <code>m</code> 、 <code>s</code> 、 <code>t</code></p><ol><li><code>n</code>  代表有 <code>n</code>  台 SMTP 伺服器</li><li><code>m</code>  代表有 <code>m</code>  條網路線</li><li><code>s</code>  代表起點</li><li><code>t</code>  代表終點</li></ol><p>接下來有 <code>m</code>  行，每行有三個整數 <code>u</code> 、 <code>v</code> 、 <code>w</code> <br /> 代表 <code>u</code>  伺服器向 <code>v</code>  伺服器傳送訊息會延遲 <code>w</code></p><hr /><p><strong>OUTPUT:</strong><br /> 輸出從 <code>s</code>  伺服器向 <code>v</code>  伺服器傳送訊息的最小延遲<br />如果訊息無法送達則輸出 <code>unreachable</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>由於是無向圖，所以要建雙向的邊<br />以 <code>dijkstra</code>  演算法搭配 <code>priority_queue</code>  建出起點到每一個點的最小延遲<br />輸出終點的最小延遲</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> p<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>priority_queue<span class="token operator">&lt;</span>p<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>p<span class="token operator">>></span> pq<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span>p<span class="token operator">></span> <span class="token operator">></span> edge<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> vals<span class="token punctuation">[</span><span class="token number">20001</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">20001</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>vals<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> start <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">auto</span> <span class="token punctuation">[</span>val<span class="token punctuation">,</span> u<span class="token punctuation">]</span> <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>v<span class="token punctuation">,</span> w<span class="token punctuation">]</span> <span class="token operator">:</span> edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">int</span> tmp <span class="token operator">=</span> val <span class="token operator">+</span> w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>vals<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> vals<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> tmp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>vals<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> tmp<span class="token punctuation">,</span> v <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="40"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">,</span> cases <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> s <span class="token operator">>></span> t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="53"></td><td><pre>edge<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>vals<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token comment">// store data in both side</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>cin <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">>></span> w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> v<span class="token punctuation">,</span> w <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>edge<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> u<span class="token punctuation">,</span> w <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token comment">// dijkstra algorithm</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token function">dijkstra</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre></pre></td></tr><tr><td data-num="69"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case #"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>cases <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>vals<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"unreachable\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> vals<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTA5ODYv">https://www.larrysprognotes.com/UVa%20-%2010986/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> bfs </tag>
            
            <tag> priority queue </tag>
            
            <tag> dijkstra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 1112 - Mice and Maze</title>
      <link href="UVa-1112-Mice-and-Maze/"/>
      <url>UVa-1112-Mice-and-Maze/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-1112-mice-and-maze"><a class="anchor" href="#題目-uva-1112-mice-and-maze">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExMTI=">UVa 1112 - Mice and Maze</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>有一張有向圖，每個點走到另一個點都會花費時間<br />每個點走到終點都有一條最短路徑<br />求有多少點能在時間限制內走到終點</p><hr /><p><strong>INPUT:</strong><br /> 第一行有一個整數 <code>T</code> ，代表有 <code>T</code>  筆測資<br />每筆測資第一行有四個整數 <code>N</code> 、 <code>End</code> 、 <code>Time</code> 、 <code>M</code></p><ol><li><code>N</code>  代表有 <code>N</code>  個點</li><li><code>End</code>  代表終點</li><li><code>Time</code>  代表時間限制</li><li><code>M</code>  代表有幾個邊</li></ol><p>接下來有 <code>M</code>  行，每行有三個整數 <code>u</code> 、 <code>v</code> 、 <code>w</code> <br /> 代表 <code>u</code>  點及 <code>v</code>  點間有一條長 <code>w</code>  的邊</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出能在時間限制內走到終點的點的數量</p><div class="note info"><p>終點也算一個點</p></div><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>如果從每個點開始走到終點，會很麻煩，所以改為從終點開始走 (存 <code>edge</code>  的時候反向存)<br /> 以 <code>dijkstra</code>  演算法搭配 <code>priority_queue</code>  建出終點到每一個點的最小路徑<br />最後再判斷每個點的最小路徑有沒有在時間限制內</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> p<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span>p<span class="token operator">></span> <span class="token operator">></span> edge<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>priority_queue<span class="token operator">&lt;</span>p<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>p<span class="token operator">>></span> pq<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> vals<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">int</span> vis<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token keyword">int</span> End<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>vals<span class="token punctuation">[</span>End<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token punctuation">,</span> End <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">auto</span> <span class="token punctuation">[</span>val<span class="token punctuation">,</span> u<span class="token punctuation">]</span> <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>v<span class="token punctuation">,</span> w<span class="token punctuation">]</span> <span class="token operator">:</span> edge<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">int</span> tmp <span class="token operator">=</span> val <span class="token operator">+</span> w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>vals<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> vals<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> tmp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>vals<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> tmp<span class="token punctuation">,</span> v <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="40"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> End<span class="token punctuation">,</span> Time<span class="token punctuation">,</span> M<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>cin <span class="token operator">>></span> N <span class="token operator">>></span> End <span class="token operator">>></span> Time <span class="token operator">>></span> M<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="53"></td><td><pre>edge<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">101</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Time <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>M<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>cin <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">>></span> w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>edge<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> u<span class="token punctuation">,</span> w <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token comment">// dijkstra algorithm</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token function">dijkstra</span><span class="token punctuation">(</span>End<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>vals<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> Time<span class="token punctuation">)</span> <span class="token operator">++</span>count<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTExMi8=">https://www.larrysprognotes.com/UVa%20-%201112/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> bfs </tag>
            
            <tag> priority queue </tag>
            
            <tag> dijkstra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 929 - Number Maze</title>
      <link href="UVa-929-Number-Maze/"/>
      <url>UVa-929-Number-Maze/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-929-number-maze"><a class="anchor" href="#題目-uva-929-number-maze">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTkyOQ==">UVa 929 - Number Maze</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給你一張 <code>N * M</code>  的 map，每格都會有值<br />求起點到終點 (左上到右下) 的最小數字和</p><hr /><p><strong>INPUT:</strong><br /> 第一行有一個整數 <code>T</code> ，代表有 <code>T</code>  筆測資<br />每筆測資第一行有兩個整數 <code>N</code> 、 <code>M</code> ，代表 map 的大小<br />接著會有 <code>N</code>  行，每行有 <code>M</code>  個整數，代表 map 的值</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出從起點到終點 (左上到右下) 的最小數字和</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先建 <code>map</code> ，接著以 <code>dijkstra</code>  演算法搭配 <code>priority_queue</code>  建出起點到每一個點的最小路徑<br />最後輸出終點的值即可</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tuple></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">typedef</span> tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> tp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> M<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">int</span> map<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> vals<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">bool</span> vis<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> d<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>priority_queue<span class="token operator">&lt;</span> tp<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>tp<span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>tp<span class="token operator">></span> <span class="token operator">></span> pq<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">void</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>vals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_tuple</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">auto</span> <span class="token punctuation">[</span>val<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">int</span> nx <span class="token operator">=</span> x <span class="token operator">+</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">int</span> ny <span class="token operator">=</span> y <span class="token operator">+</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>nx <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nx <span class="token operator">&lt;</span> N <span class="token operator">&amp;&amp;</span> ny <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ny <span class="token operator">&lt;</span> M <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">int</span> tmp <span class="token operator">=</span> val <span class="token operator">+</span> map<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>vals<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> vals<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span> <span class="token operator">></span> tmp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>vals<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_tuple</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> nx<span class="token punctuation">,</span> ny<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> vals<span class="token punctuation">[</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>M <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="50"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>cin <span class="token operator">>></span> N <span class="token operator">>></span> M<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token function">memset</span><span class="token punctuation">(</span>vals<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token comment">// store data in map</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> val<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>cin <span class="token operator">>></span> val<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token comment">// dijkstra algorithm</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token function">dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwOTI5Lw==">https://www.larrysprognotes.com/UVa%20-%20929/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> bfs </tag>
            
            <tag> priority queue </tag>
            
            <tag> dijkstra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 12442 - Forwarding Emails</title>
      <link href="UVa-12442-Forwarding-Emails/"/>
      <url>UVa-12442-Forwarding-Emails/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-12442-forwarding-emails"><a class="anchor" href="#題目-uva-12442-forwarding-emails">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEyNDQy">UVa 12442 - Forwarding Emails</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>一個小鎮裡面，每一個人都會寄信給另外一個人<br />求第一封信寄給誰能讓最多人看到</p><hr /><p><strong>INPUT:</strong><br /> 第一行有一個整數 <code>T</code> ，代表有 <code>T</code>  筆測資<br />每筆測資第一行有一個整數 <code>N</code> ，代表人數<br />接下來有 <code>N</code>  行，每行有兩個整數 <code>u</code>  和 <code>v</code> ，代表 <code>u</code>  寄信給 <code>v</code></p><hr /><p><strong>OUTPUT:</strong><br /> 輸出第一封信寄給誰能讓最多人看到<br /> (如果數量一樣則取編號小的)</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>跑 <code>dfs</code> ，儲存寄信數量及第一個人的編號<br />接著判斷是否為最大數量</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> sent<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> check<span class="token punctuation">,</span> sum<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> times<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token operator">++</span>times<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>sum<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> check<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>check<span class="token punctuation">[</span>sent<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>sent<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">,</span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>cin <span class="token operator">>></span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>sent<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>sum<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">,</span> sent<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">int</span> ftimes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">int</span> fnum <span class="token operator">=</span> sent<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre>check<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>check<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>times <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token function">dfs</span><span class="token punctuation">(</span>sent<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>times <span class="token operator">></span> ftimes <span class="token operator">||</span> <span class="token punctuation">(</span>times <span class="token operator">==</span> ftimes <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> fnum<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>fnum <span class="token operator">=</span> j<span class="token punctuation">,</span> ftimes <span class="token operator">=</span> times<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> fnum <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTI0NDIv">https://www.larrysprognotes.com/UVa%20-%2012442/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11906 - Knight in a War Grid</title>
      <link href="UVa-11906-Knight-in-a-War-Grid/"/>
      <url>UVa-11906-Knight-in-a-War-Grid/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11906-knight-in-a-war-grid"><a class="anchor" href="#題目-uva-11906-knight-in-a-war-grid">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExOTA2">UVa 11906 - Knight in a War Grid</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>有一個騎士在 <code>R*C</code>  的棋盤上移動，每次移動 <code>(±M, ±N)</code>  及 <code>(±N, ±M)</code>  格，有水則不能移動<br />若一個點能從偶數個點移動過來，則標記為 <code>even</code> <br /> 若一個點能從奇數個點移動過來，則標記為 <code>odd</code> <br /> 求 <code>even</code>  及 <code>odd</code>  的數量</p><hr /><p><strong>INPUT:</strong><br /> 第一行有一個整數 <code>T</code> ，代表有 <code>T</code>  筆測資<br />每筆測資第一行有四個整數 <code>R</code> 、 <code>C</code> 、 <code>M</code> 、 <code>N</code></p><ol><li><code>R</code>  代表有幾行</li><li><code>C</code>  代表有幾列</li><li><code>M</code>  和 <code>N</code>  代表每次移動的距離， <code>(±M, ±N)</code>  及 <code>(±N, ±M)</code></li></ol><p>第二行有一個整數 <code>W</code> ，代表有水的格子的數量<br />接下來有 <code>W</code>  行，代表有水的格子的座標</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>even</code>  及 <code>odd</code>  的數量</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>跑 <code>dfs</code> ，紀錄每個點被走到的次數<br />最後再計算 <code>even</code>  及 <code>odd</code>  的數量</p><div class="note info"><p>以 <code>n</code>  儲存 8 種移動法</p><ol><li>如果 <code>M</code>  與 <code>N</code>  其中一項為 <code>0</code> ，則只需要移動前 4 種</li><li>如果 <code>M = N</code> ，則只需要移動前兩種及後兩種</li></ol></div><div class="note info"><p>將有水的格子設為 <code>-1</code></p></div><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> square<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>vector<span class="token operator">&lt;</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> R<span class="token punctuation">,</span> C<span class="token punctuation">,</span> M<span class="token punctuation">,</span> N<span class="token punctuation">,</span> W<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>square<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">++</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> nx<span class="token punctuation">,</span> ny<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>nx <span class="token operator">=</span> x <span class="token operator">+</span> n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>ny <span class="token operator">=</span> y <span class="token operator">+</span> n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>nx <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ny <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nx <span class="token operator">&lt;</span> R <span class="token operator">&amp;&amp;</span> ny <span class="token operator">&lt;</span> C <span class="token operator">&amp;&amp;</span> square<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span> ny<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">||</span> <span class="token operator">!</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">==</span> n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span> i <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">,</span> Case <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>cin <span class="token operator">>></span> R <span class="token operator">>></span> C <span class="token operator">>></span> M <span class="token operator">>></span> N <span class="token operator">>></span> W<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>square<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>square<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>n<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>n<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>n<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token operator">-</span>M<span class="token punctuation">,</span> <span class="token operator">-</span>N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>n<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> M<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>n<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token operator">-</span>N<span class="token punctuation">,</span> <span class="token operator">-</span>M<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>n<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token operator">-</span>N<span class="token punctuation">,</span> M<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>n<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> <span class="token operator">-</span>M<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>n<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token operator">-</span>M<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>n<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> <span class="token operator">-</span>N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>W<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>square<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token operator">++</span>square<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token keyword">int</span> odd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> even <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> square<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> j <span class="token operator">:</span> i<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> j <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token operator">++</span>odd <span class="token operator">:</span> <span class="token operator">++</span>even<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>Case <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> even <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> odd <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTE5MDYv">https://www.larrysprognotes.com/UVa%20-%2011906/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Structures UVa Collections</title>
      <link href="Data-Structures-UVa-Collections/"/>
      <url>Data-Structures-UVa-Collections/</url>
      
        <content type="html"><![CDATA[<h1 id="uva-problems-involving-c-stl-map"><a class="anchor" href="#uva-problems-involving-c-stl-map">#</a> UVa problems Involving C++ STL map:</h1><p><a href="https://www.pinghenotes.com/UVa-10226-Hardwood-Species/">UVa 10226 - Hardwood Species</a><br /><a href="https://www.pinghenotes.com/UVa-10282-Babelfish/">UVa 10282 - Babelfish</a><br /><a href="https://www.pinghenotes.com/UVa-11286-Conformity/">UVa 11286 – Conformity</a></p><h1 id="uva-problems-involving-c-stl-set"><a class="anchor" href="#uva-problems-involving-c-stl-set">#</a> UVa problems Involving C++ STL set:</h1><p><a href="https://www.pinghenotes.com/UVa-978-Lemmings-Battle/">UVa 978 - Lemmings Battle!</a><br /><a href="https://www.pinghenotes.com/UVa-11136-Hoax-or-what/">UVa 11136 - Hoax or what</a><br /><a href="https://www.pinghenotes.com/UVa-11572-Unique-Snowflakes/">UVa 11572 - Unique Snowflakes</a></p><h1 id="uva-problems-involving-c-stl-list-and-deque"><a class="anchor" href="#uva-problems-involving-c-stl-list-and-deque">#</a> UVa problems Involving C++ STL list and deque:</h1><p><a href="https://www.pinghenotes.com/UVa-11988-Broken-Keyboard-a-k-a-Beiju-Text/">UVa 11988 - Broken Keyboard (a.k.a. Beiju Text)</a><br /><a href="https://www.pinghenotes.com/UVa-12207-That-is-Your-Queue/">UVa 12207 - That is Your Queue</a></p><h1 id="uva-problems-involving-c-stl-priority_queue"><a class="anchor" href="#uva-problems-involving-c-stl-priority_queue">#</a> UVa problems Involving C++ STL priority_queue:</h1><p><a href="https://www.pinghenotes.com/UVa-1203-Argus/">UVa 1203 - Argus</a><br /><a href="https://www.pinghenotes.com/UVa-10954-Add-All/">UVa 10954 - Add All</a><br /><a href="https://www.pinghenotes.com/UVa-11995-I-Can-Guess-the-Data-Structure/">UVa 11995 - I Can Guess the Data Structure!</a></p><h1 id="uva-problems-involving-c-stl-stack"><a class="anchor" href="#uva-problems-involving-c-stl-stack">#</a> UVa problems Involving C++ STL stack:</h1><p><a href="https://www.pinghenotes.com/UVa-514-Rails/">UVa 514 - Rails</a><br /><a href="https://www.pinghenotes.com/UVa-732-Anagrams-by-Stack/">UVa 732 - Anagrams by Stack</a><br /><a href="https://www.pinghenotes.com/UVa-1062-Containers/">UVa 1062 – Containers</a><br /><a href="https://www.pinghenotes.com/UVa-673-Parentheses-Balance/">UVa 673 - Parentheses Balance</a></p><h1 id="uva-problems-involving-c-stl-queue"><a class="anchor" href="#uva-problems-involving-c-stl-queue">#</a> UVa problems Involving C++ STL queue:</h1><p><a href="https://www.pinghenotes.com/UVa-10172-The-Lonesome-Cargo-Distributor/">UVa 10172 - The Lonesome Cargo Distributor</a><br /><a href="https://www.pinghenotes.com/UVa-10901-Ferry-Loading-III/">UVa 10901 - Ferry Loading III</a><br /><a href="https://www.pinghenotes.com/UVa-11034-Ferry-Loading-IV/">UVa 11034 - Ferry Loading IV</a></p><h1 id="dfs"><a class="anchor" href="#dfs">#</a> DFS:</h1><p><a href="https://www.pinghenotes.com/UVa-168-Theseus-and-the-Minotaur/">UVa 168 - Theseus and the Minotaur</a><br /><a href="https://www.pinghenotes.com/UVa-11906-Knight-in-a-War-Grid/">UVa 11906 - Knight in a War Grid</a><br /><a href="https://www.pinghenotes.com/UVa-12442-Forwarding-Emails/">UVa 12442 - Forwarding Emails</a></p><h1 id="topological-sort"><a class="anchor" href="#topological-sort">#</a> Topological Sort:</h1><p><a href="https://www.pinghenotes.com/UVa-200-Rare-Order/">UVa 200 - Rare Order</a><br /><a href="https://www.pinghenotes.com/UVa-872-Ordering/">UVa 872 - Ordering</a><br /><a href="https://www.pinghenotes.com/UVa-10305-Ordering-Tasks/">UVa 10305 - Ordering Tasks</a></p><h1 id="finding-articulation-points-bridges"><a class="anchor" href="#finding-articulation-points-bridges">#</a> Finding Articulation Points / Bridges:</h1><p><a href="https://www.pinghenotes.com/UVa-315-Network/">UVa 315 - Network</a><br /><a href="https://www.pinghenotes.com/UVa-796-Critical-Links/">UVa 796 - Critical Links</a><br /><a href="https://www.pinghenotes.com/UVa-10765-Doves-and-Bombs/">UVa 10765 - Doves and Bombs</a></p><h1 id="finding-biconnected-bridge-connected-components"><a class="anchor" href="#finding-biconnected-bridge-connected-components">#</a> Finding Biconnected / Bridge Connected Components:</h1><p><a href="https://www.pinghenotes.com/UVa-1108-Mining-Your-Own-Business/">UVa 1108 - Mining Your Own Business</a><br /><a href="https://www.pinghenotes.com/UVa-10972-RevolC-FaeLoN/">UVa 10972 - RevolC FaeLoN</a></p><h1 id="finding-strongly-connected-components"><a class="anchor" href="#finding-strongly-connected-components">#</a> Finding Strongly Connected Components:</h1><p><a href="https://www.pinghenotes.com/UVa-247-Calling-Circles/">UVa 247 - Calling Circles</a><br /><a href="https://www.pinghenotes.com/UVa-11504-Dominos/">UVa 11504 - Dominos</a><br /><a href="https://www.pinghenotes.com/UVa-11838-Come-and-Go/">UVa 11838 - Come and Go</a></p><h1 id="breadth-first-search"><a class="anchor" href="#breadth-first-search">#</a> Breadth-First Search:</h1><p><a href="https://www.pinghenotes.com/UVa-429-Word-Transformation/">UVa 429 - Word Transformation</a><br /><a href="https://www.pinghenotes.com/UVa-924-Spreading-the-News/">UVa 924 - Spreading the News</a><br /><a href="https://www.pinghenotes.com/UVa-10653-Bombs-NO-they-are-Mines/">UVa 10653 - Bombs! NO they are Mines!</a></p><h1 id="minimum-spanning-tree"><a class="anchor" href="#minimum-spanning-tree">#</a> Minimum Spanning Tree:</h1><p><a href="https://www.pinghenotes.com/UVa-11228-Transportation-System/">UVa 11228 - Transportation System</a><br /><a href="https://www.pinghenotes.com/UVa-11631-Dark-Roads/">UVa 11631 - Dark Roads</a><br /><a href="https://www.pinghenotes.com/UVa-11747-Heavy-Cycle-Edges/">UVa 11747 - Heavy Cycle Edges</a></p><h1 id="dijkstras-algorithm"><a class="anchor" href="#dijkstras-algorithm">#</a> Dijkstra’s Algorithm:</h1><p><a href="https://www.pinghenotes.com/UVa-929-Number-Maze/">UVa 929 - Number Maze</a><br /><a href="https://www.pinghenotes.com/UVa-1112-Mice-and-Maze/">UVa 1112 - Mice and Maze</a><br /><a href="https://www.pinghenotes.com/UVa-10986-Sending-email/">UVa 10986 - Sending emai</a></p><h1 id="the-bellman-ford-algorithm"><a class="anchor" href="#the-bellman-ford-algorithm">#</a> The Bellman-Ford Algorithm:</h1><p><a href="https://www.pinghenotes.com/UVa-558-Wormholes/">UVa 558 - Wormholes</a><br /><a href="https://www.pinghenotes.com/UVa-10449-Traffic/">UVa 10449 - Traffic</a><br /><a href="https://www.pinghenotes.com/UVa-10557-XYZZY/">UVa 10557 – XYZZY</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11747 - Heavy Cycle Edges</title>
      <link href="UVa-11747-Heavy-Cycle-Edges/"/>
      <url>UVa-11747-Heavy-Cycle-Edges/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11747-heavy-cycle-edges"><a class="anchor" href="#題目-uva-11747-heavy-cycle-edges">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExNzQ3">UVa 11747 - Heavy Cycle Edges</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給一個無向圖，其中有數個點及邊<br />連通使一點能走到任意點 (以最小的 weight)<br /> 求多餘的邊的 weight (會造成 circle 的邊的 weight)</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資第一行有兩個整數 <code>n</code>  和 <code>m</code></p><ol><li><code>n</code>  代表點的數量</li><li><code>m</code>  代表邊的數量</li></ol><p>接下來有 <code>m</code>  行，每行有三個整數 <code>u</code> 、 <code>v</code> 、 <code>w</code> <br /> 代表 <code>u</code>  點及 <code>v</code>  點間有一條 weight 為 <code>w</code>  的邊</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出會造成 circle 的邊的 weight<br /> 如果沒有則輸出 <code>forest</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先將所有點的編號及 weight 存入 <code>edge</code> <br /> 接著以 <code>kruskcal</code>  演算法，先對 weight 進行 <code>sort</code> ，再用 <code>union_find</code>  演算法判斷是否可連通<br />將不能連通的邊依序輸出</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tuple></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>vector<span class="token operator">&lt;</span> tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> edge<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> parents<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ranks<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> s1<span class="token punctuation">,</span> tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> s2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">return</span> get<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">></span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> get<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">></span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">bool</span> <span class="token function">union_find</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">// find root of u and v</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>u <span class="token operator">!=</span> parents<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> u <span class="token operator">=</span> parents<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> parents<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> v <span class="token operator">=</span> parents<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token comment">// circle</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ranks<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">></span> ranks<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> parents<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ranks<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> ranks<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> parents<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">else</span> parents<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">,</span> <span class="token operator">++</span>ranks<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">void</span> <span class="token function">kruskcal</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token function">sort</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> edge<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token keyword">bool</span> forest <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">]</span> <span class="token operator">:</span> edge<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">union_find</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>forest<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        forest <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>forest<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"forest"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">,</span> n <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token comment">// init</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        edge<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        parents<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        ranks<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> parents<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre>        <span class="token comment">// store side and weight</span></pre></td></tr><tr><td data-num="67"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>            <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>            cin <span class="token operator">>></span> u <span class="token operator">>></span> v <span class="token operator">>></span> w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>            edge<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>        </pre></td></tr><tr><td data-num="74"></td><td><pre>        <span class="token comment">// kruskcal algorithm</span></pre></td></tr><tr><td data-num="75"></td><td><pre>        <span class="token function">kruskcal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="77"></td><td><pre></pre></td></tr><tr><td data-num="78"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTE3NDcv">https://www.larrysprognotes.com/UVa%20-%2011747/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> union find </tag>
            
            <tag> kruskcal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11631 - Dark Roads</title>
      <link href="UVa-11631-Dark-Roads/"/>
      <url>UVa-11631-Dark-Roads/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11631-dark-roads"><a class="anchor" href="#題目-uva-11631-dark-roads">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExNjMx">UVa 11631 - Dark Roads</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>一個城市裡有很多的路相連，道路上每一公尺，路燈的 cost 為 1<br /> 找出每個路口能到任意其他路口，最多能減少多少 cost 的路燈<br /> (整條路每一公尺有一個路燈)</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資第一行有兩個整數 <code>m</code>  和 <code>n</code></p><ol><li><code>m</code>  代表路口的數量</li><li><code>n</code>  代表道路的數量</li></ol><p>接下來有 <code>n</code>  行，每行有三個整數 <code>x</code> 、 <code>y</code> 、 <code>z</code> <br /> 代表 <code>x</code>  與 <code>y</code>  路口間有一條長 <code>z</code>  的路</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出最多能減少多少 cost 的路燈</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先將所有路口的編號及 cost 存入 <code>edge</code> <br /> 接著以 <code>kruskcal</code>  演算法，先對距離進行 <code>sort</code> ，再用 <code>union_find</code>  演算法判斷是否可連通<br />以總 cost，每次減掉最短路徑的 cost，即為答案</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tuple></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>vector<span class="token operator">&lt;</span> tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> edge<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> parents<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ranks<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> cost<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> r1<span class="token punctuation">,</span> tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> r2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">return</span> get<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">></span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> get<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">></span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">bool</span> <span class="token function">union_find</span><span class="token punctuation">(</span><span class="token keyword">int</span> r1<span class="token punctuation">,</span> <span class="token keyword">int</span> r2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// find root of r1 and r2</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>r1 <span class="token operator">!=</span> parents<span class="token punctuation">[</span>r1<span class="token punctuation">]</span><span class="token punctuation">)</span> r1 <span class="token operator">=</span> parents<span class="token punctuation">[</span>r1<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>r2 <span class="token operator">!=</span> parents<span class="token punctuation">[</span>r2<span class="token punctuation">]</span><span class="token punctuation">)</span> r2 <span class="token operator">=</span> parents<span class="token punctuation">[</span>r2<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">// circle</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>r1 <span class="token operator">==</span> r2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ranks<span class="token punctuation">[</span>r1<span class="token punctuation">]</span> <span class="token operator">></span> ranks<span class="token punctuation">[</span>r2<span class="token punctuation">]</span><span class="token punctuation">)</span> parents<span class="token punctuation">[</span>r2<span class="token punctuation">]</span> <span class="token operator">=</span> r1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ranks<span class="token punctuation">[</span>r2<span class="token punctuation">]</span> <span class="token operator">></span> ranks<span class="token punctuation">[</span>r1<span class="token punctuation">]</span><span class="token punctuation">)</span> parents<span class="token punctuation">[</span>r1<span class="token punctuation">]</span> <span class="token operator">=</span> r2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">else</span> parents<span class="token punctuation">[</span>r2<span class="token punctuation">]</span> <span class="token operator">=</span> r1<span class="token punctuation">,</span> <span class="token operator">++</span>ranks<span class="token punctuation">[</span>r1<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">int</span> <span class="token function">kruskcal</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token function">sort</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> edge<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">int</span> side <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">,</span> w<span class="token punctuation">]</span> <span class="token operator">:</span> edge<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>side <span class="token operator">==</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token comment">// union find algorithm</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">union_find</span><span class="token punctuation">(</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>cost <span class="token operator">-=</span> w<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token operator">++</span>side<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">return</span> cost<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="57"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> m <span class="token operator">>></span> n<span class="token punctuation">,</span> m <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="65"></td><td><pre>edge<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>parents<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>ranks<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> parents<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>cost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token comment">// store roads in edges</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>cin <span class="token operator">>></span> x <span class="token operator">>></span> y <span class="token operator">>></span> z<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>cost <span class="token operator">+=</span> z<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>edge<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="79"></td><td><pre></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token comment">// kruskcal algorithm</span></pre></td></tr><tr><td data-num="81"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token function">kruskcal</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="83"></td><td><pre></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTE2MzEv">https://www.larrysprognotes.com/UVa%20-%2011631/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> union find </tag>
            
            <tag> kruskcal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11228 - Transportation System</title>
      <link href="UVa-11228-Transportation-System/"/>
      <url>UVa-11228-Transportation-System/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11228-transportation-system"><a class="anchor" href="#題目-uva-11228-transportation-system">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExMjI4">UVa 11228 - Transportation System</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>有一個國家，它有許多的城市，但這些城市間沒有道路相連<br />政府想改變這個狀況，使一個城市可以到任意一個城市<br />一般距離城市間以道路相連，但如果兩個城市間的距離大於 <code>r</code> ，則視為不同 state，以鐵路相連<br />求這個國家總共有幾個 state，需要建造多長的道路及鐵路</p><hr /><p><strong>INPUT:</strong><br /> 第一行有一個整數 <code>T</code> ，代表有 <code>T</code>  筆測資<br />每筆測資第一行有兩個整數 <code>n</code>  和 <code>r</code></p><ol><li><code>n</code>  代表城市的數量</li><li><code>r</code>  代表同個 state 的最遠距離<br />接下來有 <code>n</code>  行，代表城市的座標</li></ol><hr /><p><strong>OUTPUT:</strong><br /> 輸出 state 的數量、公路長度、鐵路長度</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先將所有的每兩個城市建一個邊並算出距離，<br />接著以 <code>kruskcal</code>  演算法，先對距離進行 <code>sort</code> ，再用 <code>union_find</code>  演算法判斷是否可連通</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tuple></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>vector<span class="token operator">&lt;</span> tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">></span> <span class="token operator">></span> edge<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> parents<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ranks<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">int</span> cases <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">double</span> <span class="token function">dis</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> edge1<span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> edge2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span>edge2<span class="token punctuation">.</span>first <span class="token operator">-</span> edge1<span class="token punctuation">.</span>first<span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span>edge2<span class="token punctuation">.</span>second <span class="token operator">-</span> edge1<span class="token punctuation">.</span>second<span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">//compare distance of every two cities</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">></span> edge1<span class="token punctuation">,</span> tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">></span> edge2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">return</span> get<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">></span><span class="token punctuation">(</span>edge1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> get<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">></span><span class="token punctuation">(</span>edge2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">bool</span> <span class="token function">union_find</span><span class="token punctuation">(</span><span class="token keyword">int</span> c1<span class="token punctuation">,</span> <span class="token keyword">int</span> c2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">// find root of c1 and c2</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>c1 <span class="token operator">!=</span> parents<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">)</span> c1 <span class="token operator">=</span> parents<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>c2 <span class="token operator">!=</span> parents<span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token punctuation">)</span> c2 <span class="token operator">=</span> parents<span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">// circle</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ranks<span class="token punctuation">[</span>c1<span class="token punctuation">]</span> <span class="token operator">></span> ranks<span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token punctuation">)</span> parents<span class="token punctuation">[</span>c2<span class="token punctuation">]</span> <span class="token operator">=</span> c1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ranks<span class="token punctuation">[</span>c2<span class="token punctuation">]</span> <span class="token operator">></span> ranks<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">)</span> parents<span class="token punctuation">[</span>c1<span class="token punctuation">]</span> <span class="token operator">=</span> c2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">else</span> parents<span class="token punctuation">[</span>c2<span class="token punctuation">]</span> <span class="token operator">=</span> c1<span class="token punctuation">,</span> <span class="token operator">++</span>ranks<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">void</span> <span class="token function">kruskcal</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token comment">// sort: distance small to big</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token function">sort</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> edge<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">int</span> side <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">double</span> raildis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">double</span> roaddis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> dis<span class="token punctuation">]</span> <span class="token operator">:</span> edge<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>side <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token comment">// union_find algorithm</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">union_find</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>dis <span class="token operator">></span> r<span class="token punctuation">)</span> raildis <span class="token operator">+=</span> dis<span class="token punctuation">,</span> <span class="token operator">++</span>state<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">else</span> roaddis <span class="token operator">+=</span> dis<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token operator">++</span>side<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre></pre></td></tr><tr><td data-num="64"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case #"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>cases <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> state <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>roaddis <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>raildis <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">,</span> r<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>cin <span class="token operator">>></span> n <span class="token operator">>></span> r<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="80"></td><td><pre></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="82"></td><td><pre>edge<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>parents<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>ranks<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> parents<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token comment">// store cities</span></pre></td></tr><tr><td data-num="88"></td><td><pre>vector<span class="token operator">&lt;</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> city<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>city<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="94"></td><td><pre></pre></td></tr><tr><td data-num="95"></td><td><pre><span class="token comment">// connect every two cities and calculate the distance</span></pre></td></tr><tr><td data-num="96"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="97"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="98"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="99"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="100"></td><td><pre>edge<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_tuple</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token function">dis</span><span class="token punctuation">(</span>city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> city<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="102"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="103"></td><td><pre></pre></td></tr><tr><td data-num="104"></td><td><pre><span class="token comment">// kruskcal algorithm</span></pre></td></tr><tr><td data-num="105"></td><td><pre><span class="token function">kruskcal</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="106"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="107"></td><td><pre></pre></td></tr><tr><td data-num="108"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="109"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTEyMjgv">https://www.larrysprognotes.com/UVa%20-%2011228/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> union find </tag>
            
            <tag> kruskcal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 168 - Theseus and the Minotaur</title>
      <link href="UVa-168-Theseus-and-the-Minotaur/"/>
      <url>UVa-168-Theseus-and-the-Minotaur/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-168-theseus-and-the-minotaur"><a class="anchor" href="#題目-uva-168-theseus-and-the-minotaur">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTE2OA==">UVa 168 - Theseus and the Minotaur</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>一個勇者正在迷宮中追逐怪物，怪物會怕光線<br />勇者每隔一段距離就會插上一個蠟燭，怪物就不會走到那裡<br />持續下去，怪物最終會被困在一個地方<br />求所有蠟燭的位置及怪物最後被困住的位置<br /> (怪物會優先往字母小 (a) 的地方走)</p><hr /><p><strong>INPUT:</strong><br /> 每筆資料會先有一個字串，代表能走的路<br />接著會有兩個字元 <code>m</code> 、 <code>t</code>  和一個整數 <code>k</code></p><ol><li><code>m</code>  代表怪物一開始的位置</li><li><code>t</code>  代表勇者一開始的位置</li><li><code>k</code>  代表每走幾步會插一個蠟燭<br />當字串為 <code>#</code> 時結束</li></ol><hr /><p><strong>OUTPUT:</strong><br /> 有插蠟燭的位置及怪物最後被困住的位置</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先將地圖建表， <code>:</code>  前的位置指到 <code>:</code>  後的位置<br />接著跑 <code>dfs</code> ，用 <code>step</code>  記步，當 <code>step = k</code>  時，輸出當前位置並在 <code>light</code>  中標為 <code>true</code> <br /> 當下一步為勇者的位置及蠟燭未點亮，呼叫下一層 <code>dfs</code> <br /> 最後輸出怪物當前位置</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> <span class="token operator">></span> graph<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> light<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> step<span class="token punctuation">,</span> k<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">char</span> m<span class="token punctuation">,</span> <span class="token keyword">char</span> t<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>step <span class="token operator">&amp;&amp;</span> step <span class="token operator">%</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">,</span> light<span class="token punctuation">[</span>t<span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>graph<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> t <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>light<span class="token punctuation">[</span>graph<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token operator">++</span>step<span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"/"</span> <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>string in<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">char</span> m<span class="token punctuation">,</span> t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> in <span class="token operator">&amp;&amp;</span> in <span class="token operator">!=</span> <span class="token string">"#"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>graph<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>light<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>cin <span class="token operator">>></span> m <span class="token operator">>></span> t <span class="token operator">>></span> k<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> in<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">':'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">auto</span> p <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">';'</span> <span class="token operator">&amp;&amp;</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span> graph<span class="token punctuation">[</span>in<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token function">dfs</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTY4Lw==">https://www.larrysprognotes.com/UVa%20-%20168/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11034 - Ferry Loading IV</title>
      <link href="UVa-11034-Ferry-Loading-IV/"/>
      <url>UVa-11034-Ferry-Loading-IV/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11034-ferry-loading-iv"><a class="anchor" href="#題目-uva-11034-ferry-loading-iv">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExMDM0">UVa 11034 - Ferry Loading IV</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>有車子想要渡河，目前唯一渡河的方式為搭船<br />船只有一艘且長度有限，求所有車子到達對岸時船的趟數</p><hr /><p><strong>INPUT:</strong><br /> 第一行有一個整數 <code>c</code> ，代表有 <code>c</code>  筆資料<br />每筆測資第一行有兩個整數 <code>l</code> 、 <code>m</code></p><ol><li><code>l</code>  代表船的長度</li><li><code>m</code>  代表等待過河的車子數量<br />接下來有 <code>m</code>  行，每行有一個整數和一個字串</li><li>整數代表車子的長度</li><li>字串代表它處於河的哪一邊</li></ol><hr /><p><strong>OUTPUT:</strong><br /> 將所有車子運送到對岸，船需要開的趟數</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>以兩個 <code>queue</code>  分別存左岸及右岸的車子的長度<br />接著跑迴圈直到兩個 <code>queue</code>  都為空<br />每趟運送在長度限制內運送愈多愈好</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">int</span> c<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">,</span> length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>string side<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>cin <span class="token operator">>></span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>c<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> L<span class="token punctuation">,</span> R<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">auto</span> cur <span class="token operator">=</span> <span class="token operator">&amp;</span>L<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>cin <span class="token operator">>></span> l <span class="token operator">>></span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>l <span class="token operator">*=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>cin <span class="token operator">>></span> length <span class="token operator">>></span> side<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>side <span class="token operator">==</span> <span class="token string">"left"</span> <span class="token operator">?</span> L<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token operator">:</span> R<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>R<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token operator">-></span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sum <span class="token operator">+</span> cur<span class="token operator">-></span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> l<span class="token punctuation">)</span> sum <span class="token operator">+=</span> cur<span class="token operator">-></span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cur<span class="token operator">-></span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token operator">++</span>time<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>cur <span class="token operator">=</span> <span class="token operator">*</span>cur <span class="token operator">==</span> L <span class="token operator">?</span> <span class="token operator">&amp;</span>R <span class="token operator">:</span> <span class="token operator">&amp;</span>L<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> time <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTEwMzQv">https://www.larrysprognotes.com/UVa%20-%2011034/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10901 - Ferry Loading III</title>
      <link href="UVa-10901-Ferry-Loading-III/"/>
      <url>UVa-10901-Ferry-Loading-III/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10901-ferry-loading-iii"><a class="anchor" href="#題目-uva-10901-ferry-loading-iii">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwOTAx">UVa 10901 - Ferry Loading III</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>有車子想要渡河，目前唯一渡河的方式為搭船<br />船只有一艘且容量有限，求所有車子到達對岸的時間</p><hr /><p><strong>INPUT:</strong><br /> 第一行有一個整數 <code>c</code> ，代表有 <code>c</code>  筆資料<br />每筆測資第一行有三個整數 <code>n</code> 、 <code>t</code> 、 <code>m</code></p><ol><li><code>n</code>  代表船能容納的車子數量</li><li><code>t</code>  代表船開到對岸的時間</li><li><code>m</code>  代表等待過河的車子數量<br />接下來有 <code>m</code>  行，每行有一個整數和一個字串，整數代表車子到岸邊的時間，字串代表它處於河的哪一邊</li></ol><hr /><p><strong>OUTPUT:</strong><br /> 輸出每輛車子到達對岸的時間<br />每筆資料以空行隔開</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>以兩個 <code>queue</code>  分別存左岸及右岸的車子，存順序及到達時間<br />接著跑迴圈直到兩個 <code>queue</code>  都為空</p><ul><li>如果左岸為空，船直接移動到右岸</li><li>如果右岸為空，船直接移動到左岸</li><li>如果皆不為空，則判斷最早到的車子並移動到相應的岸邊</li></ul><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">int</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>cin <span class="token operator">>></span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>c<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">,</span> t<span class="token punctuation">,</span> m<span class="token punctuation">,</span> in<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>string side<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>queue<span class="token operator">&lt;</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> boatl<span class="token punctuation">,</span> boatr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>cin <span class="token operator">>></span> n <span class="token operator">>></span> t <span class="token operator">>></span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>cin <span class="token operator">>></span> temp<span class="token punctuation">.</span>first <span class="token operator">>></span> side<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>temp<span class="token punctuation">.</span>second <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>side <span class="token operator">==</span> <span class="token string">"left"</span> <span class="token operator">?</span> boatl<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">:</span> boatr<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">auto</span> cur <span class="token operator">=</span> <span class="token operator">&amp;</span>boatl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">result</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>boatl<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>boatr<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>boatr<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>time <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> boatl<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>cur <span class="token operator">==</span> boatr<span class="token punctuation">)</span> time <span class="token operator">+=</span> t<span class="token punctuation">,</span> cur <span class="token operator">=</span> <span class="token operator">&amp;</span>boatl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>boatl<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>time <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> boatr<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>cur <span class="token operator">==</span> boatl<span class="token punctuation">)</span> time <span class="token operator">+=</span> t<span class="token punctuation">,</span> cur <span class="token operator">=</span> <span class="token operator">&amp;</span>boatr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">auto</span> small <span class="token operator">=</span> <span class="token punctuation">(</span>boatl<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token operator">&lt;</span> boatr<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">&amp;</span>boatl <span class="token operator">:</span> <span class="token operator">&amp;</span>boatr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>boatl<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token operator">==</span> boatr<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span> small <span class="token operator">=</span> cur<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">>=</span> small<span class="token operator">-></span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>small <span class="token operator">!=</span> cur <span class="token operator">&amp;&amp;</span> time <span class="token operator">&lt;</span> cur<span class="token operator">-></span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>time <span class="token operator">+=</span> t<span class="token punctuation">,</span> cur <span class="token operator">=</span> small<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>time <span class="token operator">=</span> small<span class="token operator">-></span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>small <span class="token operator">!=</span> cur<span class="token punctuation">)</span> time <span class="token operator">+=</span> t<span class="token punctuation">,</span> cur <span class="token operator">=</span> small<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cur<span class="token operator">-></span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token operator">&lt;=</span> time<span class="token punctuation">)</span> result<span class="token punctuation">[</span>cur<span class="token operator">-></span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">=</span> time <span class="token operator">+</span> t<span class="token punctuation">,</span> cur<span class="token operator">-></span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>time <span class="token operator">+=</span> t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>cur <span class="token operator">==</span> boatl<span class="token punctuation">)</span> cur <span class="token operator">=</span> <span class="token operator">&amp;</span>boatr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">else</span> cur <span class="token operator">=</span> <span class="token operator">&amp;</span>boatl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> result<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="68"></td><td><pre></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="程式碼修正版"><a class="anchor" href="#程式碼修正版">#</a> 程式碼 (修正版)</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">typedef</span> tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> tp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> p<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">int</span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">,</span> t<span class="token punctuation">,</span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>queue<span class="token operator">&lt;</span>p<span class="token operator">></span> Q<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>cin <span class="token operator">>></span> n <span class="token operator">>></span> t <span class="token operator">>></span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">int</span> time<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>string side<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>cin <span class="token operator">>></span> time <span class="token operator">>></span> side<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>side <span class="token operator">==</span> <span class="token string">"left"</span> <span class="token operator">?</span> Q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> time<span class="token punctuation">,</span> i <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">:</span> Q<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> time<span class="token punctuation">,</span> i <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ret</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>Q<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">int</span> close<span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> close <span class="token operator">=</span> Q<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> close <span class="token operator">=</span> Q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">else</span> close <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>Q<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span> Q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>time <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> close<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> cnt <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> Q<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token operator">&lt;=</span> time<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>ret<span class="token punctuation">[</span>Q<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">=</span> time <span class="token operator">+</span> t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>Q<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token operator">++</span>cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>cur <span class="token operator">^=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>time <span class="token operator">+=</span> t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> ret<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTA5MDEv">https://www.larrysprognotes.com/UVa%20-%2010901/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10172 - The Lonesome Cargo Distributor</title>
      <link href="UVa-10172-The-Lonesome-Cargo-Distributor/"/>
      <url>UVa-10172-The-Lonesome-Cargo-Distributor/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10172-the-lonesome-cargo-distributor"><a class="anchor" href="#題目-uva-10172-the-lonesome-cargo-distributor">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwMTcy">UVa 10172 - The Lonesome Cargo Distributor</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>有一輛貨車跟數個站點，貨車與站點的容量有限制</p><p>貨車每到一個站會執行以下動作</p><ol><li>將車上的貨物卸下，如果是目標貨物直接卸下，否則放到站點的 <code>queue</code>  中</li><li>將站點中的貨物裝到車上</li><li>移動到下一個站點</li></ol><p>花費時間:</p><ol><li>每次裝貨及卸貨都會花費 1 分鐘</li><li>移動到下一個站點會花費 2 分鐘</li></ol><p>求所有貨物放到目標站點所花費的時間</p><hr /><p><strong>INPUT:</strong><br /> 第一行有一個整數 <code>SET</code> ，代表有幾筆資料<br />每筆資料的第一行有三個整數 <code>N</code> 、 <code>S</code> 、 <code>Q</code> <br /> <code>N</code>  代表有幾站、 <code>S</code>  代表貨車可裝載貨物量、 <code>Q</code>  代表站點中 <code>queue</code>  的最大容量<br />接著有 <code>N</code>  行，從第 1 站至第 N 站<br />每行的第一個數字代表此站有幾個貨物，接著分別是貨物的目標編號</p><hr /><p><strong>OUTPUT:</strong><br /> 將所有貨物送到目標站點需要的分鐘數</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>使用 <code>stack</code>  模擬貨車<br />以 <code>vector&lt; queue&lt;int&gt; &gt;</code>  模擬站點<br />接著跟著題目操作即可<br />當 <code>stack</code>  及 <code>vector&lt; queue&lt;int&gt; &gt;</code>  皆為空時，此筆測資結束</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">int</span> SET<span class="token punctuation">,</span> N<span class="token punctuation">,</span> S<span class="token punctuation">,</span> Q<span class="token punctuation">,</span> Qi<span class="token punctuation">,</span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>cin <span class="token operator">>></span> SET<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>SET<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> carrier<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>vector<span class="token operator">&lt;</span> queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> stations<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>cin <span class="token operator">>></span> N <span class="token operator">>></span> S <span class="token operator">>></span> Q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> station<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>cin <span class="token operator">>></span> Qi<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> Qi<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> cin <span class="token operator">>></span> temp<span class="token punctuation">,</span> station<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>temp <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>stations<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>station<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>carrier<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>carrier<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> cur <span class="token operator">||</span> stations<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> Q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>carrier<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> cur<span class="token punctuation">)</span> stations<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>carrier<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>carrier<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token operator">++</span>time<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stations<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> carrier<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> S<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>carrier<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>stations<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>stations<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token operator">++</span>time<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">bool</span> out <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>carrier<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>cur <span class="token operator">=</span> <span class="token operator">++</span>cur <span class="token operator">%</span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>time <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>out <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>out<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> time <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTAxNzIv">https://www.larrysprognotes.com/UVa%20-%2010172/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
            <tag> stack </tag>
            
            <tag> queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 1062 - Containers</title>
      <link href="UVa-1062-Containers/"/>
      <url>UVa-1062-Containers/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-1062-containers"><a class="anchor" href="#題目-uva-1062-containers">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwNjI=">UVa 1062 – Containers</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>船運送貨物到港口，貨物需要依 <code>A</code>  到 <code>Z</code>  的順序排序<br />字母大的貨物在下，且字母大的貨物不能放在比它小的上方<br />求貨物至少要先堆成幾堆才能達成</p><hr /><p><strong>INPUT:</strong><br /> 每筆資料輸入一個字串，代表貨物到港口的順序<br />當輸入為 <code>end</code>  時結束程式</p><hr /><p><strong>OUTPUT:</strong><br /> 先輸出第幾個 <code>case</code> <br /> 接著輸出需要的最小 <code>stack</code>  數</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>其實這題就是在求 <code>LIS : 最長嚴格遞增子陣列</code> <br />利用 <code>greedy演算法</code> 求出 <code>LIS</code></p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>string in<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> in <span class="token operator">&amp;&amp;</span> in <span class="token operator">!=</span> <span class="token string">"end"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> re<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>re<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> in<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> re<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> re<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">else</span> <span class="token operator">*</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case "</span> <span class="token operator">&lt;&lt;</span> count<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> re<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTA2Mi8=">https://www.larrysprognotes.com/UVa%20-%201062/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 732 - Anagrams by Stack</title>
      <link href="UVa-732-Anagrams-by-Stack/"/>
      <url>UVa-732-Anagrams-by-Stack/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-732-anagrams-by-stack"><a class="anchor" href="#題目-uva-732-anagrams-by-stack">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTczMg==">UVa 732 - Anagrams by Stack</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>給你兩個字串及一個 <code>stack</code> ，找出所有能使前者變成後者的所有 <code>input</code> 、 <code>output</code>  組合</p><hr /><p><strong>INPUT:</strong><br /> 每筆資料輸入兩個字串，起始字串及目標字串</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出起始字串能透過 <code>stack</code>  轉變為目標字串的所有組合</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>使用 dfs，每次將字串 <code>push</code>  及 <code>pop</code> ，最後如果符合目標字串則輸出</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>string in<span class="token punctuation">,</span> target<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> starts<span class="token punctuation">,</span> string results<span class="token punctuation">,</span> stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> stacks<span class="token punctuation">,</span> string out<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> in<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>results <span class="token operator">==</span> target<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> out <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>starts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">auto</span> tmp1 <span class="token operator">=</span> stacks<span class="token punctuation">,</span> tmp2 <span class="token operator">=</span> starts<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        tmp1<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>tmp2<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        tmp2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token function">dfs</span><span class="token punctuation">(</span>tmp2<span class="token punctuation">,</span> results<span class="token punctuation">,</span> tmp1<span class="token punctuation">,</span> out <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">?</span> <span class="token string">" i"</span> <span class="token operator">:</span> <span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stacks<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> stacks<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> target<span class="token punctuation">[</span>results<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">auto</span> tmp1 <span class="token operator">=</span> stacks<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        tmp1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token function">dfs</span><span class="token punctuation">(</span>starts<span class="token punctuation">,</span> results <span class="token operator">+</span> stacks<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmp1<span class="token punctuation">,</span> out <span class="token operator">+</span> <span class="token string">" o"</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> in <span class="token operator">>></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>        stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> starts<span class="token punctuation">,</span> stacks<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> starts<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> target<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>starts<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> stacks<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"]\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="程式碼修正版"><a class="anchor" href="#程式碼修正版">#</a> 程式碼 (修正版)</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">typedef</span> tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> tp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>string s<span class="token punctuation">,</span> t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> st<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i1<span class="token punctuation">,</span> <span class="token keyword">int</span> i2<span class="token punctuation">,</span> string ret<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>i2 <span class="token operator">==</span> t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>i1 <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token function">dfs</span><span class="token punctuation">(</span>i1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i2<span class="token punctuation">,</span> ret <span class="token operator">+</span> <span class="token punctuation">(</span>ret<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"i"</span> <span class="token operator">:</span> <span class="token string">" i"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">auto</span> tmp <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token function">dfs</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ret <span class="token operator">+</span> <span class="token string">" o"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> s <span class="token operator">>></span> t<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>st <span class="token operator">=</span> stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"[\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"]\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwNzMyLw==">https://www.larrysprognotes.com/UVa%20-%20732/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> stack </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 514 - Rails</title>
      <link href="UVa-514-Rails/"/>
      <url>UVa-514-Rails/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-514-rails"><a class="anchor" href="#題目-uva-514-rails">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTUxNA==">UVa 514 - Rails</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>有一個火車站，出去及進來都只有一條路<br />有一對列按照編號順序排列的火車<br />它們是否能按照特定順序出車站？</p><hr /><p><strong>INPUT:</strong><br /> 每筆資料的第一行有一個整數 <code>n</code> ，代表有 <code>n</code>  個火車<br />接著有 <code>n</code>  個整數，代表火車出站的順序<br />當第一個順序為 <code>0</code>  時，結束這筆資料<br />當 <code>n</code>  為 <code>0</code>  時，結束程式</p><hr /><p><strong>OUTPUT:</strong><br /> 當順序為可行時，輸出 <code>Yes</code> ，否則輸出 <code>No</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>用 <code>stack a</code>  儲存資料，按照順序找到火車 (判斷 <code>stack a</code>  及 <code>stack b</code>  的 <code>top</code> )<br /> 並將這台火車前面的火車都 <code>push</code>  到 <code>stack b</code> <br /> 如果過程中 <code>stack a</code>  變為空，則不可行</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">,</span> in<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> in <span class="token operator">&amp;&amp;</span> in<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">bool</span> success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> A<span class="token punctuation">,</span> station<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> A<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> cin <span class="token operator">>></span> in<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>station<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> station<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> in<span class="token punctuation">)</span> station<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>A<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> A<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> in<span class="token punctuation">)</span> station<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">else</span> A<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>success <span class="token operator">?</span> <span class="token string">"Yes\n"</span> <span class="token operator">:</span> <span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwNTE0Lw==">https://www.larrysprognotes.com/UVa%20-%20514/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11995 - I Can Guess the Data Structure!</title>
      <link href="UVa-11995-I-Can-Guess-the-Data-Structure/"/>
      <url>UVa-11995-I-Can-Guess-the-Data-Structure/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11995-i-can-guess-the-data-structure"><a class="anchor" href="#題目-uva-11995-i-can-guess-the-data-structure">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExOTk1">UVa 11995 - I Can Guess the Data Structure!</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>你能猜到資料結構嗎？<br /> 給你一些 <code>push</code>  和 <code>pop</code> data，找出資料結構</p><hr /><p><strong>INPUT:</strong><br /> 每筆資料的第一行有一個整數 <code>n</code> ，代表接下來有 <code>n</code>  行<br />每行有兩個整數，前者代表指令， <code>1</code>  為 <code>push</code> ， <code>2</code>  為 <code>pop</code> ，後者代表數字</p><hr /><p><strong>OUTPUT:</strong></p><ul><li><code>stack</code></li><li><code>queue</code></li><li><code>priority queue</code></li><li>都不是 <code>impossible</code></li><li>兩種以上容器符合 <code>not sure </code></li></ul><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>分別 <code>push</code>  到 3 種容器中做模擬，看有幾個符合</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">,</span> in<span class="token punctuation">,</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> pq<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">bool</span> isq <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ispq <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> iss <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>cin <span class="token operator">>></span> in <span class="token operator">>></span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>in <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>pq<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>s<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>isq<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">else</span> isq <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>ispq<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">else</span> ispq <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>iss<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">else</span> iss <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>isq <span class="token operator">&amp;&amp;</span> iss<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>isq <span class="token operator">&amp;&amp;</span> ispq<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ispq <span class="token operator">&amp;&amp;</span> iss<span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"not sure\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isq<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"queue\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ispq<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"priority queue\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>iss<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"stack\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"impossible\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTE5OTUv">https://www.larrysprognotes.com/UVa%20-%2011995/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> priority queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10954 - Add All</title>
      <link href="UVa-10954-Add-All/"/>
      <url>UVa-10954-Add-All/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10954-add-all"><a class="anchor" href="#題目-uva-10954-add-all">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwOTU0">UVa 10954 - Add All</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>題目說明了你的目標: <s>加全</s><br />例如 <code>1 + 2 + 3</code> <br /> 先 <code>1 + 2</code>  cost 3<br /> 再 <code>3 + 3</code>  cost 6<br /> 總共 cost 9</p><hr /><p><strong>INPUT:</strong><br /> 每筆資料的第一行有一個整數 <code>N</code> ，代表接下來有 <code>N</code>  個整數<br />當 <code>N</code>  為 <code>0</code>  時結束程式</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出全部相加所需最少的 cost</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>用 <code>priority queue</code>  儲存資料 (升冪排序)<br /> 每次取最前 (小) 兩個做相加即可</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> line<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">int</span> input<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> input<span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>temp <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>temp <span class="token operator">+=</span> line<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>line<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>result <span class="token operator">+=</span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTA5NTQv">https://www.larrysprognotes.com/UVa%20-%2010954/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> priority queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 1203 - Argus</title>
      <link href="UVa-1203-Argus/"/>
      <url>UVa-1203-Argus/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-1203-argus"><a class="anchor" href="#題目-uva-1203-argus">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEyMDM=">UVa 1203 - Argus</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>我們在 Argus 註冊了很多 Register<br /> 你的目標是找到錢 <code>K</code>  個 Register</p><hr /><p><strong>INPUT:</strong><br /> 每行輸入 3 個字串</p><ol><li><code>Register</code>  或 <code>#</code> ，當輸入為 <code>#</code> 結束</li><li>Register 的編號</li><li>Register 的頻率<br />最後有一個整數 <code>K</code> ，代表要輸出幾個 Register</li></ol><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>K</code>  個 Register 的編號，如果頻率相同，則編號小的優先輸出</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>用 <code>priority queue</code>  儲存編號及頻率 (升冪排序)<br /> 每次找到一個 Register，將它的現在時間加上原本頻率再度 <code>push</code>  回 <code>priority queue</code></p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tuple></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">typedef</span> tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> datas<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>priority_queue<span class="token operator">&lt;</span>datas<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>datas<span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>datas<span class="token operator">>></span> lists<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>string input<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">int</span> Q<span class="token punctuation">,</span> P<span class="token punctuation">,</span> num<span class="token punctuation">,</span> ps<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> input <span class="token operator">&amp;&amp;</span> input <span class="token operator">!=</span> <span class="token string">"#"</span> <span class="token operator">&amp;&amp;</span> cin <span class="token operator">>></span> Q <span class="token operator">>></span> P<span class="token punctuation">)</span> lists<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token function">make_tuple</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> Q<span class="token punctuation">,</span> P<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>cin <span class="token operator">>></span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token function">tie</span><span class="token punctuation">(</span>ps<span class="token punctuation">,</span> Q<span class="token punctuation">,</span> P<span class="token punctuation">)</span> <span class="token operator">=</span> lists<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>lists<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>lists<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token function">make_tuple</span><span class="token punctuation">(</span>ps <span class="token operator">+</span> P<span class="token punctuation">,</span> Q<span class="token punctuation">,</span> P<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> Q <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTIwMy8=">https://www.larrysprognotes.com/UVa%20-%201203/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> priority queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 12207 - That is Your Queue</title>
      <link href="UVa-12207-That-is-Your-Queue/"/>
      <url>UVa-12207-That-is-Your-Queue/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-12207-that-is-your-queue"><a class="anchor" href="#題目-uva-12207-that-is-your-queue">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEyMjA3">UVa 12207 - That is Your Queue</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>政府終於解決了全民健保問題，而建立了一套系統<br />你需要用程式寫這個系統，說明如下:</p><ul><li>每個人被分配到一個編號，由 1 開始排</li><li>當緊急狀況發生時，會有人優先移到前面</li></ul><hr /><p><strong>INPUT:</strong><br /> 每筆測資第一行有兩個整數 <code>P</code>  和 <code>C</code> ， <code>P</code>  代表國家的人口數， <code>C</code>  代表接下來的指令數<br /> (當 <code>P</code>  與 <code>C</code>  為 <code>0</code>  時結束程式)<br /> 接下來會有 <code>C</code>  行，每行會有 <code>N</code>  或 <code>E x</code></p><ul><li><code>N</code>  代表輸出最前面的人並移動到最後</li><li><code>E x</code>  代表將編號為 <code>x</code>  的人移動到最前面</li></ul><hr /><p><strong>OUTPUT:</strong><br /> 每遇到 <code>N</code> ，輸出最前面的人</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>利用 <code>deque</code>  儲存資料，方便進行 <code>push_back</code> 、 <code>push_front</code>  與 <code>pop_front</code> <br /> 注意 <code>push</code>  及 <code>pop</code>  的順序即可</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;deque></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> P<span class="token punctuation">,</span> C<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> P <span class="token operator">>></span> C <span class="token operator">&amp;&amp;</span> P <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> C <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> line<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">char</span> state<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">int</span> s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token function">min</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> line<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case "</span> <span class="token operator">&lt;&lt;</span> count<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> <span class="token string">":\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>C<span class="token operator">--</span> <span class="token operator">&amp;&amp;</span> cin <span class="token operator">>></span> state<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token string">'N'</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> line<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>line<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>line<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">else</span> </pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>cin <span class="token operator">>></span> s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> line<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>it <span class="token operator">==</span> s<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>line<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>line<span class="token punctuation">.</span><span class="token function">emplace_front</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTIyMDcv">https://www.larrysprognotes.com/UVa%20-%2012207/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> deque </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11988 - Broken Keyboard (a.k.a. Beiju Text)</title>
      <link href="UVa-11988-Broken-Keyboard-a-k-a-Beiju-Text/"/>
      <url>UVa-11988-Broken-Keyboard-a-k-a-Beiju-Text/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11988-broken-keyboard-aka-beiju-text"><a class="anchor" href="#題目-uva-11988-broken-keyboard-aka-beiju-text">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExOTg4">UVa 11988 - Broken Keyboard (a.k.a. Beiju Text)</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>你正在用一個壞掉的鍵盤打一篇文章<br />其實也沒有那麼糟，唯一的問題是鍵盤會自己打 <code>home</code>  與 <code>end</code> <br /> 這種狀況叫做 <code>Beiju</code> ，你的目標是找到 <code>Beiju</code>  訊息</p><hr /><p><strong>INPUT:</strong><br /> 輸入一長串的字串</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出 <code>Beiju</code>  訊息</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>用 <code>list</code>  儲存訊息，以 <code>it</code>  紀錄當前輸入位置</p><ul><li>當碰到 <code>[</code> 時， <code>it</code>  移到最前面</li><li>當碰到 <code>]</code>  時， <code>it</code>  移到最後面</li></ul><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>string input<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>list<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> line<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">auto</span> it <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token string">'['</span><span class="token punctuation">)</span> it <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token string">']'</span><span class="token punctuation">)</span> it <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">else</span> line<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> line<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTE5ODgv">https://www.larrysprognotes.com/UVa%20-%2011988/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10653 - Bombs NO they are Mines</title>
      <link href="UVa-10653-Bombs-NO-they-are-Mines/"/>
      <url>UVa-10653-Bombs-NO-they-are-Mines/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10653-bombs-no-they-are-mines"><a class="anchor" href="#題目-uva-10653-bombs-no-they-are-mines">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwNjUz">UVa 10653 - Bombs! NO they are Mines!!</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>現在是 3002 年，機器人已經統治了世界，你是少數存活的人類之一<br />機器人一直用你來比對他們是否能變得更聰明<br />今天是一個特別的日子，只要你能在 IRQ2003 領域中擊敗最快的機器人，你就會獲得自由<br />就算他們是智能的，但機器人仍無法改變他們的基本缺陷：只能走 <code>上 下 左 右</code> <br />你擁有一張顯示不安全區域的地圖，你必須找到從起點到終點的最短路徑</p><hr /><p><strong>INPUT:</strong><br /> 每筆資料第一行有兩個整數 <code>R</code>  和 <code>C</code> ，代表地圖的大小<br />第二行有一個整數 <code>N</code> ，代表以下有幾筆資料<br />接下來有 <code>N</code>  行，每行先讀入兩個整數 <code>r</code>  和 <code>k</code> ，代表第幾行與炸彈數<br />接下來 <code>k</code>  個資料，讀入一個整數 <code>c</code>  代表炸彈位於 <code>r</code>  行 <code>c</code>  排<br />當 <code>R</code>  和 <code>C</code>  為 <code>0</code>  時，結束程式</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出起點到終點最短路徑的步數</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先建圖，將炸彈標至圖上 <code>-1</code> <br /> 接著進行 bfs，將每次走過的步數紀錄，當現在的位置 = 終點時結束</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">const</span> <span class="token keyword">int</span> nxt<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">int</span> M<span class="token punctuation">[</span><span class="token number">1002</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1002</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">int</span> R<span class="token punctuation">,</span> C<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> x_1<span class="token punctuation">,</span> y_1<span class="token punctuation">,</span> x_2<span class="token punctuation">,</span> y_2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    queue<span class="token operator">&lt;</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> Q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> x_1<span class="token punctuation">,</span> y_1 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    M<span class="token punctuation">[</span>x_1<span class="token punctuation">]</span><span class="token punctuation">[</span>y_1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">auto</span> <span class="token punctuation">[</span>ux<span class="token punctuation">,</span> uy<span class="token punctuation">]</span> <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token keyword">int</span> vx <span class="token operator">=</span> ux <span class="token operator">+</span> nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token keyword">int</span> vy <span class="token operator">=</span> uy <span class="token operator">+</span> nxt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>vx <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> vy <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> vx <span class="token operator">&lt;</span> R <span class="token operator">&amp;&amp;</span> vy <span class="token operator">&lt;</span> C <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>M<span class="token punctuation">[</span>vx<span class="token punctuation">]</span><span class="token punctuation">[</span>vy<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                M<span class="token punctuation">[</span>vx<span class="token punctuation">]</span><span class="token punctuation">[</span>vy<span class="token punctuation">]</span> <span class="token operator">=</span> M<span class="token punctuation">[</span>ux<span class="token punctuation">]</span><span class="token punctuation">[</span>uy<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>vx <span class="token operator">==</span> x_2 <span class="token operator">&amp;&amp;</span> vy <span class="token operator">==</span> y_2<span class="token punctuation">)</span> <span class="token keyword">return</span> M<span class="token punctuation">[</span>vx<span class="token punctuation">]</span><span class="token punctuation">[</span>vy<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> vx<span class="token punctuation">,</span> vy <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token keyword">int</span> N<span class="token punctuation">,</span> r<span class="token punctuation">,</span> k<span class="token punctuation">,</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> R <span class="token operator">>></span> C<span class="token punctuation">,</span> R <span class="token operator">&amp;&amp;</span> C<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token function">memset</span><span class="token punctuation">(</span>M<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token comment">// build map</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        cin <span class="token operator">>></span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>N<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>            cin <span class="token operator">>></span> r <span class="token operator">>></span> k<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>                cin <span class="token operator">>></span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>                M<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre>        cin <span class="token operator">>></span> x_1 <span class="token operator">>></span> y_1 <span class="token operator">>></span> x_2 <span class="token operator">>></span> y_2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="68"></td><td><pre></pre></td></tr><tr><td data-num="69"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vYml1c19zdHJpcC9hcnRpY2xlL2RldGFpbHMvMjE0ODQ2Mzc=">https://blog.csdn.net/mobius_strip/article/details/21484637</span><br /><span class="exturl" data-url="aHR0cDovL25haXZlcmVkLmdpdGh1Yi5pby8yMDE4LzAzLzA4L1Byb2JsZW1fU29sdmluZy9VVmEvVVZhLTEwNjUzLUJvbWJzLU5PLXRoZXktYXJlLU1pbmVzLw==">http://naivered.github.io/2018/03/08/Problem_Solving/UVa/UVa-10653-Bombs-NO-they-are-Mines/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> bfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11572 - Unique Snowflakes</title>
      <link href="UVa-11572-Unique-Snowflakes/"/>
      <url>UVa-11572-Unique-Snowflakes/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11572-unique-snowflakes"><a class="anchor" href="#題目-uva-11572-unique-snowflakes">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExNTcy">UVa 11572 - Unique Snowflakes</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>Emily 有一個很酷的想法：包裝雪花並販售<br />她設計了一個自動包裝雪花的機器<br />但是，她想讓每一個雪花包裝都不同<br />寫一個程式找出最大雪花包裝的大小</p><hr /><p><strong>INPUT:</strong><br /> 第一行為一個整數 <code>n</code> ，代表有 <code>n</code>  筆資料<br />每筆資料第一行為一個整數 <code>k</code> ，代表有 <code>k</code>  片雪花<br />接下來有 <code>k</code>  行，每行有一個整數，代表雪花的編號</p><hr /><p><strong>OUTPUT:</strong><br /> 每筆資料輸出最多能裝幾片雪花</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>求一個陣列中最長的不重複子陣列<br />如果遇到重複的雪花，則記錄長度並刪除最前項</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_set></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ios_base<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>size_t total<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> snowflake<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> cpy<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>cin <span class="token operator">>></span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>cin <span class="token operator">>></span> k<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>cin <span class="token operator">>></span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>snowflake<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> total <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span> snowflake<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>snowflake<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> snowflake<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token operator">*</span>cpy<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cpy<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>cpy<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>cpy<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>snowflake<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>total <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span> snowflake<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> total <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>snowflake<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>cpy<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTE1NzIv">https://www.larrysprognotes.com/UVa%20-%2011572/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11136 - Hoax or what</title>
      <link href="UVa-11136-Hoax-or-what/"/>
      <url>UVa-11136-Hoax-or-what/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11136-hoax-or-what"><a class="anchor" href="#題目-uva-11136-hoax-or-what">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExMTM2">UVa 11136 - Hoax or what</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>Mal-Wart 超市正在進行促銷，以下是說明</p><ul><li>客戶需將寫有電話的帳單存入抽獎箱</li><li>每天結束時會選擇最貴及最便宜的帳單各一張，買最貴的人得到最貴與最便宜的差額</li><li>抽獎完的帳單不會放回抽獎箱</li></ul><hr /><p><strong>INPUT:</strong><br /> 每筆資料第一行為一個整數 <code>n</code> ，代表有 <code>n</code>  天<br />接下來會有 <code>n</code>  行，每行會有一個整數 <code>k</code> ，代表帳單的數量，接下來 <code>k</code>  個整數代表每個帳單的金額<br />當 <code>n</code>  為 <code>0</code>  時結束程式</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出超市總共要為這個促銷支出多少錢</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>利用 <code>multiset</code>  自動排序，每次取頭與尾的帳單即為最大與最小，相減後累加至結果</p><div class="note info"><p>由於測資的大小，結果需用 <code>long long</code>  存</p></div><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>ios_base<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> total<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> bill<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>bill<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>cin <span class="token operator">>></span> k<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> temp<span class="token punctuation">,</span> bill<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>total <span class="token operator">+=</span> <span class="token operator">*</span>bill<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token operator">*</span>bill<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>bill<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>bill<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">auto</span> it <span class="token operator">=</span> bill<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>bill<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token operator">--</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> total <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTExMzYv">https://www.larrysprognotes.com/UVa%20-%2011136/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 978 - Lemmings Battle</title>
      <link href="UVa-978-Lemmings-Battle/"/>
      <url>UVa-978-Lemmings-Battle/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-978-lemmings-battle"><a class="anchor" href="#題目-uva-978-lemmings-battle">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTk3OA==">UVa 978 - Lemmings Battle</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>兩個種族正在進行戰鬥，到底是綠色種族贏還是藍色種族贏呢？<br /> 寫一個程式來判斷哪個種族獲得了勝利</p><hr /><p><strong>INPUT:</strong><br /> 第一行有一個整數 <code>N</code> ，代表有幾筆資料<br />每筆資料第一行有三個整數 <code>B</code> 、 <code>SG</code>  和 <code>SB</code></p><ul><li><code>B</code>  代表每次戰鬥派出的人數</li><li><code>SG</code>  代表綠色種族人數</li><li><code>SB</code>  代表藍色種族人數<br />接下來的 <code>SG</code>  為綠色種族的戰力， <code>SB</code>  為藍色種族的戰力</li></ul><hr /><p><strong>OUTPUT:</strong><br /> 如果雙方全軍覆沒則輸出 <code>green and blue died</code> <br /> 如果一方勝利則輸出勝利種族及存活的戰力 (順序為降冪排序)</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>將雙方隊伍存入 <code>multiset</code> ，以 <code>vector</code>  暫存戰鬥結果<br />每輪戰鬥結束後，將存活的戰力重新由 <code>vector</code> push 回 <code>multiset</code> <br /> 當一方或雙方的 <code>multiset</code>  為空時，判斷勝利種族並輸出</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>ios_base<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">,</span> b<span class="token punctuation">,</span> sg<span class="token punctuation">,</span> sb<span class="token punctuation">,</span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> green<span class="token punctuation">,</span> blue<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> battle<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>cin <span class="token operator">>></span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>cin <span class="token operator">>></span> b <span class="token operator">>></span> sg <span class="token operator">>></span> sb<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>sg<span class="token operator">--</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> temp<span class="token punctuation">,</span> green<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>sb<span class="token operator">--</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> temp<span class="token punctuation">,</span> blue<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>green<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>blue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>green<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> blue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>battle<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token operator">*</span>green<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token operator">*</span>blue<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">auto</span> it <span class="token operator">=</span> green<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>green<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token operator">--</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>it <span class="token operator">=</span> blue<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>blue<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token operator">--</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> tmp <span class="token operator">:</span> battle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> green<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> blue<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token operator">-</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>battle<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>green<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> blue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"green and blue died\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>green<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"blue wins\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> blue<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> blue<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>blue<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"green wins\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> green<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> green<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>green<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwOTc4Lw==">https://www.larrysprognotes.com/UVa%20-%20978/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11286 - Conformity</title>
      <link href="UVa-11286-Conformity/"/>
      <url>UVa-11286-Conformity/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11286-conformity"><a class="anchor" href="#題目-uva-11286-conformity">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExMjg2">UVa 11286 – Conformity</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>Waterloo 大學的新生因為興趣不同，而選擇不同的課<br />但學校希望他們選的課能盡量一樣，所以設置了一個獎項</p><ul><li>最受歡迎的課程組合<br />寫一個程式找出最受歡迎的課程組合</li></ul><hr /><p><strong>INPUT:</strong><br /> 每筆資料第一行為一個整數 <code>n</code> ，代表學生人數<br />接下來會有 <code>n</code>  行，每行有五個整數，代表選的課程<br />當 <code>n</code>  為 <code>0</code>  時結束程式</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出最受歡迎的課程組合的人數<br />如果有多個最受歡迎的課程組合，則將人數加總</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先將每個課程組合排序，之後連接起來存入 <code>string</code> <br /> 將 <code>string</code>  存入 <code>map</code>  計算數量，數量最多的組合即為最受歡迎的課程組合</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">,</span> max_num<span class="token punctuation">,</span> total<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> course<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> class_num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>string input<span class="token punctuation">,</span> line<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n <span class="token operator">&amp;&amp;</span> n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>max_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>course<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>line<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>class_num<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">>></span> input<span class="token punctuation">,</span> class_num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token function">sort</span><span class="token punctuation">(</span>class_num<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> class_num<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> line <span class="token operator">+=</span> class_num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token operator">++</span>course<span class="token punctuation">[</span>line<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> course<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> course<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>it<span class="token operator">-></span>second <span class="token operator">></span> max_num<span class="token punctuation">)</span> max_num <span class="token operator">=</span> it<span class="token operator">-></span>second<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> course<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> course<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>it<span class="token operator">-></span>second <span class="token operator">==</span> max_num<span class="token punctuation">)</span> total <span class="token operator">+=</span> max_num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> total <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10282 - Babelfish</title>
      <link href="UVa-10282-Babelfish/"/>
      <url>UVa-10282-Babelfish/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10282-babelfish"><a class="anchor" href="#題目-uva-10282-babelfish">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwMjgy">UVa 10282 - Babelfish</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>你剛剛移民到一個大城市，這裡的語言對你來說很陌生，幸運的是，你有一個字典<br />寫一個程式將未知語言翻譯成英文</p><hr /><p><strong>INPUT:</strong><br /> 每一行會有兩個字串，前者代表英文，後者代表未知語言，直到輸入空白<br />接著重複輸入未知語言</p><hr /><p><strong>OUTPUT:</strong><br /> 將未知語言翻譯成英文輸出，如果字典找不到則輸出 <code>eh</code></p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>這題主要是熟悉 <code>map</code>  這個容器，一個 <code>key</code>  會對應到一個 <code>value</code> <br /> 建 map 後，搜尋輸出即可</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span> dict<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>string input<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>stringstream ss<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> input<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> input <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>ss<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>ss <span class="token operator">&lt;&lt;</span> input<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>ss <span class="token operator">>></span> value <span class="token operator">>></span> key<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>dict<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token operator">!=</span> dict<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> dict<span class="token punctuation">[</span>input<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token string">"eh"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 924 - Spreading the News</title>
      <link href="UVa-924-Spreading-the-News/"/>
      <url>UVa-924-Spreading-the-News/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-924-spreading-the-news"><a class="anchor" href="#題目-uva-924-spreading-the-news">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTkyNA==">UVa 924 - Spreading the News</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>每個人每天會將新消息告訴朋友<br />寫一個程式去找出以下兩項</p><ul><li>最多人知道消息那一天的人數</li><li>最大人數發生的最早那一天</li></ul><hr /><p><strong>INPUT:</strong><br /> 第一行會有一個整數 <code>E</code> ，代表人數，由 <code>0</code>  編號至 <code>E - 1</code> <br /> 接下來會有 <code>E</code>  行，代表 <code>0</code>  至 <code>E - 1</code>  的朋友<br />每行會有一個整數 <code>N</code> ，代表朋友的人數，之後會有 <code>N</code>  個整數，代表朋友的編號<br />接著會有一個整數 <code>T</code> ，代表有幾個 cases，之後會有 <code>T</code>  個整數，代表從他開始傳遞</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出最大人數及最大人數最早發生的那一天<br />如果最大人數為 <code>0</code> ，則不需要輸出後者</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先建表，之後進行 bfs，儲存傳遞的天數及最大數量，最後再找最大值輸出</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> G<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> vis<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> dep<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> day<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> st<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>vis<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>dep<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">int</span> u <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dep<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token operator">++</span>day<span class="token punctuation">[</span>dep<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> max<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> day<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>day<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">.</span>first<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>max<span class="token punctuation">.</span>first <span class="token operator">=</span> day<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>max<span class="token punctuation">.</span>second <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> max<span class="token punctuation">.</span>first<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>max<span class="token punctuation">.</span>first<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> max<span class="token punctuation">.</span>second<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="52"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token keyword">int</span> E<span class="token punctuation">,</span> T<span class="token punctuation">,</span> st<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>cin <span class="token operator">>></span> E<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre>G<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>E<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token comment">// store friend's data</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> N<span class="token punctuation">,</span> u<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> E<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>cin <span class="token operator">>></span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>N<span class="token operator">--</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> u<span class="token punctuation">,</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="67"></td><td><pre></pre></td></tr><tr><td data-num="68"></td><td><pre>cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>vis<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>E <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>dep<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>E <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>day<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>E <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre>cin <span class="token operator">>></span> st<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token function">bfs</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="78"></td><td><pre></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考文章"><a class="anchor" href="#參考文章">#</a> 參考文章:</h1><p><span class="exturl" data-url="aHR0cHM6Ly90bmxvbGljb24uYmxvZ3Nwb3QuY29tLzIwMTgvMTIvdXZhLTkyNHNwcmVhZGluZy1uZXdzLmh0bWw=">https://tnlolicon.blogspot.com/2018/12/uva-924spreading-news.html</span><br /><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vcnJpczgyMTAyOC9VVmEvYmxvYi9tYXN0ZXIvdm9sdW1lMDA5LzkyNCUyMC0lMjBTcHJlYWRpbmclMjBUaGUlMjBOZXdzLmNwcA==">https://github.com/morris821028/UVa/blob/master/volume009/924%20-%20Spreading%20The%20News.cpp</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> bfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 429 - Word Transformation</title>
      <link href="UVa-429-Word-Transformation/"/>
      <url>UVa-429-Word-Transformation/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-429-word-transformation"><a class="anchor" href="#題目-uva-429-word-transformation">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTQyOQ==">UVa 429 - Word Transformation</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>有一種字謎叫 word transformation<br /> 給你一個字，每次改變一個字母使之成為一個新單字，最終變得與目標字一樣<br />你的目標是找到一開始的字需要經過多少次轉換會變成目標字</p><hr /><p><strong>INPUT:</strong><br /> 輸入第一行有一個整數 <code>N</code> ，代表總共有幾個 set<br /> 接著空一行<br />接下來會連續輸入字串，直到 <code>*</code>  符號<br /> <code>*</code>  之後，每行會有兩個字串，前者為一開始的字，後者為目標字<br />當輸入為空行時，結束這個 set</p><hr /><p><strong>OUTPUT:</strong><br /> 先輸出每個開始字及目標字，接著輸出轉換的數量<br />每個 set 會隔一行</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>先用 map 建表，將差一個字元的字連在一起，將著再 bfs 找出轉換的數量<br />因為用到 <code>cin</code>  及 <code>getline</code> ，所以要呼叫 <code>cin.ignore()</code>  清空緩衝區</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> G<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span>string s1<span class="token punctuation">,</span> string s2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    queue<span class="token operator">&lt;</span>string<span class="token operator">></span> Q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> vis<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> dis<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>    Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    vis<span class="token punctuation">[</span>s1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    dis<span class="token punctuation">[</span>s1<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        string u <span class="token operator">=</span> Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> s2<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            Q<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">return</span> dis<span class="token punctuation">[</span>s2<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> V<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    string str<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token keyword">int</span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// blank line</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>N<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        V<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>        G<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre>        <span class="token comment">// store data and build graph</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">,</span> str <span class="token operator">!=</span> <span class="token string">"*"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> V<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>                <span class="token keyword">int</span> dif <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="67"></td><td><pre>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>dif<span class="token punctuation">;</span>          </pre></td></tr><tr><td data-num="68"></td><td><pre></pre></td></tr><tr><td data-num="69"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dif <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="70"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>                    G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>                    G<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="75"></td><td><pre></pre></td></tr><tr><td data-num="76"></td><td><pre>            V<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="78"></td><td><pre></pre></td></tr><tr><td data-num="79"></td><td><pre>        <span class="token comment">// search for key and target</span></pre></td></tr><tr><td data-num="80"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">,</span> str <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="81"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>            stringstream <span class="token function">ss</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>            ss <span class="token operator">>></span> s1 <span class="token operator">>></span> s2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre>            cout <span class="token operator">&lt;&lt;</span> s1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> s2 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">bfs</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="87"></td><td><pre></pre></td></tr><tr><td data-num="88"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>N<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="90"></td><td><pre></pre></td></tr><tr><td data-num="91"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考文章"><a class="anchor" href="#參考文章">#</a> 參考文章:</h1><p><span class="exturl" data-url="aHR0cHM6Ly90bmxvbGljb24uYmxvZ3Nwb3QuY29tLzIwMTgvMTIvdXZhLTQyOS13b3JkLXRyYW5zZm9ybWF0aW9uLmh0bWw=">https://tnlolicon.blogspot.com/2018/12/uva-429-word-transformation.html</span><br /><span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQEQyRjBETGttUWNHT2RxX2p2ZzNCR3cvSHlfNTlWV0ttP3R5cGU9dmlldw==">https://hackmd.io/@D2F0DLkmQcGOdq_jvg3BGw/Hy_59VWKm?type=view</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> bfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10226 - Hardwood Species</title>
      <link href="UVa-10226-Hardwood-Species/"/>
      <url>UVa-10226-Hardwood-Species/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10226-hardwood-species"><a class="anchor" href="#題目-uva-10226-hardwood-species">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwMjI2">UVa 10226 - Hardwood Species</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>計算每種樹的出現比例</p><hr /><p><strong>INPUT:</strong><br /> 第一行有一個整數 <code>n</code> ，代表共有幾個 cases<br /> 接著空一行，之後重複讀取字串 <code>name</code> ，代表樹的名稱，直到空行</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出樹的名稱及出現比例，順序為英文字母升冪，位數到小數點後四位<br />每筆資料以空行隔開</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>由於用到 <code>cin</code>  又用到 <code>getline</code> ，所以需要先呼叫 <code>cin.ignore()</code>  清空緩衝區<br />用 <code>map</code>  去累積每種樹出現的數量</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">,</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>string name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">></span> tree_data<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>cin <span class="token operator">>></span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> name <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span> tree_data<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span> total<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> tree_data<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> tree_data<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> fixed <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second<span class="token operator">/</span>total<span class="token operator">*</span><span class="token number">100</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>tree_data<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考文章"><a class="anchor" href="#參考文章">#</a> 參考文章:</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTAyMjYv">https://www.larrysprognotes.com/UVa%20-%2010226/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11838 - Come and Go</title>
      <link href="UVa-11838-Come-and-Go/"/>
      <url>UVa-11838-Come-and-Go/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-11838-come-and-go"><a class="anchor" href="#題目-uva-11838-come-and-go">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExODM4">UVa 11838 - Come and Go</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>一座城市以單向道及雙向道連接各處<br />你需要寫一個程式來判斷任意地點是否都能通往任意地點</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資的第一行有兩個整數 <code>N</code>  及 <code>M</code> ， <code>N</code>  代表交叉路口 (點) 的數量， <code>M</code>  代表街道 (邊) 的數量<br />接下來會有 <code>M</code>  行，每行有三個整數 <code>V</code> 、 <code>W</code>  和 <code>P</code> ，代表 <code>V</code>  及 <code>W</code>  間有一條道路相連， <code>P</code>  代表單向道或雙向道<br />當 <code>N</code>  及 <code>M</code>  皆為零時結束程式</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出這個城市是否符合 SCC，true 則 1，false 則 0</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>基本上跟前幾題一樣，也是 SCC 模板題<br />只要找出每個城市是否有多於一個 SCC 即可</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> G<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> dfn<span class="token punctuation">,</span> low<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> S<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">int</span> dep<span class="token punctuation">,</span> cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>dep<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>S<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> S<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="30"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">int</span> N<span class="token punctuation">,</span> M<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N <span class="token operator">>></span> M<span class="token punctuation">,</span> N <span class="token operator">&amp;&amp;</span> M<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment">// init</span></pre></td></tr><tr><td data-num="38"></td><td><pre>G<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>low<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>dfn<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>S<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>dep <span class="token operator">=</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token comment">// store data</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">int</span> V<span class="token punctuation">,</span> W<span class="token punctuation">,</span> P<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>M<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>cin <span class="token operator">>></span> V <span class="token operator">>></span> W <span class="token operator">>></span> P<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>G<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>W<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>P <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> G<span class="token punctuation">[</span>W<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token comment">// find scc</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> u <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>u<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> cnt <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考文章"><a class="anchor" href="#參考文章">#</a> 參考文章:</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTE4Mzgv">https://www.larrysprognotes.com/UVa%20-%2011838/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> dfs </tag>
            
            <tag> scc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 11504 - Dominos</title>
      <link href="UVa-11504-Dominos/"/>
      <url>UVa-11504-Dominos/</url>
      
        <content type="html"><![CDATA[<h2 id="題目uva-11504-dominos"><a class="anchor" href="#題目uva-11504-dominos">#</a> 題目:<span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExNTA0">UVa 11504 - Dominos</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>你的目標是找出一個骨牌需要推多少次才會全倒</p><hr /><p><strong>INPUT:</strong><br /> 第一行輸入一個整數 <code>t</code> ，代表有 <code>t</code>  筆測資<br />每筆測資的第一行有兩個整數 <code>n</code>  及 <code>m</code> ， <code>n</code>  代表骨牌數， <code>m</code>  代表骨牌的連動<br />接下來會有 <code>m</code>  行，每行有兩個整數 <code>x</code>  和 <code>y</code> ，代表骨牌 <code>x</code>  的倒下會影響骨牌 <code>y</code></p><hr /><p><strong>OUTPUT:</strong><br /> 輸出要使所有骨牌倒下，需要推動幾個骨牌</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><div class="note info"><p>點 <span class="exturl" data-url="aHR0cDovL3dlYi5udG51LmVkdS50dy9+YWxnby9Db21wb25lbnQuaHRtbCM4">這裡</span> 有關 <code>Tarjan's Algorithm</code>  與 <code>Kosaraju's Algorithm</code>  的詳細說明</p></div><ul><li><p>解法一使用 <code>Tarjan's Algorithm</code>  找 <code>SCC(Strongly Connected Component)</code> ，當我們推動任何一個點，整個 SCC 中的骨牌都會倒下<br />接著找每個 SCC 有沒有被其他 SCC 連接，連接數為零的 SCC 數量即為答案</p></li><li><p>解法二使用 <code>Kosaraju's Algorithm</code>  找 <code>SCC</code>  進行處理，可視為以下：先找出數個連接在一起的 tree，將 tree root 存起來<br />接著再反向搜尋這些 tree root 有沒有被其他 tree 所連接</p></li></ul><h1 id="參考程式碼-1"><a class="anchor" href="#參考程式碼-1">#</a> 參考程式碼 - 1</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> G<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> low<span class="token punctuation">,</span> dfn<span class="token punctuation">,</span> V<span class="token punctuation">,</span> com<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">int</span> dep<span class="token punctuation">,</span> cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>dep<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    V<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span>V<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">int</span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">do</span> </pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            temp <span class="token operator">=</span> V<span class="token punctuation">[</span>V<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            V<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            com<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token operator">++</span>cnt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token comment">// init</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        G<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        low<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        dfn<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        com<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        V<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        dep <span class="token operator">=</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token comment">// store data</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>            cin <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>            G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        </pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token comment">// find scc</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token comment">// get result</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">conxt</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> j <span class="token operator">:</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>com<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> com<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>conxt<span class="token punctuation">[</span>com<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> conxt<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>i<span class="token punctuation">)</span> <span class="token operator">++</span>result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token operator">++</span>result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre></pre></td></tr><tr><td data-num="72"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考程式碼-2"><a class="anchor" href="#參考程式碼-2">#</a> 參考程式碼 - 2</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> G<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> dfn<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> V<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>cin <span class="token operator">>></span> t<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>G<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>dfn<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>V<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">,</span> G<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> u <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>u<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>dfn<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> V<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> u <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>u<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>V<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token function">dfs</span><span class="token punctuation">(</span>V<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">++</span>result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考文章"><a class="anchor" href="#參考文章">#</a> 參考文章:</h1><p>感謝 <code>瑋倫</code> 修正解法二的解題說明<br /><span class="exturl" data-url="aHR0cDovL3dlYi5udG51LmVkdS50dy9+YWxnby9Db21wb25lbnQuaHRtbCM4"> http://web.ntnu.edu.tw/~algo/Component.html#8</span><br /><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmEtMTE1MDQv">https://www.larrysprognotes.com/UVa-11504/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> dfs </tag>
            
            <tag> scc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 247 - Calling Circles</title>
      <link href="UVa-247-Calling-Circles/"/>
      <url>UVa-247-Calling-Circles/</url>
      
        <content type="html"><![CDATA[<h2 id="題目uva-247-calling-circles"><a class="anchor" href="#題目uva-247-calling-circles">#</a> 題目:<span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTI0Nw==">UVa 247 - Calling Circles</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>電信公司有一種名為朋友圈的服務，由你提供一組名單，當你打電話給名單上的朋友時，你會獲得折扣<br /> LibertyBell Phone Co 是一間新的電信公司，它們認為它們可以讓其他公司倒閉<br /> LibertyBell Phone Co 也有朋友圈的服務，相較其他電信公司，它們會根據你打給誰和誰打給你判斷出你的朋友圈<br />例如: A 打給 B、B 打給 C、C 打給 A，那 ABC 是一組朋友圈</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資的第一行有兩個整數 <code>n</code>  及 <code>m</code> ， <code>n</code>  代表人數， <code>m</code>  代表通話<br />接下來會有 <code>m</code>  行，每行有兩個字串，代表前者打電話給後者<br />當 <code>n</code>  與 <code>m</code>  皆為 <code>0</code>  時結束</p><hr /><p><strong>OUTPUT:</strong><br /> 先輸出是第幾個 set<br /> 接著印出每個朋友圈裡所有人的姓名<br /> (姓名以空格分隔、呼叫圈以換行分隔)</p><div class="note info"><p>輸出姓名的順序不影響結果</p></div><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>這題是 SCC (Strongly Connected Component) 的問題</p><div class="note info"><p>SCC 強連通分量，指圖上任意兩點 <code>a</code>  及 <code>b</code> ， <code>a</code>  有路徑走到 <code>b</code> ， <code>b</code>  也有路徑走到 <code>a</code></p></div><p>先建表，之後進行 dfs，找到一個朋友圈即輸出</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> G<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> dfn<span class="token punctuation">,</span> low<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> V<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">int</span> dep<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>string u<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>dep<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    V<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span>V<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    </pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        string temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            temp <span class="token operator">=</span> V<span class="token punctuation">[</span>V<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            V<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            cout <span class="token operator">&lt;&lt;</span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> u<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> cases <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">,</span> n <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token comment">// init</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        G<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dfn<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> low<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> V<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        dep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token comment">// store data</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>            string name<span class="token punctuation">,</span> to<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>            cin <span class="token operator">>></span> name <span class="token operator">>></span> to<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>            G<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token comment">// find scc</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cases<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Calling circles for data set "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>cases <span class="token operator">&lt;&lt;</span> <span class="token string">":\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">:</span> G<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考文章"><a class="anchor" href="#參考文章">#</a> 參考文章:</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMjQ3Lw==">https://www.larrysprognotes.com/UVa%20-%20247/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> dfs </tag>
            
            <tag> scc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 10972 - RevolC FaeLoN</title>
      <link href="UVa-10972-RevolC-FaeLoN/"/>
      <url>UVa-10972-RevolC-FaeLoN/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-10972-revolc-faelon"><a class="anchor" href="#題目-uva-10972-revolc-faelon">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTEwOTcy">UVa 10972 - RevolC FaeLoN</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>Koorosh 現在是一名高級顧問，他在沒有你的幫助下解決了 Basm 的問題<br />跟往常一樣，Basm 征服了一個新地區，叫做 RevolC FaeLoN<br /> 為了讓 RevolC FaeLoN 的人民滿意，他想要使該國的道路變成單向來降低事故發生率<br />他希望每個城市都有一條路能到其他城市，所以他要求 Koorosh 找到需要建造的最少道路數</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資的第一行有兩個整數 <code>n</code>  及 <code>m</code> ， <code>n</code>  代表城市的數量， <code>m</code>  代表道路的數量<br />接下來會有 <code>m</code>  行，每行有兩個整數 <code>u</code>  及 <code>v</code> ，代表 <code>u</code> 、 <code>v</code>  城市間有一條道路連接</p><hr /><p><strong>OUTPUT:</strong><br /> 輸出需要建造道路的最小數量</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>無相圖中的邊雙聯通分量，定向後一定為強連通分量</p><p>先找出每個 BCC (Bridge Connected Component) 的 bridge 數量</p><ul><li>對於 2 個以上 bridge 的 BCC，必定有進來及離開這些城市的路</li><li>對於 1 個 bridge 的 BCC，總共需要 <code>(x + 1) / 2</code>  條道路才能全部連接 (x 為 1 個 bridge 的 BCC 的數量)</li><li>對於 0 個 bridge 的 BCC，總共需要 <code>y</code>  條道路才能全部連接 (y 為 0 個 bridge 的 BCC 的數量)<br /> 所以總共需要 <code>(x + 1) / 2 + y</code>  條道路</li></ul><div class="note info"><p>如果只有一個 BCC 且 bridge 為 0，則不需要建造道路，輸出 0</p></div><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><ul><li>0 個 bridge 的 BCC，用 <code>vector&lt;int&gt; bridge</code>  找出</li><li>1 個 bridge 的 BCC，用每個點的 <code>low</code>  值找出</li></ul><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> G<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> dfn<span class="token punctuation">,</span> low<span class="token punctuation">,</span> bridge<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">int</span> dep<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> par<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>dep<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> par<span class="token punctuation">)</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     </pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>low<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> bridge<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> bridge<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token comment">// init</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        G<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        dfn<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        low<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        bridge<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        dep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token keyword">int</span> con1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> con0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token comment">// store data</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>            cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            G<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>            G<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token comment">// find bridge connected component</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="57"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>                size_t s <span class="token operator">=</span> bridge<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>                <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> bridge<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">++</span>con0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token comment">// solve</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bridge<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> con0 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"0\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="66"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>            map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="69"></td><td><pre>            <span class="token punctuation">&#123;</span>           </pre></td></tr><tr><td data-num="70"></td><td><pre>                m<span class="token punctuation">[</span>low<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>low<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">!=</span> low<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>m<span class="token punctuation">[</span>low<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre></pre></td></tr><tr><td data-num="74"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>__<span class="token punctuation">,</span> de<span class="token punctuation">]</span> <span class="token operator">:</span> m<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>de <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">++</span>con1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre></pre></td></tr><tr><td data-num="76"></td><td><pre>            cout <span class="token operator">&lt;&lt;</span> con0 <span class="token operator">+</span> <span class="token punctuation">(</span>con1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>           </pre></td></tr><tr><td data-num="77"></td><td><pre>        <span class="token punctuation">&#125;</span>        </pre></td></tr><tr><td data-num="78"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="79"></td><td><pre></pre></td></tr><tr><td data-num="80"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考文章"><a class="anchor" href="#參考文章">#</a> 參考文章:</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTA5NzIv">https://www.larrysprognotes.com/UVa%20-%2010972/</span></p>]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> dfs </tag>
            
            <tag> bcc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVa 1108 - Mining Your Own Business</title>
      <link href="UVa-1108-Mining-Your-Own-Business/"/>
      <url>UVa-1108-Mining-Your-Own-Business/</url>
      
        <content type="html"><![CDATA[<h2 id="題目-uva-1108-mining-your-own-business"><a class="anchor" href="#題目-uva-1108-mining-your-own-business">#</a> 題目: <span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vVVZBLTExMDg=">UVA 1108 - Mining Your Own Business</span></h2><h1 id="題目說明"><a class="anchor" href="#題目說明">#</a> 題目說明</h1><p>John Digger 是一座礦坑的擁有者，礦坑是由大量的地道及連接點組成<br />不像某些人，Digger 關心礦工的安全，他擔心礦坑會崩塌，於是他打算設置安全通道<br />但是他又不想在每個連接點都設置安全通道，他希望能設置最低數量的安全通道，當礦坑崩塌時，所有礦工都能藉由地道到安全通道</p><hr /><p><strong>INPUT:</strong><br /> 每筆測資的第一行為一個整數 <code>N</code> ，代表地道的數量<br />接下來會有 <code>N</code>  行，每行有兩個整數 <code>s</code>  與 <code>t</code> ，代表這兩個連接點透過地道相連<br />當 <code>N</code>  為 0 時結束</p><hr /><p><strong>OUTPUT:</strong><br /> 先輸出第幾個 case，接著輸出最少的安全通道數量及此數量的情況數</p><h1 id="解題方法"><a class="anchor" href="#解題方法">#</a> 解題方法</h1><p>此題為點雙連通分量的應用題</p><div class="note info"><p>點雙連通分量：對於一個連通圖，任意兩點間至少存在兩條點不重複的路徑，那這個圖就是點雙連通 (biconnected)</p></div><p>點<span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9VVmElMjAtJTIwMTEwOC8=">這裡</span>詳細解釋點雙連通分量，及此題的另一種參考解法</p><hr /><p>先找到每個連通圖的割點數量</p><ul><li>對於兩個割點以上的連通圖，即使一個割點崩塌，仍可以透過另一個割點到安全通道。</li><li>如果只有一個割點，那連通圖中至少要有一個安全通道</li><li>如果沒有割點的連通圖，那至少要設置兩個安全通道，當一個安全通道崩塌時，還可以到達另一個安全通道</li></ul><p>總方法數的求法為只有一個割點的連通圖的方法數相乘<br />沒有割點的連通圖的方法數則為 C (N) 取 2</p><h1 id="參考程式碼"><a class="anchor" href="#參考程式碼">#</a> 參考程式碼</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_set></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> G<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>vector<span class="token operator">&lt;</span> unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> bcc<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> dfn<span class="token punctuation">,</span> low<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> iscut<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>stack<span class="token operator">&lt;</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> S<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> dep<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> par<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">int</span> child <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>dep<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token operator">++</span>child<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            S<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> u<span class="token punctuation">,</span> v <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>low<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">>=</span> dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                iscut<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> US<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>                    <span class="token keyword">int</span> cu <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span> cv <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span> S<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 </pre></td></tr><tr><td data-num="37"></td><td><pre>                    US<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>cu<span class="token punctuation">)</span><span class="token punctuation">,</span> US<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>cv<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cu <span class="token operator">==</span> u <span class="token operator">&amp;&amp;</span> cv <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                bcc<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>US<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token punctuation">&#125;</span>         </pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> v <span class="token operator">!=</span> par<span class="token punctuation">)</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>par <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> child <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> iscut<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token comment">// fast io</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    </pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token keyword">int</span> N<span class="token punctuation">,</span> cases <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> N<span class="token punctuation">,</span> N<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        <span class="token comment">// init</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        G<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bcc<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        dfn<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> low<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        iscut<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        dep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre>        <span class="token comment">// store data</span></pre></td></tr><tr><td data-num="66"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="67"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>            cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>            G<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>            G<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre></pre></td></tr><tr><td data-num="73"></td><td><pre>        <span class="token comment">// find bcc and bcc's element</span></pre></td></tr><tr><td data-num="74"></td><td><pre>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre></pre></td></tr><tr><td data-num="76"></td><td><pre>        <span class="token comment">// solve</span></pre></td></tr><tr><td data-num="77"></td><td><pre>        <span class="token keyword">long</span> <span class="token keyword">long</span> ans1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ans2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bcc<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> ans1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> ans2 <span class="token operator">=</span> bcc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>bcc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> bcc<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="80"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> j <span class="token operator">:</span> i<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>iscut<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>count<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">++</span>ans1<span class="token punctuation">,</span> ans2 <span class="token operator">*=</span> i<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="85"></td><td><pre></pre></td></tr><tr><td data-num="86"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Case "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>cases <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> ans1 <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> ans2 <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="88"></td><td><pre></pre></td></tr><tr><td data-num="89"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h1 id="參考文章"><a class="anchor" href="#參考文章">#</a> 參考文章:</h1><p><span class="exturl" data-url="aHR0cHM6Ly9yZXVybC5jYy9lOGxabW0=">https://reurl.cc/e8lZmm</span><br /><span class="exturl" data-url="aHR0cHM6Ly9yZXVybC5jYy9RM0FHNXE=">https://reurl.cc/Q3AG5q</span></p><hr />]]></content>
      
      
      <categories>
          
          <category> Uva Problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> UVa </tag>
            
            <tag> dfs </tag>
            
            <tag> bcc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ logical, relational and bitwise operators</title>
      <link href="cpp-tutorial/C-logical-relational-and-bitwise-operators/"/>
      <url>cpp-tutorial/C-logical-relational-and-bitwise-operators/</url>
      
        <content type="html"><![CDATA[<h1 id="邏輯運算子"><a class="anchor" href="#邏輯運算子">#</a> 邏輯運算子</h1><p>邏輯上共有 3 種運算子， <code>AND</code>   <code>OR</code>   <code>NOT</code></p><table><thead><tr><th style="text-align:center">符號</th><th style="text-align:center">解釋</th></tr></thead><tbody><tr><td style="text-align:center"><code>&amp;&amp;</code></td><td style="text-align:center">AND 且</td></tr><tr><td style="text-align:center"><code>||</code></td><td style="text-align:center">OR 或</td></tr><tr><td style="text-align:center"><code>!</code></td><td style="text-align:center">NOT 反轉</td></tr></tbody></table><hr /><p>這 3 種運算子回傳的結果是 <code>bool</code>  型態，也就是 <code>true</code>  或 <code>false</code> ，cout 出來則是 <code>1</code>  與 <code>0</code></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>  </pre></td></tr><tr><td data-num="2"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 印出 1 0 0 0</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>  </pre></td></tr><tr><td data-num="8"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 印出 1 1 1 0</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">;</span>  </pre></td></tr><tr><td data-num="14"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 印出 0 1</span></pre></td></tr></table></figure><ul><li>AND 運算子需要兩邊皆為 <code>true</code> ，才會輸出 <code>true</code></li><li>OR 運算子只要一邊為 <code>true</code> ，則結果為 <code>true</code></li><li>NOT 則會將 <code>true</code>  變 <code>false</code> ， <code>false</code>  變 <code>true</code></li></ul><div class="note info"><p>對任何變數或運算，只要值非零，則視為 <code>true</code> ；值為零，則視為 <code>false</code></p></div><hr /><h1 id="關係運算子"><a class="anchor" href="#關係運算子">#</a> 關係運算子</h1><p>C++ 提供了關係運算子，類似於數學的比較運算<br />關係運算子同樣是用來判斷 <code>true</code>  或 <code>false</code>  的運算子</p><table><thead><tr><th style="text-align:center">符號</th><th style="text-align:center">解釋</th></tr></thead><tbody><tr><td style="text-align:center"><code>&gt;</code></td><td style="text-align:center">大於</td></tr><tr><td style="text-align:center"><code>&gt;=</code></td><td style="text-align:center">不小於</td></tr><tr><td style="text-align:center"><code>&lt;</code></td><td style="text-align:center">小於</td></tr><tr><td style="text-align:center"><code>&lt;=</code></td><td style="text-align:center">不大於</td></tr><tr><td style="text-align:center"><code>==</code></td><td style="text-align:center">等於</td></tr><tr><td style="text-align:center"><code>!=</code></td><td style="text-align:center">不等於</td></tr></tbody></table><hr /><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 印出 0 0 1 1 0 1</span></pre></td></tr></table></figure><div class="note info"><p>這邊的 <code>==</code>  是條件判斷，判斷兩個值相不相等，而不是 <code>=</code>  賦值的意思</p></div><hr /><h1 id="位元運算子"><a class="anchor" href="#位元運算子">#</a> 位元運算子</h1><p>位元運算是根據數位設計上的邏輯，也就是它會將值轉為 2 進位進行運算<br />同樣有 <code>AND</code>   <code>OR</code>   <code>XOR</code>  等運算子</p><p>先來一個範例  <code>cout &lt;&lt; 7 &amp; 4;</code>  會輸出多少？<br />7 的 2 進位為 <code>0111</code> <br />4 的 2 進位為 <code>0100</code> <br />AND 運算結果為 <code>0100</code> ， <code>0100</code>  為 4 的 2 進位，所以輸出結果為 4</p><hr /><p>以下為常見的位元運算:</p><table><thead><tr><th style="text-align:center">符號</th><th style="text-align:center">解釋</th></tr></thead><tbody><tr><td style="text-align:center"><code>&amp;</code></td><td style="text-align:center">AND</td></tr><tr><td style="text-align:center"><code>|</code></td><td style="text-align:center">OR</td></tr><tr><td style="text-align:center"><code>^</code></td><td style="text-align:center">Xor</td></tr><tr><td style="text-align:center"><code>&lt;&lt;</code></td><td style="text-align:center">left shift 左移</td></tr><tr><td style="text-align:center"><code>&gt;&gt;</code></td><td style="text-align:center">right shift 右移</td></tr></tbody></table><hr /><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token number">7</span> <span class="token operator">&amp;</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token number">7</span> <span class="token operator">|</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token number">7</span> <span class="token operator">^</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 印出 4 7 3 14 3</span></pre></td></tr></table></figure><p><code>0111</code>  與 <code>0100</code>  進行 OR 運算，結果為 <code>0111</code> ，輸出 7<br /> <code>0111</code>  與 <code>0100</code>  進行 XOR 運算，結果為 <code>0011</code> ，輸出 3<br /> (詳細的 XOR 位元運算，可以參考<span class="exturl" data-url="aHR0cHM6Ly93d3cubGFycnlzcHJvZ25vdGVzLmNvbS9YT1IlMjAlRTQlQkQlOEQlRTUlODUlODMlRTklODElOEIlRTclQUUlOTclRTQlQkIlOEIlRTclQjQlQjkv">這篇</span>)</p><p>前三個沒什麼問題，就是將值轉為 2 進位後進行運算<br />而後兩個稱為左 (右) 移運算子</p><ol><li><code>7 &lt;&lt; 1</code>  的意思是將 7 的 2 進位往左邊移動一格<br /> 7 的 2 進位 <code>0111</code> ，左移變成 <code>1110</code>  (缺項補 0)，於是輸出 14</li><li><code>7 &gt;&gt; 1</code>  右移的概念也一樣<br /> 7 的 2 進位 <code>0111</code> ，右移變成 <code>0011</code>  (缺項補 0)，於是輸出 3</li></ol><hr /><h1 id="利用位元運算子加速運算"><a class="anchor" href="#利用位元運算子加速運算">#</a> 利用位元運算子加速運算</h1><ul><li>如果要乘上一個 2 的倍數，能改用左移運算子加速<br /> <code>x *= 2;</code>  相當於  <code>x &lt;&lt; 1</code> <br /> <code>x *= 32</code>  相當於  <code>x &lt;&lt; 5</code></li></ul><hr /><ul><li>如果要除上一個 2 的倍數，能改用右移運算子加速<br /> <code>x /= 2;</code>  相當於  <code>x &gt;&gt; 1</code> <br /> <code>x /= 32</code>  相當於  <code>x &gt;&gt; 5</code></li></ul><hr /><ul><li>交換兩個數字<br />一般寫法:</li></ul><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// swap(x, y)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>tmp <span class="token operator">=</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>x <span class="token operator">=</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>y <span class="token operator">=</span> tmp<span class="token punctuation">;</span></pre></td></tr></table></figure><p>利用 XOR 運算子加速:</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// swap(x, y)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>x <span class="token operator">^=</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>y <span class="token operator">^=</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>x <span class="token operator">^=</span> y<span class="token punctuation">;</span></pre></td></tr></table></figure><hr /><ul><li>如果要取 2 的倍數的餘數，能改用 AND 運算子加速<br /> <code>x = 55 / 2;</code>  相當於  <code>x = 55 &amp; (2 - 1)</code> <br /> <code>x = 78 / 8;</code>  相當於  <code>x = 78 &amp; (8 - 1)</code></li></ul><hr />]]></content>
      
      
      <categories>
          
          <category> C++ Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ data type and basic operators</title>
      <link href="cpp-tutorial/C-data-type-and-basic-operators/"/>
      <url>cpp-tutorial/C-data-type-and-basic-operators/</url>
      
        <content type="html"><![CDATA[<h1 id="資料型態與宣告"><a class="anchor" href="#資料型態與宣告">#</a> 資料型態與宣告</h1><p>當我們要使用一個變數的時候，需要先對它進行宣告<br />例如:  <code>int a;</code> <br /> 意思是我們宣告一個資料型態為 int (整數) 的變數 a，a 裡面可以存固定範圍內的任何整數</p><p>以下是一些基本的資料型態:</p><table><thead><tr><th style="text-align:center">資料型態</th><th style="text-align:center">解釋</th><th style="text-align:center">儲存內容 &amp; 範圍</th><th style="text-align:center">補充</th></tr></thead><tbody><tr><td style="text-align:center">bool</td><td style="text-align:center">布林變數</td><td style="text-align:center">true 和 false</td><td style="text-align:center">true=1 false=0</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">整數</td><td style="text-align:center">2^-31 ~ 2^31-1</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">unsigned int</td><td style="text-align:center">正整數</td><td style="text-align:center">0 ~ 2^32-1</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">long long</td><td style="text-align:center">特大的整數</td><td style="text-align:center">2^-63 ~ 2^63-1</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">浮點數 (小數)</td><td style="text-align:center">有效位數 7 位</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">倍精確浮點數 (小數)</td><td style="text-align:center">有效位數 15 位</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">char</td><td style="text-align:center">字元</td><td style="text-align:center">0 ~ 255 (ASCII Code)</td><td style="text-align:center">以 <code>''</code>  表示</td></tr><tr><td style="text-align:center">string</td><td style="text-align:center">字串</td><td style="text-align:center">一連串的任意文字</td><td style="text-align:center">以 <code>&quot;&quot;</code>  表示</td></tr></tbody></table><hr /><p>變數宣告的標準語法為:  <code>資料型態 變數名稱 = 值:</code></p><p>範例:</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">bool</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">unsigned</span> <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">long</span> <span class="token keyword">long</span> d <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">float</span> e <span class="token operator">=</span> <span class="token number">3.56</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">double</span> f <span class="token operator">=</span> <span class="token number">9.0005</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">char</span> g <span class="token operator">=</span> <span class="token string">'y'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>string h <span class="token operator">=</span> <span class="token string">"mystring"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> c <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> d <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> e <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> f <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> g <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> h<span class="token punctuation">;</span></pre></td></tr></table></figure><p>輸出為:</p><pre><code>1-5 45 9993.56 9.0005y mystring</code></pre><hr /><p>變數名稱的命名規則:</p><ol><li>只能以英文字母及 <code>_</code> 開頭</li><li>只能包含英文字母、數字及 <code>_</code></li><li>保留字不能使用 (保留字為 cout, cin, int, char... 等)</li></ol><div class="note success"><p><code>int _abc;</code>   // 合法<br /> <code>int my_data_22;</code>   // 合法</p></div><div class="note danger"><p><code>int 12book;</code>   // 不合法<br /> <code>int cout;</code>   // 不合法</p></div><hr /><p>我們也可以一次宣告多個同型態的變數<br />例如:  <code>int a = 0, b, c;</code></p><hr /><div class="note primary"><p>補充:<br />C++11 之後新增了一個叫 auto 的資料型態<br />它會基於賦予的值自動判斷資料型態<br />例如:<br /> <code>auto a = 1;</code>   //auto 為 int 型態<br /> <code>auto b = 'c';</code>   //auto 為 char 型態<br />由於他是根據賦予的值決定資料型態，所以沒有賦予值的形況下無法使用 auto</p></div><div class="note info"><p>建議一開始還是直接宣告資料型態<br />等到以後對資料型態比較熟悉，或宣告極其複雜的資料型態的時候才使用</p></div><hr /><h1 id="基本運算子"><a class="anchor" href="#基本運算子">#</a> 基本運算子</h1><p>以下是 C++ 的基本運算子</p><table><thead><tr><th style="text-align:center">符號</th><th style="text-align:center">解釋</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加號</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">減號、負號</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘號</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除號</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">取餘數</td></tr><tr><td style="text-align:center">=</td><td style="text-align:center">指派</td></tr><tr><td style="text-align:center">++</td><td style="text-align:center">+1</td></tr><tr><td style="text-align:center">--</td><td style="text-align:center">-1</td></tr><tr><td style="text-align:center">()</td><td style="text-align:center">括號</td></tr></tbody></table><hr /><p>基本上，這些運算子的用法就跟數學運算一樣<br />範例 1:</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span> <span class="token comment">// 印出 6</span></pre></td></tr><tr><td data-num="4"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">-</span> b <span class="token operator">-</span> c<span class="token punctuation">;</span> <span class="token comment">// 印出 - 4</span></pre></td></tr><tr><td data-num="5"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">*</span> b <span class="token operator">*</span> c<span class="token punctuation">;</span> <span class="token comment">// 印出 6</span></pre></td></tr><tr><td data-num="6"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> c <span class="token operator">/</span> a<span class="token punctuation">;</span> <span class="token comment">// 印出 3</span></pre></td></tr><tr><td data-num="7"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token number">3</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 印出 1</span></pre></td></tr></table></figure><p>其中比較特別的是 <code>%</code>  取餘數，以上面的程式來看，它的意思是取 3 除以 2 的餘數，答案為 1</p><hr /><p>範例 2:</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// b = 1</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>b <span class="token operator">&lt;&lt;</span> a<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//b 印出 2, a 的值為 1，但印出 0</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">*</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 印出 3</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>a<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token operator">--</span>b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">;</span>  <span class="token comment">//a 印出 0, b 印出 1</span></pre></td></tr></table></figure><p>第二行中，運用到 <code>=</code>  指派運算子，將 a 的值 + 1 賦予 b，所以 b 的值為 0 + 1 = 1</p><p>第四行中，同樣是 <code>++</code> ，但是一個在變數前面，一個在變數後面<br />它們的區別是 <code>++b</code>  會將 b 先 + 1，再做剩餘的運算， <code>a++</code>  會先將 a 的值取出，做完運算再 + 1</p><div class="note primary"><p>實際上， <code>++a</code>  與 <code>a++</code>  是同時做 + 1<br /> <code>++a</code>  將 a + 1，之後傳出 a<br /> <code>a++</code>  會產生一個暫時的變數 temp，先將 temp = a，把 a + 1，再傳出 temp</p></div><p>第六行中，按照原本的順序是先乘除後加減，但是因為有括號，所以優先做括號內的運算</p><hr /><p>當你要在原本變數的基礎上進行運算時，能夠將寫法簡化，如下:<br /> <code>a += 1;</code>  與 <code>a = a + 1;</code>  相等<br /> <code>a -= 1;</code>  與 <code>a = a - 1;</code>  相等<br /> <code>a *= 1;</code>  與 <code>a = a * 1;</code>  相等<br /> <code>a /= 1;</code>  與 <code>a = a / 1;</code>  相等<br /> <code>a %= 1;</code>  與 <code>a = a % 1;</code>  相等</p><hr /><h1 id="註解"><a class="anchor" href="#註解">#</a> 註解</h1><p>C++ 的註解共有兩種寫法</p><ol><li>第一種是單行註解，以 <code>//</code>  表示， <code>//</code>  後面的所以文字皆為註解</li></ol><pre><code>//單行註解</code></pre><ol start="2"><li>第二種是多行註解，以 <code>/* */</code>  表示， <code>/* */</code>  內的文字皆為註解</li></ol><pre><code>/*多行註解*/</code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ input and output</title>
      <link href="cpp-tutorial/C-input-and-output/"/>
      <url>cpp-tutorial/C-input-and-output/</url>
      
        <content type="html"><![CDATA[<h1 id="hello-world"><a class="anchor" href="#hello-world">#</a> Hello world!</h1><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello world!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>大家一定都看過以上程式，通常這也是編譯器 (compiler) 預設的程式<br />接下來，就要看看它是怎麼運作的</p><h1 id="cin-與-cout"><a class="anchor" href="#cin-與-cout">#</a> cin 與 cout</h1><p>首先，我們需要 include 標頭檔 iostream  <code>#include &lt;iostream&gt;</code> <br /> 原因是 cin 及 cout 並非 C++ 本身定義的函式 (function)，如果要用到 cin 或 cout 就需要 include iostream</p><p>接下來，我們要寫  <code>using namespace std;</code>  這一行<br />它的意思是我們使用 iostream，也就是 C++ 函式庫中的函式<br />如果沒有加這一行，那之後用到 cin、cout 或其他函式的時候，都需要在前面加  <code>std::</code> <br /> 例如:  <code>std::cin &gt;&gt; a;</code>   <code>std::cout &lt;&lt; a;</code></p><pre><code>int main()&#123;    return 0;&#125;</code></pre><p>這邊照寫就好，是程式的框架，程式會從 main 函式開始執行</p><p>記得每行程式的結尾都要加上 <code>;</code>  結尾符號</p><hr /><p>cin 的標準格式為:  <code>std::cin &gt;&gt; 變數a &gt;&gt; 變數b;</code>  以空格隔開不同輸入<br /> cout 的標準格式為:  <code>std::cout &lt;&lt; 變數或敘述a &lt;&lt; 變數或敘述b;</code></p><p>變數可為不同的資料型態，例如:</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> a<span class="token punctuation">;</span>  <span class="token comment">// 整數</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">double</span> b<span class="token punctuation">;</span>  <span class="token comment">// 小數</span></pre></td></tr><tr><td data-num="3"></td><td><pre>string c<span class="token punctuation">;</span> <span class="token comment">// 字串</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span> <span class="token comment">// 輸入 0 2.5 xyz</span></pre></td></tr><tr><td data-num="6"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a:"</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">"  b:"</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">"  c:"</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">;</span></pre></td></tr></table></figure><p>輸出為:  <code>a:0  b:2.5  c:xyz</code> <br /> <code>&quot;&quot;</code>  雙引號內可打任何的文字，會直接印出<br /> (關於各種資料型態，會在下一篇詳細介紹)</p><hr /><p>為什麼上面 cout 要寫 <code>變數或敘述a</code>  呢？那是因為 cout 裡面也可以放運算式</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">+</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">-</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">*</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span> <span class="token comment">// 分別為加減乘除</span></pre></td></tr></table></figure><p>輸出為:  <code>3 -1 2 0</code>  (整數除法為無條件捨去)</p><hr /><p>另外，cout 及 cin 也可以寫成多行格式，例如:</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>cin <span class="token operator">>></span> a</pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">>></span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> a</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">;</span></pre></td></tr></table></figure><p>一般可能看起來很奇怪，但是在需要大量輸入輸出時，可以讓程式碼更加易懂</p><hr /><p>cout 中的換行有兩種寫法</p><ol><li><code>cout &lt;&lt; &quot;\n&quot;;</code>  或  <code>cout &lt;&lt; '\n';</code></li><li><code>cout &lt;&lt; endl;</code> <br /> 兩種寫法達成的效果是一樣的<br />如果要換多行，則增加 <code>\n</code>  或 <code>endl</code>  的數量即可</li></ol><p>例如：換三行</p><ol><li><code>cout &lt;&lt; &quot;\n\n\n&quot;;</code></li><li><code>cout &lt;&lt; endl &lt;&lt; endl &lt;&lt; endl;</code></li></ol><hr /><h1 id="scanf-與-printf"><a class="anchor" href="#scanf-與-printf">#</a> scanf 與 printf</h1><p>scanf 與 printf 則需要 include 標頭檔 stdio.h  <code>#include &lt;stdio.h&gt;</code></p><hr /><p>scanf 的標準格式為:  <code>scanf(&quot;變數型態&quot;, &amp;變數a);</code> <br />printf 的標準格式為:  <code>printf(&quot;變數型態&quot;, 變數或敘述a);</code></p><div class="note info"><p>scanf 與 printf 的變數型態必須正確，不然可能會造成錯誤輸出</p></div><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'y'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %f %c\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %f %c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 輸入 5 23.56 p</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %f %c"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>輸出為:<br /> <code>0 2.5 y</code> <br /> <code>5 23.56 p</code> <br /> 可以發現輸入到變數 a b c 的值會直接覆蓋原本的值</p><div class="note info"><p>使用 scanf 的時候，變數前須加上 <code>&amp;</code>  符號</p></div><p><code>%d</code>  為整數<br /> <code>%f</code>  為浮點數 (小數)<br /> <code>%c</code>  為字元<br /> (同樣會在下一章中詳細介紹)</p><hr /><p>printf 同樣也能放運算式</p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d"</span><span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> a <span class="token operator">-</span> b<span class="token punctuation">,</span> a <span class="token operator">*</span> b<span class="token punctuation">,</span> a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>輸出為:  <code>7 -1 12 0</code></p><hr /><p>另外，printf 中換行只能使用 <code>\n</code> <br /> 相較於 cin 與 cout，scanf 與 printf 的執行速度比較快</p><hr /><h1 id="cin-cout-速度優化"><a class="anchor" href="#cin-cout-速度優化">#</a> cin cout 速度優化</h1><p>前面提到，一般情況下 cin 及 cout 的速度會比 scanf 及 printf 慢<br />原因是 cin 及 cout 會與 stdio 中的 input 及 output 同步，而且 cin 及 cout 都會先進到緩衝區<br />以下的程式能取消與 stdio 的同步，並強迫清空緩衝區</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><div class="note info"><p>輸入以上程式後，換行就只能用 <code>\n</code> ，使用 <code>endl</code>  的話就會破壞這個優化</p></div><hr />]]></content>
      
      
      <categories>
          
          <category> C++ Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
