{
    "version": "https://jsonfeed.org/version/1",
    "title": "",
    "subtitle": "a tranquil world",
    "icon": "https://www.pinghenotes.com/images/favicon.ico",
    "description": "",
    "home_page_url": "https://www.pinghenotes.com",
    "items": [
        {
            "id": "https://www.pinghenotes.com/cpp-tutorial/ImpactVest-Paper-Reading/",
            "url": "https://www.pinghenotes.com/cpp-tutorial/ImpactVest-Paper-Reading/",
            "title": "【ImpactVest： Rendering Spatio-Temporal Multilevel Impact Force Feedback on Body in VR】 Paper Reading",
            "date_published": "2023-04-03T06:43:28.000Z",
            "content_html": "<h1 id=\"impactvest在vr中對身體進行時空多層次衝擊力反饋的渲染-論文閱讀\"><a class=\"anchor\" href=\"#impactvest在vr中對身體進行時空多層次衝擊力反饋的渲染-論文閱讀\">#</a> 【ImpactVest: 在 VR 中對身體進行時空多層次衝擊力反饋的渲染】 論文閱讀</h1>\n<p><code>論文名稱</code> : ImpactVest: Rendering Spatio-Temporal Multilevel Impact Force Feedback on Body in VR<br />\n <code>論文出處</code> : ACM CHI 2022<br />\n <code>論文連結</code> : <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS8xMC4xMTQ1LzM0OTExMDIuMzUwMTk3MQ==\">ImpactVest: Rendering Spatio-Temporal Multilevel Impact Force Feedback on Body in VR</span><br />\n <code>論文作者</code> : Hsin-Ruey Tsai, Yu-So Liao, Chieh Tsai</p>\n<p><img data-src=\"https://imgur.com/YSaUcL5.png\" alt=\"ImpactVest picture 1\" /></p>\n<div class=\"note info\">\n<p>ImpactVest 擁有 3x3 個撞擊裝置，提供時空多層次的撞擊力反饋。<br />\n上圖中，三個撞擊裝置會按照強度由高到低依次模擬切割的感覺。<br />\n下圖中，正中心的撞擊裝置會受到更強的撞擊力。</p>\n</div>\n<h1 id=\"abstract-摘要\"><a class=\"anchor\" href=\"#abstract-摘要\">#</a> Abstract 摘要</h1>\n<p>過去的研究強調了對頭部、四肢的觸覺衝擊反饋增強 VR 的真實感，但對於身體部位的衝擊反饋較少討論。<br />\n本文提出了 ImpactVest，用於在身體上呈現時間空間多層次的衝擊反饋。作者使用彈力控制 9 個衝擊裝置，以不同的強度、位置和時間產生衝擊。<br />\n進行了以下 3 種研究:</p>\n<ul>\n<li><code>JND 研究</code> ：以了解使用者區分衝擊的強度</li>\n<li><code>時間間隔閥值研究</code> ：區分兩個衝擊波是同時衝擊、連續衝擊、或離散衝擊</li>\n<li><code>VR 體驗研究</code> ：驗證 ImpactVest 的衝擊反饋增強 VR 的真實感</li>\n</ul>\n<p><code>Keywords: Haptics, force feedback, impact, wearable device, virtual reality</code></p>\n<h1 id=\"1-introduction-介紹\"><a class=\"anchor\" href=\"#1-introduction-介紹\">#</a> 1 Introduction 介紹</h1>\n<p>透過觸覺反饋來增強 VR 的真實感是近年來被廣泛研究的議題。<br />\n在 VR 中，各種不同的撞擊效果，例如在射擊遊戲中被槍擊或手榴彈爆炸、或在格鬥遊戲中被拳打腳踢、甚至被劍砍，都是常見的。<br />\n這種撞擊力不僅會影響到使用者的頭部、四肢，也會影響到他們的身體。<br />\n身體相對於其他部位擁有更大的表面積，透過在身體上排列多個衝擊裝置，使用者可以感受到不同層次的撞擊，並且可以透過不同的空間和時間組合產生不同的感覺，甚至產生一種連續的撞擊效果，從而提高 VR 的多樣性。</p>\n<p>本文提出了以下貢獻:</p>\n<ul>\n<li>在身體呈現時空多層次的衝擊反饋，並提供瞬間且強烈的衝擊反饋</li>\n<li>區分對身體的衝擊力</li>\n<li>研究 3 種衝擊反饋的時間間隔閥值 (同時衝擊、連續衝擊、或離散衝擊)</li>\n<li>與震動觸覺模式相比，更能增強 VR 的真實感</li>\n<li>提出 ImpactVest 幾個應用場景</li>\n</ul>\n<h1 id=\"2-related-work-先前文獻\"><a class=\"anchor\" href=\"#2-related-work-先前文獻\">#</a> 2 Related Work 先前文獻</h1>\n<ol>\n<li><code>振動觸覺驅動</code> 、 <code>氣動驅動</code> 、 <code>電機牽引</code> 、 <code>螺旋槳牽引</code> 呈現包括衝擊在內的各種類型的觸覺反饋，儘管這些方式模擬了有效的觸覺反饋，但這種反饋並不是產生即時與強烈的衝擊力。</li>\n<li><code>利用電力刺激肌肉</code> 、 <code>氣流噴射</code> 、 <code>彈力</code> 呈現衝擊力反饋，對使用者的頭部和四肢產生影響，但這個方法並不關注對身體部位的衝擊。</li>\n</ol>\n<p><code>總結</code> ：以前的論文比較多研究頭部與四肢的衝擊，少數使用振動觸覺驅動、氣動驅動的時間空間觸覺反饋模式，因為裝置的侷限性，無法提供夠強大的衝擊力。</p>\n<h1 id=\"3-impactvest-介紹與架構\"><a class=\"anchor\" href=\"#3-impactvest-介紹與架構\">#</a> 3 ImpactVest 介紹與架構</h1>\n<h2 id=\"31-design-considerations-設計考量\"><a class=\"anchor\" href=\"#31-design-considerations-設計考量\">#</a> 3.1 Design Considerations 設計考量</h2>\n<ul>\n<li><code>真實感</code> ：為了呈現真實的衝擊反饋，力的衝擊需要足夠快，因此使用彈力來呈現即時的衝擊反饋。</li>\n<li><code>多功能性</code> : ImpactVest 呈現空間和時間的多層次衝擊反饋，甚至可以連續碰撞，以適用於多種 VR 應用。</li>\n<li><code>舒適與安全</code> ：雖然更強的衝擊反饋可以實現更刺激與真實的 VR 體驗，但舒適和安全仍然是第一優先的考量</li>\n<li><code>移動性</code> ：可穿戴設備的能讓使用者在 VR 中自由移動和探索</li>\n</ul>\n<p><img data-src=\"https://imgur.com/ZoRdBlz.png\" alt=\"ImpactVest picture 2\" /></p>\n<div class=\"note info\">\n<p>ImpactVest 裝置結構圖。</p>\n</div>\n<h2 id=\"32-implementation-實行\"><a class=\"anchor\" href=\"#32-implementation-實行\">#</a> 3.2 Implementation 實行</h2>\n<p>ImpactVest 由九個衝擊裝置組成，排列在一個 3×3 的背心上。<br />\n每個衝擊裝置都由鬆緊帶、馬達、機械式制動器 (mechanical brake)、砲身和影響代理 (impact proxy) 組成。</p>\n<p><img data-src=\"https://imgur.com/DqKloB1.png\" alt=\"ImpactVest picture 3\" /></p>\n<div class=\"note info\">\n<p>衝擊裝置的位置。</p>\n</div>\n<p>進行了一個試驗以決定九個衝擊裝置的位置，遵循以下原則:</p>\n<ol>\n<li>不應該傷害使用者，符合舒適和安全的設計考量。</li>\n<li>不應該使使用者難以感受到衝擊，所以衝擊裝置需要緊密附著於平整的身體部位。</li>\n</ol>\n<p><img data-src=\"https://imgur.com/EnXIMiF.png\" alt=\"ImpactVest picture 4\" /></p>\n<div class=\"note info\">\n<p>實際穿戴 ImpactVest 示意圖。</p>\n</div>\n<h1 id=\"4-just-noticeable-difference-study-jnd研究\"><a class=\"anchor\" href=\"#4-just-noticeable-difference-study-jnd研究\">#</a> 4 Just-Noticeable difference Study JND 研究</h1>\n<p>感知在身體的不同部位上可能是不同的，例如胸部、肋骨和腹部。<br />\n此外，由於身體的前側不是一個平面，衝擊裝置可能以不同的緊密程度接觸身體部位。<br />\n這種現象不僅存在於不同性別或個人之間，也存在於同一個使用者之間。<br />\n所以本文在不同部位分別進行了 JND 研究，得到了最好與最差的情況。</p>\n<div class=\"note info\">\n<p><code>JND</code>  全名: Just-noticeable difference (最小可覺差)<br />\n 代表人類或者是動物，對於某一特定的感官刺激所能察覺的最小改變。</p>\n</div>\n<h2 id=\"41-apparatus-and-participants-裝置與參與者\"><a class=\"anchor\" href=\"#41-apparatus-and-participants-裝置與參與者\">#</a> 4.1 Apparatus and Participants 裝置與參與者</h2>\n<p>一共招募了 12 名參與者。<br />\n參與者穿著 ImpactVest，配戴 Vive Pro HMD 頭戴式裝置阻絕現實世界中的視線，並佩戴耳機防止噪音。</p>\n<h2 id=\"42-force-stimuli-力的刺激\"><a class=\"anchor\" href=\"#42-force-stimuli-力的刺激\">#</a> 4.2 Force Stimuli 力的刺激</h2>\n<p>進行 JND 研究時，需要量化刺激強度。<br />\n所以本文建造了一個裝置以測量馬達轉速與衝擊力之間的關係。</p>\n<p><img data-src=\"https://imgur.com/Z7zbksp.png\" alt=\"ImpactVest picture 5\" /></p>\n<div class=\"note info\">\n<p>a. 測量衝擊裝置的設置。<br />\nb. 力量感測器測量到的衝擊力。<br />\nc. 馬達轉速與衝擊力之間的關係。</p>\n</div>\n<h2 id=\"43-task-and-procedure-任務與程序\"><a class=\"anchor\" href=\"#43-task-and-procedure-任務與程序\">#</a> 4.3 Task and Procedure 任務與程序</h2>\n<p>每一次試驗中會呈現三個衝擊力度的刺激，包括兩個 <code>參考刺激(S)</code>  和一個 <code>測試刺激(S ± △S)</code> 。</p>\n<ul>\n<li><code>S</code>  被設置為 2N，是刺激強度範圍中間的強度。</li>\n<li><code>△S</code>  是一個自適應決定的正數，表示參考和測試刺激之間的力度差異。</li>\n</ul>\n<p>受測者使用控制器選擇哪個刺激與其他不同，並依據受測者的反應決定下一輪試驗的 <code>△S</code> 。<br />\n初始 <code>△S</code>  為 0.2N。如果受測者連續兩次回答正確 (選擇 <code>測試刺激(S ± △S)</code> )， <code>△S</code>  會減少 0.2N。如果他們每次回答錯誤， <code>△S</code>  會增加 0.2N。</p>\n<p>實驗總共會進行 <code>8次反轉</code> ，前 2 次的 <code>△S</code>  為 0.2N，後 6 次為 0.1N。<br />\n判斷為 <code>反轉</code> 的條件如下:</p>\n<ul>\n<li>當 <code>△S</code>  由減少變成增加 (使用者回答正確變成回答錯誤)</li>\n<li>當 <code>△S</code>  由增加變成減少 (使用者回答錯誤變成回答正確)</li>\n<li>當 <code>△S = 0</code></li>\n<li>當 <code>△S &gt; 1.1N</code></li>\n</ul>\n<p>最後的結果會由後 6 次 <code>反轉</code> 的平均值決定。<br />\n每次試驗的三個刺激的順序是隨機的。包括第一排左 / 右和中間衝擊裝置的兩個位置被平衡地排列。</p>\n<h2 id=\"44-results-and-discussion-結果與討論\"><a class=\"anchor\" href=\"#44-results-and-discussion-結果與討論\">#</a> 4.4 Results and Discussion 結果與討論</h2>\n<p>在 <code>最佳情況下的平均閾值為0.935N(JND=46.75%)</code>  和 <code>最差情況下的0.942N(JND=47.1%)</code> ，兩者之間沒有顯著差異。<br />\n這些結果顯示，衝擊力大小的變化必須高於或低於當前衝擊力至少 <code>47.1%</code> ，使用者才能清楚地區分出差異。</p>\n<p><img data-src=\"https://imgur.com/SykQp8l.png\" alt=\"ImpactVest picture 6\" /></p>\n<div class=\"note info\">\n<p>左 / 右（最佳情況）和中間（最差情況）撞擊裝置位置的 JND 研究結果。</p>\n</div>\n<h1 id=\"5-time-interval-threshold-study-時間間隔閥值研究\"><a class=\"anchor\" href=\"#5-time-interval-threshold-study-時間間隔閥值研究\">#</a> 5 Time Interval Threshold Study 時間間隔閥值研究</h1>\n<p>對於呈現不同的時空多層次衝擊力反饋，兩次衝擊刺激之間的時間間隔至關重要。本文在此定義兩個衝擊刺激之間的同時、連續和離散衝擊。</p>\n<ol>\n<li>當兩個衝擊刺激開始的時間間隔太短，幾乎為 0，並低於時間閾值 <code>t1</code>  時，使用者會感知到在同一時間呈現的衝擊刺激，這被定義為 <code>同時衝擊刺激(0 ≤ time interval &lt; t1)</code> 。</li>\n<li>當時間間隔太長，超過時間閾值 <code>t2</code>  時，使用者會感覺到兩個離散的衝擊刺激，這被定義為 <code>離散衝擊刺激(t2 &lt; time interval)</code> 。</li>\n<li>當時間間隔介於 <code>t1</code>  和 <code>t2</code>  之間時，使用者可能會感知到連續的觸覺衝擊，這被定義為 <code>連續衝擊刺激(t1 &lt; time interval &lt; t2)</code> 。</li>\n</ol>\n<p>進行了這項研究，以找出時間間隔閾值  <code>t1</code>  和  <code>t2</code> ，以區分這三種類型的衝擊。 <code>t1</code>  和  <code>t2</code>  也代表了產生連續衝擊的時間間隔下限和上限。</p>\n<h2 id=\"51-apparatus-and-participants-裝置與參與者\"><a class=\"anchor\" href=\"#51-apparatus-and-participants-裝置與參與者\">#</a> 5.1 Apparatus and Participants 裝置與參與者</h2>\n<p>與上一個研究相同。</p>\n<h2 id=\"52-task-and-procedure-任務與程序\"><a class=\"anchor\" href=\"#52-task-and-procedure-任務與程序\">#</a> 5.2 Task and Procedure 任務與程序</h2>\n<p>參與者穿上 ImpactVest 並在站立時感受衝擊刺激。一個試驗中會從兩個不同的衝擊裝置產生兩個衝擊刺激。<br />\n基於上一個研究的結果，衝擊力被設置為  <code>2N</code> 。</p>\n<ol>\n<li>對於時間間隔上限，兩個衝擊刺激之間的初始時間間隔為  <code>160ms</code> ，參與者被問及是否感受到 <code>離散</code> 的衝擊刺激， <code>是</code> 則時間間隔會減少。 <code>否</code> 則間隔將增加。</li>\n<li>對於時間間隔下限，兩個衝擊刺激之間的初始時間間隔為  <code>0ms</code> ，參與者被問及是否感受到 <code>同時</code> 的衝擊刺激， <code>是</code> 則時間間隔會增加。 <code>否</code> 則間隔將減少。</li>\n</ol>\n<p><img data-src=\"https://imgur.com/axa6IgZ.png\" alt=\"ImpactVest picture 7\" /></p>\n<div class=\"note info\">\n<p>時間間隔閾值研究中的五種不同衝擊裝置距離。</p>\n</div>\n<h2 id=\"53-results-and-discussion-結果與討論\"><a class=\"anchor\" href=\"#53-results-and-discussion-結果與討論\">#</a> 5.3 Results and Discussion 結果與討論</h2>\n<p><code>時間間隔下限閾值(t1)</code>  的平均值為  <code>29.79 毫秒</code> 。<br />\n <code>時間間隔上限閾值(t2)</code>  的平均值為  <code>68.99 毫秒</code> 。<br />\n基於這些結果，本文將 <code>最高的下限值(25.2公分時的32.57毫秒)</code>  和 <code>最低的上限值(10.5公分時的61.87毫秒)</code>  進行平均，得出了連續衝擊在 ImpactVest 中的刺激之間的時間間隔為 <code>47.22毫秒</code> 。</p>\n<p><img data-src=\"https://imgur.com/UikufwS.png\" alt=\"ImpactVest picture 8\" /></p>\n<div class=\"note info\">\n<p>時間間隔閾值研究的結果。<br />\n長條圖表示標準差。</p>\n</div>\n<h1 id=\"6-vr-experience-study-vr體驗研究\"><a class=\"anchor\" href=\"#6-vr-experience-study-vr體驗研究\">#</a> 6 VR Experience Study VR 體驗研究</h1>\n<p>進行了一項 VR 體驗研究，觀察不同的時空多層次衝擊力反饋如何影響使用者的 VR 體驗。<br />\n並驗證 ImpactVest 的衝擊反饋比振動觸覺驅動更加真實。</p>\n<h2 id=\"61-apparatus-and-participants-裝置與參與者\"><a class=\"anchor\" href=\"#61-apparatus-and-participants-裝置與參與者\">#</a> 6.1 Apparatus and Participants 裝置與參與者</h2>\n<p>與上一個研究相同。</p>\n<p><img data-src=\"https://imgur.com/nWedDAb.png\" alt=\"ImpactVest picture 9\" /></p>\n<div class=\"note info\">\n<p>測量衝擊裝置之間延遲和衝擊水平 (左圖)。<br />\n振動馬達提供的振動力反饋 (中圖)。<br />\nVR 研究中所描述的衝擊裝置座標圖 (右圖)。</p>\n</div>\n<h2 id=\"62-task-and-procedure-任務與程序\"><a class=\"anchor\" href=\"#62-task-and-procedure-任務與程序\">#</a> 6.2 Task and Procedure 任務與程序</h2>\n<p>參與者一開始在一個房間裡，隨後出現七個敵人，包括兩名士兵、兩名劍客、兩名拳擊手和一門大砲。<br />\n分別以射擊、砍劈、拳擊和爆炸等方式逐一攻擊他們。</p>\n<p><img data-src=\"https://imgur.com/RuzrQ9B.png\" alt=\"ImpactVest picture 10\" /></p>\n<div class=\"note info\">\n<p>VR 體驗研究中，7 種場景不同的 ImpactVest 衝擊反饋。<br />\na. b. 士兵使用手槍、步槍射擊。<br />\nc. d. 劍士使用兩種軌跡擊劍。<br />\ne. f. 拳擊手進行兩種打擊。<br />\ng. 一門大炮發射炮彈爆炸。</p>\n</div>\n<h2 id=\"63-results-and-discussion-結果與討論\"><a class=\"anchor\" href=\"#63-results-and-discussion-結果與討論\">#</a> 6.3 Results and Discussion 結果與討論</h2>\n<p><img data-src=\"https://imgur.com/Oj3Rr6V.png\" alt=\"ImpactVest picture 11\" /></p>\n<div class=\"note info\">\n<p>驗證來自 ImpactVest 的觸覺反饋增強了 VR 真實感。<br />\nImpactVest 與振動觸覺驅動的體驗比較，包括真實性、可區分性、享受程度。</p>\n</div>\n<h1 id=\"7-limitations-and-future-work-限制與未來展望\"><a class=\"anchor\" href=\"#7-limitations-and-future-work-限制與未來展望\">#</a> 7 Limitations and Future Work 限制與未來展望</h1>\n<h2 id=\"目前限制\"><a class=\"anchor\" href=\"#目前限制\">#</a> 目前限制</h2>\n<p>無法從同一個衝擊裝置產生連續的衝擊刺激。<br />\n <code>解決方法1</code> : 採用更強力的馬達，雖然會增加衝擊裝置的重量，但是由整個身體支撐，所以在可接受的範圍。<br />\n <code>解決方法2</code> : 採用更強彈力帶或彈簧。</p>\n<h2 id=\"未來展望\"><a class=\"anchor\" href=\"#未來展望\">#</a> 未來展望</h2>\n<ol>\n<li>進一步減小衝擊裝置的大小，並將它們排列在更密集的佈局上，以獲得更高分辨率的衝擊反饋。</li>\n<li>結合振動觸覺驅動，以呈現更真實與多樣化的衝擊反饋。</li>\n</ol>\n<h1 id=\"8-conclusion-結論\"><a class=\"anchor\" href=\"#8-conclusion-結論\">#</a> 8 Conclusion 結論</h1>\n<p>本文提出了一種可穿戴設備 ImpactVest，使用 3×3 個衝擊裝置向身體呈現時空多層次衝擊力反饋。<br />\n並進行了 3 種研究，分別確認了衝擊強度的區分、不同衝擊的區分、明顯增強了 VR 體驗的真實感。</p>\n",
            "tags": [
                "C++ Tutorial",
                "Paper Reading",
                "VR"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-110-Balanced-Binary-Tree/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-110-Balanced-Binary-Tree/",
            "title": "LeetCode 110. Balanced Binary Tree",
            "date_published": "2022-04-27T16:27:44.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>以 <code>recursive</code>  遍歷判斷 <code>tree</code>  是否高度平衡</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * struct TreeNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     TreeNode *left;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     TreeNode *right;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">isBalanced</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token function\">findHeight</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">findHeight</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">isBalanced</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isBalanced</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">findHeight</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">findHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">findHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode",
                "tree"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-108-Convert-Sorted-Array-to-Binary-Search-Tree/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-108-Convert-Sorted-Array-to-Binary-Search-Tree/",
            "title": "LeetCode 108. Convert Sorted Array to Binary Search Tree",
            "date_published": "2022-04-27T16:27:34.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>以 <code>recursive</code>  遍歷將一個升冪的陣列轉成高度平衡的 <code>BST (二元搜尋樹)</code></p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * struct TreeNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     TreeNode *left;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     TreeNode *right;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">sortedArrayToBST</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">BST</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">BST</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">></span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">-</span> l<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        TreeNode<span class=\"token operator\">*</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        root<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> <span class=\"token function\">BST</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        root<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> <span class=\"token function\">BST</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode",
                "tree"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-104-Maximum-Depth-of-Binary-Tree/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-104-Maximum-Depth-of-Binary-Tree/",
            "title": "LeetCode 104. Maximum Depth of Binary Tree",
            "date_published": "2022-04-27T16:27:24.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>使用 <code>recursive</code>  遍歷判斷 <code>tree</code>  的深度</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * struct TreeNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     TreeNode *left;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     TreeNode *right;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode",
                "tree"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-101-Symmetric-Tree/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-101-Symmetric-Tree/",
            "title": "LeetCode 101. Symmetric Tree",
            "date_published": "2022-04-27T16:27:15.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>以 <code>recursive</code>  遍歷判斷 <code>tree</code>  是否對稱</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * struct TreeNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     TreeNode *left;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     TreeNode *right;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span> root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> l<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">*</span> r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>l <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>l <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">-></span>val <span class=\"token operator\">!=</span> r<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span> r<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span> r<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode",
                "tree"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-100-Same-Tree/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-100-Same-Tree/",
            "title": "LeetCode 100. Same Tree",
            "date_published": "2022-04-27T16:27:07.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>以 <code>recursive</code>  遍歷判斷 <code>tree</code>  中所有 <code>node</code>  的值是否相同</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * struct TreeNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     TreeNode *left;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     TreeNode *right;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">isSameTree</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">*</span> q<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>q<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>q<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p <span class=\"token operator\">&amp;&amp;</span> q<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>val <span class=\"token operator\">!=</span> q<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">isSameTree</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span> q<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isSameTree</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span> q<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode",
                "tree"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-94-Binary-Tree-Inorder-Traversal/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-94-Binary-Tree-Inorder-Traversal/",
            "title": "LeetCode 94. Binary Tree Inorder Traversal",
            "date_published": "2022-04-27T16:26:58.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p><code>inorder</code>  順序為 <code>左中右</code> <br />\n用 <code>stack</code>  儲存節點，先找到最左的 <code>node</code> ，再依序加入 <code>ret</code></p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * struct TreeNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     TreeNode *left;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     TreeNode *right;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        stack<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">></span> S<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        TreeNode<span class=\"token operator\">*</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>S<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> S<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> root <span class=\"token operator\">=</span> root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            cur <span class=\"token operator\">=</span> S<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            root <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>     </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode",
                "tree"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-88-Merge-Sorted-Array/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-88-Merge-Sorted-Array/",
            "title": "LeetCode 88. Merge Sorted Array",
            "date_published": "2022-04-27T16:26:49.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>將 <code>nums2</code>  存入 <code>nums1</code>  後進行 <code>sort</code></p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> nums1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-83-Remove-Duplicates-from-Sorted-List/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-83-Remove-Duplicates-from-Sorted-List/",
            "title": "LeetCode 83. Remove Duplicates from Sorted List",
            "date_published": "2022-04-27T16:26:38.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>如果當前 <code>node</code>  與下一個 <code>node</code>  相同，將當前 <code>node</code>  接到下下一個 <code>node</code></p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for singly-linked list.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * struct ListNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     ListNode *next;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     ListNode() : val(0), next(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">deleteDuplicates</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">&amp;&amp;</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>val <span class=\"token operator\">==</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span> cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">else</span> cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>        </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "list",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-70-Climbing-Stairs/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-70-Climbing-Stairs/",
            "title": "LeetCode 70. Climbing Stairs",
            "date_published": "2022-04-27T16:26:28.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>動態規劃<br />\n <code>dp[0]</code>  與 <code>dp[1]</code>  為 <code>1</code> <br />\n 之後 <code>dp[i]</code>  的方法數為 <code>dp[i - 1] + dp[i - 2]</code></p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-69-Sqrt-x/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-69-Sqrt-x/",
            "title": "LeetCode 69. Sqrt(x)",
            "date_published": "2022-04-27T16:26:21.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>開根號</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">mySqrt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-67-Add-Binary/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-67-Add-Binary/",
            "title": "LeetCode 67. Add Binary",
            "date_published": "2022-04-27T16:26:13.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>以另一個變數 <code>ret</code>  儲存 <code>a + b</code>  的值，並處理進位</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    string <span class=\"token function\">addBinary</span><span class=\"token punctuation\">(</span>string a<span class=\"token punctuation\">,</span> string b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        string <span class=\"token function\">ret</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> ret<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> ret<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            ret<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token operator\">++</span>ret<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-66-Plus-One/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-66-Plus-One/",
            "title": "LeetCode 66. Plus One",
            "date_published": "2022-04-27T16:26:06.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>將 <code>vector</code>  最後 <code>+1</code> <br />\n 需要一路往前處理進位</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">plusOne</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> digits<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token operator\">++</span>digits<span class=\"token punctuation\">[</span>digits<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>digits<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                digits<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token operator\">++</span>digits<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> digits<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-58-Length-of-Last-Word/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-58-Length-of-Last-Word/",
            "title": "LeetCode 58. Length of Last Word",
            "date_published": "2022-04-27T16:25:57.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>以 <code>stringstream</code>  拆分字串</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">lengthOfLastWord</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        string word<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        stringstream <span class=\"token function\">ss</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ss <span class=\"token operator\">>></span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-53-Maximum-Subarray/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-53-Maximum-Subarray/",
            "title": "LeetCode 53. Maximum Subarray",
            "date_published": "2022-04-27T16:25:50.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>以 <code>cur</code>  紀錄目前遍歷的最大值<br />\n以 <code>ret</code>  紀錄全部的最大值</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            cur <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> cur <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            ret <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-35-Search-Insert-Position/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-35-Search-Insert-Position/",
            "title": "LeetCode 35. Search Insert Position",
            "date_published": "2022-04-27T16:25:40.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>直接調用 <code>lower_bound</code>  找到位置，再減去 <code>nums.begin()</code>  得到位置的整數</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">searchInsert</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>        </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-28-Implement-strStr/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-28-Implement-strStr/",
            "title": "LeetCode 28. Implement strStr()",
            "date_published": "2022-04-27T16:25:28.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>先記錄 <code>haystack</code>  與 <code>needle</code>  的 <code>size</code> <br />\n 從 0 開始依序比對 <code>haystack 的 sub string</code>  與 <code>needle</code></p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">strStr</span><span class=\"token punctuation\">(</span>string haystack<span class=\"token punctuation\">,</span> string needle<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> hSize <span class=\"token operator\">=</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> nSize <span class=\"token operator\">=</span> needle<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nSize<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nSize <span class=\"token operator\">></span> hSize<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> hSize <span class=\"token operator\">-</span> nSize<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> nSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> needle<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-27-Remove-Element/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-27-Remove-Element/",
            "title": "LeetCode 27. Remove Element",
            "date_published": "2022-04-27T16:25:17.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>以 <code>i</code>  紀錄位置，依序遍歷</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">removeElement</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                nums<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-26-Remove-Duplicates-from-Sorted-Array/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-26-Remove-Duplicates-from-Sorted-Array/",
            "title": "LeetCode 26. Remove Duplicates from Sorted Array",
            "date_published": "2022-04-27T16:25:08.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>以變數 <code>i</code>  控制儲存位置，直接覆蓋重複的值</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">removeDuplicates</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>               nums<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-21-Merge-Two-Sorted-Lists/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-21-Merge-Two-Sorted-Lists/",
            "title": "LeetCode 21. Merge Two Sorted Lists",
            "date_published": "2022-04-27T16:24:59.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>使用遞迴</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for singly-linked list.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * struct ListNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     ListNode *next;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     ListNode() : val(0), next(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> l1<span class=\"token punctuation\">,</span> ListNode<span class=\"token operator\">*</span> l2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> l2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l2 <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> l1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1<span class=\"token operator\">-></span>val <span class=\"token operator\">&lt;</span> l2<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            l1<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>l1<span class=\"token operator\">-></span>next<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">return</span> l1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            l2<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>l1<span class=\"token punctuation\">,</span> l2<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">return</span> l2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "list",
                "LeetCode"
            ]
        }
    ]
}