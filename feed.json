{
    "version": "https://jsonfeed.org/version/1",
    "title": "",
    "subtitle": "a tranquil world",
    "icon": "https://www.pinghenotes.com/images/favicon.ico",
    "description": "",
    "home_page_url": "https://www.pinghenotes.com",
    "items": [
        {
            "id": "https://www.pinghenotes.com/cpp-tutorial/Privacy-preserving-big-data-analytics-paper-reading/",
            "url": "https://www.pinghenotes.com/cpp-tutorial/Privacy-preserving-big-data-analytics-paper-reading/",
            "title": "【Privacy-preserving big data analytics - A comprehensive survey】 Paper Reading",
            "date_published": "2023-10-05T07:15:42.000Z",
            "content_html": "<h1 id=\"隱私保護的大數據分析-全面調查-論文閱讀\"><a class=\"anchor\" href=\"#隱私保護的大數據分析-全面調查-論文閱讀\">#</a> 【隱私保護的大數據分析 - 全面調查】 論文閱讀</h1>\n<p><code>論文名稱</code> : Privacy-preserving big data analytics - A comprehensive survey<br />\n <code>論文出處</code> : Journal of Parallel and Distributed Computing<br />\n <code>論文連結</code> : <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2NpZW5jZWRpcmVjdC5jb20vc2NpZW5jZS9hcnRpY2xlL2Ficy9waWkvUzA3NDM3MzE1MTkzMDA1ODk=\">Privacy-preserving big data analytics - A comprehensive survey</span><br />\n <code>論文作者</code> : Hong-Yen Tran, Jiankun Hu</p>\n<h1 id=\"abstract-摘要\"><a class=\"anchor\" href=\"#abstract-摘要\">#</a> Abstract 摘要</h1>\n<p>本篇論文全面調查了對於保護隱私的大數據分析，以系統性的觀點進行了詳細的分類，並深入研究保護隱私的大數據分析的未來研究方向。</p>\n<h1 id=\"1-introduction-介紹\"><a class=\"anchor\" href=\"#1-introduction-介紹\">#</a> 1 Introduction 介紹</h1>\n<h2 id=\"11-motivation-動機\"><a class=\"anchor\" href=\"#11-motivation-動機\">#</a> 1.1 Motivation 動機</h2>\n<p>近年來，隨著社群網路、物聯網、雲端計算的發展，大數據被認為是經濟增長和技術創新的推動力。<br />\n然而，詳細完整的大量資料容易觸及到使用者的個人隱私，對於大數據的隱私問題也愈來愈被關注。<br />\n隨著隱私意識的提高，業界與學界都積極開發可行的解決方案，目標是在隱私和效率之間取得平衡。<br />\n本篇論文統整了研究界對於大數據隱私保護的最新研究，能作為一個分類法，用於導覽、理解研究進展以及識別現有文獻的不足。</p>\n<h2 id=\"12-related-survey-articles-先前文獻\"><a class=\"anchor\" href=\"#12-related-survey-articles-先前文獻\">#</a> 1.2 Related survey articles 先前文獻</h2>\n<ol>\n<li><code>隱私保護資料探勘</code> 由密碼學、資料庫和統計資料公開控制獨立探討，包括隨機化和匿名化技術，還考慮了分散式資料探勘的加密方法。</li>\n<li>使用 <code>MapReduce</code>  在雲端上進行全球記錄匿名化。</li>\n<li>以 <code>數學</code> 、 <code>通訊</code> 角度分析隱私保護框架。</li>\n</ol>\n<p><img data-src=\"https://i.imgur.com/nvV17IA.png\" alt=\"picture 1\" /></p>\n<div class=\"note info\">\n<p>相關的統整文章與本文的比較</p>\n</div>\n<h2 id=\"13-main-contributions-主要貢獻\"><a class=\"anchor\" href=\"#13-main-contributions-主要貢獻\">#</a> 1.3 Main contributions 主要貢獻</h2>\n<p>本文提出了以下貢獻:</p>\n<ul>\n<li>提供了涵蓋保護隱私的大數據分析的系統性和多維度觀點的調查。</li>\n<li>提出了幾個分類法，用於保護隱私的大數據分析。</li>\n<li>討論了隱私和機密性之間的區別，以及它們不同的保護方法。</li>\n<li>提供了一些選擇性的實際隱私相關情景，並以新興應用程序舉例說明。</li>\n<li>討論了在大數據背景下保護隱私所面臨的挑戰。</li>\n</ul>\n<h1 id=\"2-overview-of-big-data-analytics-大數據分析概述\"><a class=\"anchor\" href=\"#2-overview-of-big-data-analytics-大數據分析概述\">#</a> 2 Overview of big data analytics 大數據分析概述</h1>\n<p><img data-src=\"https://i.imgur.com/bn3O1nC.png\" alt=\"picture 2\" /></p>\n<div class=\"note info\">\n<p>圖 1 中提出的分類包括該領域的主要方面。<br />\n涵蓋了大數據的來源和特徵，開發高性能計算平台的需求，以及在考慮大數據安全和隱私的情況下，有效執行基本資料分析操作以提供智慧分析服務所需的適當資料處理方法。</p>\n</div>\n<p>首先要考慮的是大數據本身，包括<strong>資料來源</strong>和<strong>基本的內在資料特性</strong>。<br />\n大多數資料是從新興應用程序和技術中生成的，這些資料規模龐大，維度高，動態性強，實時性高，且大多數是雜訊多且品質較差的資料。<br />\n這些資料也以不同的形式呈現，包括 <code>結構化</code> 、 <code>半結構化</code> 和 <code>非結構化</code> 資料。<br />\n由於以上這些特性，大數據分析需要專用的平台和處理機制，例如 <code>分布式關係資料庫管理系統(RDBMS)</code> 、 <code>分布式文件系統(DFS)</code>  和 <code>NoSQL</code>  等。</p>\n<p>來自各種應用來源產生的大數據可能包含<strong>使用者的私人訊息</strong>。<br />\n這些敏感訊息可以以<strong>資料輸入</strong>的明確形式存在，也可以以<strong>資料輸出</strong>的隱含形式存在，後者在資料分析過程後才會顯示出來。<br />\n儘管資料分析在決策製定中非常有用，但它潛在地引發嚴重的隱私擔憂。</p>\n<h1 id=\"3-generic-privacy-preserving-mechanisms-通用隱私保護機制\"><a class=\"anchor\" href=\"#3-generic-privacy-preserving-mechanisms-通用隱私保護機制\">#</a> 3 Generic privacy-preserving mechanisms 通用隱私保護機制</h1>\n<p>隱私通常涉及到<strong>個人或群體的敏感訊息不被洩漏的意義</strong>。<br />\n儘管隱私和機密性有重疊之處，但從概念和保護方法的角度是不同的。</p>\n<ul>\n<li><code>機密性</code> 以資料為導向</li>\n<li><code>隱私</code> 以資料所有者為導向<br />\n概念上的差異導致了兩者在保護方法上的差異。</li>\n</ul>\n<p>在本部分中，將介紹通用的<strong>資料驅動</strong>和<strong>計算驅動</strong>的隱私保護機制。<br />\n本文開發了一個基於框架的隱私保護機制分類法，由 <code>保護方法</code> 、 <code>模型</code> 和 <code>指標</code> 組成。</p>\n<p><img data-src=\"https://i.imgur.com/eVjvB0e.png\" alt=\"picture 3\" /></p>\n<div class=\"note info\">\n<p>圖 2 中說明隱私保護機制通過滿足隱私模型的保護方法，並通過指標測量進行評估，確保資料的隱私性。</p>\n</div>\n<h2 id=\"31-protection-methods-保護方法\"><a class=\"anchor\" href=\"#31-protection-methods-保護方法\">#</a> 3.1 Protection methods 保護方法</h2>\n<p>保護隱私的保護方法分為 <code>加密方法 Cryptographic methods</code> 、 <code>非擾動方法 Non-perturbative methods</code>  和 <code>擾動方法 Perturbative methods</code> 。</p>\n<ol>\n<li><code>加密方法</code> 主要使用一些形式的同態加密方案實施的安全多方計算，通過將私人資料保持在加密形式中，然後在加密的個別資料項上執行功能，最後解密這些結果以獲得與在普通資料上執行相同功能時相同的結果來保護隱私。</li>\n<li><code>非擾動方法</code> 透過清理可識別的訊息來保護隱私，從而防止將身份與對手的背景訊息聯繫在一起。</li>\n<li><code>擾動方法</code> 的一般概念是干擾原始資料值，以使從干擾資料計算的統計訊息與原始資料的統計訊息差異不大。</li>\n</ol>\n<h2 id=\"32-models-模型\"><a class=\"anchor\" href=\"#32-models-模型\">#</a> 3.2 Models 模型</h2>\n<p>本部分介紹幾個重要的隱私模型，包括 <code>k-匿名 k-anonymity</code> 、 <code>l-多樣性  l-diversity</code> 、 <code>t-接近性 t-closeness</code>  和 <code>ϵ-差分隱私 ϵ-Differential privacy</code> 。</p>\n<ol>\n<li><code>k-匿名、l-多樣性、t-接近性</code> ，k - 匿名是一種匿名隱私模型，用於防範記錄關聯攻擊，為了防止一些關聯攻擊，進而演化出 <code>l-多樣性、t-接近性</code> 模型。</li>\n<li><code>ϵ-差分隱私</code> 是另一種基於擾動方法的隱私模型，目標是掩蓋在相鄰資料集上計算函數 f 的結果之間的差異，能夠抵抗大多數隱私攻擊，包括關聯攻擊。</li>\n</ol>\n<h2 id=\"33-metrics-指標\"><a class=\"anchor\" href=\"#33-metrics-指標\">#</a> 3.3 Metrics 指標</h2>\n<p>為了評估隱私保護方法的效能，通常會使用 <code>隱私指標</code> 和 <code>效用指標</code> 來衡量所提供的隱私水準以及保證的效用。</p>\n<ol>\n<li><code>隱私指標</code> 根據幾個常見特徵進行了分類。<br />\n1.1.  <code>對手模型</code> 描述了對手的目標以及假定擁有的能力。<br />\n1.2.  <code>資料來源</code> 描述了需要保護哪些資料，以及假定對手如何獲得對資料的存取權。<br />\n1.3.  <code>用於計算指標的輸入和輸出測量</code> 依照不同類型的輸入資料計算不同類型的隱私輸出值。</li>\n<li><code>效用指標</code> 用於量化受保護的資料在獲取資料分析目的方面的實用性。<br />\n2.1.  <code>一般目的</code> 通常使用資訊遺失指標來量化原始資料和轉換後資料之間的相似性。<br />\n2.2.  <code>特定目的</code> 以處理後的資料作為分析任務的輸入，評估結果的準確性或錯誤率並與原始資料的情況進行比較。</li>\n</ol>\n<h1 id=\"4-privacy-preserving-big-data-analytics-taxonomy-保護隱私的大數據分析分類法\"><a class=\"anchor\" href=\"#4-privacy-preserving-big-data-analytics-taxonomy-保護隱私的大數據分析分類法\">#</a> 4 Privacy-preserving big data analytics taxonomy 保護隱私的大數據分析分類法</h1>\n<h2 id=\"41-motivating-privacy-related-scenarios-激發隱私相關場景\"><a class=\"anchor\" href=\"#41-motivating-privacy-related-scenarios-激發隱私相關場景\">#</a> 4.1 Motivating privacy-related scenarios 激發隱私相關場景</h2>\n<p>考慮有三個主要參與者的隱私相關情境。</p>\n<ol>\n<li><code>資料擁有者</code> ：擁有原始資料的人</li>\n<li><code>資料持有者</code> ：從資料擁有者那裡收集資料的人</li>\n<li><code>資料消費者</code> ：執行資料分析的人</li>\n</ol>\n<p>以下將從以下情境中顯示一些通用的隱私擔憂，並在社群網路和其他新興技術中舉例說明這些擔憂。</p>\n<p><code>Scenario 1: Privacy-preserving big social network data publishing</code> <br />\n 資料持有者從資料擁有者收集資料，並將資料給資料消費者。<br />\n資料持有者需要實施保護措施，以避免資料擁有者受到隱私風險的威脅，包括身份洩漏風險。</p>\n<div class=\"note info\">\n<p>舉例:<br />\nFacebook 營運商收集來自 Facebook 使用者的資料並與 SNA 等研究人員分享這些資料。<br />\n但研究人員無法將每個資料項與特定的真實個人關聯起來。</p>\n</div>\n<hr />\n<p><code>Scenario 2: Secure Private Outsourced Data Search</code> <br />\n 資料擁有者將私人資料傳送給不受信任的資料持有者之前對其進行了加密。</p>\n<div class=\"note info\">\n<p>舉例:<br />\n 個人將他們的加密資料傳送給 Dropbox、Google Drives 等雲端服務提供商。<br />\n雲端服務提供商需要在保持資料和搜尋關鍵字隱私的同時，處理對其加密資料的搜尋查詢。</p>\n</div>\n<hr />\n<p><code>Scenario 3: Privacy-preserving learning over outsourced data</code> <br />\n 資料持有者同時扮演資料消費者的角色。<br />\n資料擁有者需要確保能獲得良好的服務，又不會洩漏自己的私人資料。</p>\n<div class=\"note info\">\n<p>舉例:<br />\n 一家商業公司選擇採用雲端機器學習服務來構建智慧大數據分析應用程式的學習模型。<br />\n該公司需要要求其資料必須保密，不得對外公開。</p>\n</div>\n<hr />\n<p><code>Scenario 4: Privacy-preserving collaborative learning with secure aggregation</code> <br />\n 當超過兩位資料擁有者需要在自己的資料上進行相同的學習任務時。<br />\n為了避免過度擬合並獲得更好的結果，共同構建一個共享的主模型，預期這個主模型將優於自己的本地模型。</p>\n<div class=\"note info\">\n<p>舉例:<br />\n 複數移動裝置使用者在編寫文件時使用 Google Messages，該應用程式可以預測下一個單詞。<br />\n由於文字訊息通常包含個人隱私訊息，因此每個使用者都能在自己的移動裝置上安全使用。</p>\n</div>\n<hr />\n<p><code>Scenario 5: Privacy-preserving model evaluating</code> <br />\n 為了使用資料持有者提供的學習服務，資料擁有者必須將資料發送給資料持有者。<br />\n要求是資料持有者不能知道原始輸入資料以及輸出預測。</p>\n<div class=\"note info\">\n<p>舉例:<br />\n 使用 Google Cloud Machine Learning、Azure Machine Learning 等雲端學習服務服務時，需要保持資料和結果預測的隱密性。</p>\n</div>\n<h2 id=\"42-proposed-taxonomy-擬議的分類法\"><a class=\"anchor\" href=\"#42-proposed-taxonomy-擬議的分類法\">#</a> 4.2 Proposed taxonomy 擬議的分類法</h2>\n<p><img data-src=\"https://i.imgur.com/z5RWnRX.png\" alt=\"picture 4\" /></p>\n<div class=\"note info\">\n<p>本文提出的隱私保護大數據分析分類法。</p>\n</div>\n<p><strong>隱私保護大數據分析</strong>的關鍵在於如何適應基本的隱私保護機制。<br />\n在保證大數據分析智慧應用的效率下，應對計算複雜性與更多隱私風險。<br />\n本部分將研究那些試圖解決這個具有挑戰性的問題的先前文獻<br />\n主要針對每個基本的資料分析操作 <code>資料準備</code> 、 <code>資料探索</code> 、 <code>資料探勘</code> 進行了探討</p>\n<hr />\n<p><code>Privacy-preserving data preparation 隱私保護資料準備</code> <br />\n由於社群媒體網路提供了大量的資料，包括半結構化圖形資料以及非結構化多媒體資料的多樣性和複雜性。<br />\n保護大型社群網路資料的隱私比保護傳統結構化的表格資料在關聯資料庫中更加具有挑戰性。</p>\n<hr />\n<p><code>Privacy-preserving data exploration 隱私保護資料探索</code> <br />\n處理高維度的查詢對於執行隱私保護的大數據分析操作相當重要。<br />\n例如相似性導向的服務，這些服務在各種資料分析應用中都是基礎。<br />\n但在大數據背景下，現有的隱私保護查詢或可搜索加密解決方案仍然在計算複雜性方面面臨著重大挑戰。</p>\n<hr />\n<p><code>Privacy-preserving data mining 隱私保護資料探勘</code> <br />\n隱私保護資料探勘主要採用加密和干擾的方法來解決三個目標：</p>\n<ol>\n<li>用於學習模型或使用現有模型的輸入資料的隱私。</li>\n<li>模型的隱私。</li>\n<li>模型輸出的隱私。<br />\n隱私保護方案通常與資料探勘演算法緊密結合，在資料集上保護可以從原始資料或合成資料中取得的特徵。</li>\n</ol>\n<h1 id=\"5-summary-and-open-research-directions-結論與開放研究方向\"><a class=\"anchor\" href=\"#5-summary-and-open-research-directions-結論與開放研究方向\">#</a> 5 Summary and open research directions 結論與開放研究方向</h1>\n<p>本文統整了隱私保護大數據分析領域的最新發展。<br />\n在介紹大數據通用分析和隱私保護方案方面提供了系統化的涵蓋，並提出了一種新的隱私保護大數據分析分類法。<br />\n特別關注了三個主要的隱私保護數據分析問題，包括資料發布、資料查詢和資料探勘。</p>\n<p>近年來，無論是業界還是學界都已經付出了大量努力來進行研究，但隱私保護大數據分析仍然具有不可否認的挑戰性。<br />\n並仍有改進現有方案以及開發新的新方法的空間，以提高性能和隱私水準。<br />\n以下列出了一些潛在的開放性研究問題:</p>\n<ol>\n<li>開發針對特定新興技術的應用導向隱私保護方案。</li>\n<li>隨著大數據時代雲端機器學習服務的興起，研究安全的機器學習服務可能是一個有前景但具有挑戰性的問題。</li>\n<li>研究在分佈式環境中，用於隱私保護的聯邦深度學習。</li>\n<li>在<strong>差分隱私</strong>框架內開發深度學習的新技術，並對隱私成本進行精細分析。</li>\n<li>基於所採用的加密工具，設計基於加密資料的新深度學習模型。</li>\n<li>研究對不同類型隱私攻擊的匿名化和干擾技術，以及對於對手的不同假設。</li>\n<li>采用博弈理論和對抗模型來解決資料使用效率與隱私之間的平衡問題。</li>\n</ol>\n",
            "tags": [
                "C++ Tutorial",
                "Paper Reading",
                "Information Security",
                "Big Data"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/cpp-tutorial/ImpactVest-Paper-Reading/",
            "url": "https://www.pinghenotes.com/cpp-tutorial/ImpactVest-Paper-Reading/",
            "title": "【ImpactVest： Rendering Spatio-Temporal Multilevel Impact Force Feedback on Body in VR】 Paper Reading",
            "date_published": "2023-04-03T06:43:28.000Z",
            "content_html": "<h1 id=\"impactvest在vr中對身體進行時空多層次衝擊力反饋的渲染-論文閱讀\"><a class=\"anchor\" href=\"#impactvest在vr中對身體進行時空多層次衝擊力反饋的渲染-論文閱讀\">#</a> 【ImpactVest: 在 VR 中對身體進行時空多層次衝擊力反饋的渲染】 論文閱讀</h1>\n<p><code>論文名稱</code> : ImpactVest: Rendering Spatio-Temporal Multilevel Impact Force Feedback on Body in VR<br />\n <code>論文出處</code> : ACM CHI 2022<br />\n <code>論文連結</code> : <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kbC5hY20ub3JnL2RvaS8xMC4xMTQ1LzM0OTExMDIuMzUwMTk3MQ==\">ImpactVest: Rendering Spatio-Temporal Multilevel Impact Force Feedback on Body in VR</span><br />\n <code>論文作者</code> : Hsin-Ruey Tsai, Yu-So Liao, Chieh Tsai</p>\n<p><img data-src=\"https://imgur.com/YSaUcL5.png\" alt=\"ImpactVest picture 1\" /></p>\n<div class=\"note info\">\n<p>ImpactVest 擁有 3x3 個撞擊裝置，提供時空多層次的撞擊力反饋。<br />\n上圖中，三個撞擊裝置會按照強度由高到低依次模擬切割的感覺。<br />\n下圖中，正中心的撞擊裝置會受到更強的撞擊力。</p>\n</div>\n<h1 id=\"abstract-摘要\"><a class=\"anchor\" href=\"#abstract-摘要\">#</a> Abstract 摘要</h1>\n<p>過去的研究強調了對頭部、四肢的觸覺衝擊反饋增強 VR 的真實感，但對於身體部位的衝擊反饋較少討論。<br />\n本文提出了 ImpactVest，用於在身體上呈現時間空間多層次的衝擊反饋。作者使用彈力控制 9 個衝擊裝置，以不同的強度、位置和時間產生衝擊。<br />\n進行了以下 3 種研究:</p>\n<ul>\n<li><code>JND 研究</code> ：以了解使用者區分衝擊的強度</li>\n<li><code>時間間隔閥值研究</code> ：區分兩個衝擊波是同時衝擊、連續衝擊、或離散衝擊</li>\n<li><code>VR 體驗研究</code> ：驗證 ImpactVest 的衝擊反饋增強 VR 的真實感</li>\n</ul>\n<p><code>Keywords: Haptics, force feedback, impact, wearable device, virtual reality</code></p>\n<h1 id=\"1-introduction-介紹\"><a class=\"anchor\" href=\"#1-introduction-介紹\">#</a> 1 Introduction 介紹</h1>\n<p>透過觸覺反饋來增強 VR 的真實感是近年來被廣泛研究的議題。<br />\n在 VR 中，各種不同的撞擊效果，例如在射擊遊戲中被槍擊或手榴彈爆炸、或在格鬥遊戲中被拳打腳踢、甚至被劍砍，都是常見的。<br />\n這種撞擊力不僅會影響到使用者的頭部、四肢，也會影響到他們的身體。<br />\n身體相對於其他部位擁有更大的表面積，透過在身體上排列多個衝擊裝置，使用者可以感受到不同層次的撞擊，並且可以透過不同的空間和時間組合產生不同的感覺，甚至產生一種連續的撞擊效果，從而提高 VR 的多樣性。</p>\n<p>本文提出了以下貢獻:</p>\n<ul>\n<li>在身體呈現時空多層次的衝擊反饋，並提供瞬間且強烈的衝擊反饋</li>\n<li>區分對身體的衝擊力</li>\n<li>研究 3 種衝擊反饋的時間間隔閥值 (同時衝擊、連續衝擊、或離散衝擊)</li>\n<li>與震動觸覺模式相比，更能增強 VR 的真實感</li>\n<li>提出 ImpactVest 幾個應用場景</li>\n</ul>\n<h1 id=\"2-related-work-先前文獻\"><a class=\"anchor\" href=\"#2-related-work-先前文獻\">#</a> 2 Related Work 先前文獻</h1>\n<ol>\n<li><code>振動觸覺驅動</code> 、 <code>氣動驅動</code> 、 <code>電機牽引</code> 、 <code>螺旋槳牽引</code> 呈現包括衝擊在內的各種類型的觸覺反饋，儘管這些方式模擬了有效的觸覺反饋，但這種反饋並不是產生即時與強烈的衝擊力。</li>\n<li><code>利用電力刺激肌肉</code> 、 <code>氣流噴射</code> 、 <code>彈力</code> 呈現衝擊力反饋，對使用者的頭部和四肢產生影響，但這個方法並不關注對身體部位的衝擊。</li>\n</ol>\n<p><code>總結</code> ：以前的論文比較多研究頭部與四肢的衝擊，少數使用振動觸覺驅動、氣動驅動的時間空間觸覺反饋模式，因為裝置的侷限性，無法提供夠強大的衝擊力。</p>\n<h1 id=\"3-impactvest-介紹與架構\"><a class=\"anchor\" href=\"#3-impactvest-介紹與架構\">#</a> 3 ImpactVest 介紹與架構</h1>\n<h2 id=\"31-design-considerations-設計考量\"><a class=\"anchor\" href=\"#31-design-considerations-設計考量\">#</a> 3.1 Design Considerations 設計考量</h2>\n<ul>\n<li><code>真實感</code> ：為了呈現真實的衝擊反饋，力的衝擊需要足夠快，因此使用彈力來呈現即時的衝擊反饋。</li>\n<li><code>多功能性</code> : ImpactVest 呈現空間和時間的多層次衝擊反饋，甚至可以連續碰撞，以適用於多種 VR 應用。</li>\n<li><code>舒適與安全</code> ：雖然更強的衝擊反饋可以實現更刺激與真實的 VR 體驗，但舒適和安全仍然是第一優先的考量</li>\n<li><code>移動性</code> ：可穿戴設備的能讓使用者在 VR 中自由移動和探索</li>\n</ul>\n<p><img data-src=\"https://imgur.com/ZoRdBlz.png\" alt=\"ImpactVest picture 2\" /></p>\n<div class=\"note info\">\n<p>ImpactVest 裝置結構圖。</p>\n</div>\n<h2 id=\"32-implementation-實行\"><a class=\"anchor\" href=\"#32-implementation-實行\">#</a> 3.2 Implementation 實行</h2>\n<p>ImpactVest 由九個衝擊裝置組成，排列在一個 3×3 的背心上。<br />\n每個衝擊裝置都由鬆緊帶、馬達、機械式制動器 (mechanical brake)、砲身和影響代理 (impact proxy) 組成。</p>\n<p><img data-src=\"https://imgur.com/DqKloB1.png\" alt=\"ImpactVest picture 3\" /></p>\n<div class=\"note info\">\n<p>衝擊裝置的位置。</p>\n</div>\n<p>進行了一個試驗以決定九個衝擊裝置的位置，遵循以下原則:</p>\n<ol>\n<li>不應該傷害使用者，符合舒適和安全的設計考量。</li>\n<li>不應該使使用者難以感受到衝擊，所以衝擊裝置需要緊密附著於平整的身體部位。</li>\n</ol>\n<p><img data-src=\"https://imgur.com/EnXIMiF.png\" alt=\"ImpactVest picture 4\" /></p>\n<div class=\"note info\">\n<p>實際穿戴 ImpactVest 示意圖。</p>\n</div>\n<h1 id=\"4-just-noticeable-difference-study-jnd研究\"><a class=\"anchor\" href=\"#4-just-noticeable-difference-study-jnd研究\">#</a> 4 Just-Noticeable difference Study JND 研究</h1>\n<p>感知在身體的不同部位上可能是不同的，例如胸部、肋骨和腹部。<br />\n此外，由於身體的前側不是一個平面，衝擊裝置可能以不同的緊密程度接觸身體部位。<br />\n這種現象不僅存在於不同性別或個人之間，也存在於同一個使用者之間。<br />\n所以本文在不同部位分別進行了 JND 研究，得到了最好與最差的情況。</p>\n<div class=\"note info\">\n<p><code>JND</code>  全名: Just-noticeable difference (最小可覺差)<br />\n 代表人類或者是動物，對於某一特定的感官刺激所能察覺的最小改變。</p>\n</div>\n<h2 id=\"41-apparatus-and-participants-裝置與參與者\"><a class=\"anchor\" href=\"#41-apparatus-and-participants-裝置與參與者\">#</a> 4.1 Apparatus and Participants 裝置與參與者</h2>\n<p>一共招募了 12 名參與者。<br />\n參與者穿著 ImpactVest，配戴 Vive Pro HMD 頭戴式裝置阻絕現實世界中的視線，並佩戴耳機防止噪音。</p>\n<h2 id=\"42-force-stimuli-力的刺激\"><a class=\"anchor\" href=\"#42-force-stimuli-力的刺激\">#</a> 4.2 Force Stimuli 力的刺激</h2>\n<p>進行 JND 研究時，需要量化刺激強度。<br />\n所以本文建造了一個裝置以測量馬達轉速與衝擊力之間的關係。</p>\n<p><img data-src=\"https://imgur.com/Z7zbksp.png\" alt=\"ImpactVest picture 5\" /></p>\n<div class=\"note info\">\n<p>a. 測量衝擊裝置的設置。<br />\nb. 力量感測器測量到的衝擊力。<br />\nc. 馬達轉速與衝擊力之間的關係。</p>\n</div>\n<h2 id=\"43-task-and-procedure-任務與程序\"><a class=\"anchor\" href=\"#43-task-and-procedure-任務與程序\">#</a> 4.3 Task and Procedure 任務與程序</h2>\n<p>每一次試驗中會呈現三個衝擊力度的刺激，包括兩個 <code>參考刺激(S)</code>  和一個 <code>測試刺激(S ± △S)</code> 。</p>\n<ul>\n<li><code>S</code>  被設置為 2N，是刺激強度範圍中間的強度。</li>\n<li><code>△S</code>  是一個自適應決定的正數，表示參考和測試刺激之間的力度差異。</li>\n</ul>\n<p>受測者使用控制器選擇哪個刺激與其他不同，並依據受測者的反應決定下一輪試驗的 <code>△S</code> 。<br />\n初始 <code>△S</code>  為 0.2N。如果受測者連續兩次回答正確 (選擇 <code>測試刺激(S ± △S)</code> )， <code>△S</code>  會減少 0.2N。如果他們每次回答錯誤， <code>△S</code>  會增加 0.2N。</p>\n<p>實驗總共會進行 <code>8次反轉</code> ，前 2 次的 <code>△S</code>  為 0.2N，後 6 次為 0.1N。<br />\n判斷為 <code>反轉</code> 的條件如下:</p>\n<ul>\n<li>當 <code>△S</code>  由減少變成增加 (使用者回答正確變成回答錯誤)</li>\n<li>當 <code>△S</code>  由增加變成減少 (使用者回答錯誤變成回答正確)</li>\n<li>當 <code>△S = 0</code></li>\n<li>當 <code>△S &gt; 1.1N</code></li>\n</ul>\n<p>最後的結果會由後 6 次 <code>反轉</code> 的平均值決定。<br />\n每次試驗的三個刺激的順序是隨機的。包括第一排左 / 右和中間衝擊裝置的兩個位置被平衡地排列。</p>\n<h2 id=\"44-results-and-discussion-結果與討論\"><a class=\"anchor\" href=\"#44-results-and-discussion-結果與討論\">#</a> 4.4 Results and Discussion 結果與討論</h2>\n<p>在 <code>最佳情況下的平均閾值為0.935N(JND=46.75%)</code>  和 <code>最差情況下的0.942N(JND=47.1%)</code> ，兩者之間沒有顯著差異。<br />\n這些結果顯示，衝擊力大小的變化必須高於或低於當前衝擊力至少 <code>47.1%</code> ，使用者才能清楚地區分出差異。</p>\n<p><img data-src=\"https://imgur.com/SykQp8l.png\" alt=\"ImpactVest picture 6\" /></p>\n<div class=\"note info\">\n<p>左 / 右（最佳情況）和中間（最差情況）撞擊裝置位置的 JND 研究結果。</p>\n</div>\n<h1 id=\"5-time-interval-threshold-study-時間間隔閥值研究\"><a class=\"anchor\" href=\"#5-time-interval-threshold-study-時間間隔閥值研究\">#</a> 5 Time Interval Threshold Study 時間間隔閥值研究</h1>\n<p>對於呈現不同的時空多層次衝擊力反饋，兩次衝擊刺激之間的時間間隔至關重要。本文在此定義兩個衝擊刺激之間的同時、連續和離散衝擊。</p>\n<ol>\n<li>當兩個衝擊刺激開始的時間間隔太短，幾乎為 0，並低於時間閾值 <code>t1</code>  時，使用者會感知到在同一時間呈現的衝擊刺激，這被定義為 <code>同時衝擊刺激(0 ≤ time interval &lt; t1)</code> 。</li>\n<li>當時間間隔太長，超過時間閾值 <code>t2</code>  時，使用者會感覺到兩個離散的衝擊刺激，這被定義為 <code>離散衝擊刺激(t2 &lt; time interval)</code> 。</li>\n<li>當時間間隔介於 <code>t1</code>  和 <code>t2</code>  之間時，使用者可能會感知到連續的觸覺衝擊，這被定義為 <code>連續衝擊刺激(t1 &lt; time interval &lt; t2)</code> 。</li>\n</ol>\n<p>進行了這項研究，以找出時間間隔閾值  <code>t1</code>  和  <code>t2</code> ，以區分這三種類型的衝擊。 <code>t1</code>  和  <code>t2</code>  也代表了產生連續衝擊的時間間隔下限和上限。</p>\n<h2 id=\"51-apparatus-and-participants-裝置與參與者\"><a class=\"anchor\" href=\"#51-apparatus-and-participants-裝置與參與者\">#</a> 5.1 Apparatus and Participants 裝置與參與者</h2>\n<p>與上一個研究相同。</p>\n<h2 id=\"52-task-and-procedure-任務與程序\"><a class=\"anchor\" href=\"#52-task-and-procedure-任務與程序\">#</a> 5.2 Task and Procedure 任務與程序</h2>\n<p>參與者穿上 ImpactVest 並在站立時感受衝擊刺激。一個試驗中會從兩個不同的衝擊裝置產生兩個衝擊刺激。<br />\n基於上一個研究的結果，衝擊力被設置為  <code>2N</code> 。</p>\n<ol>\n<li>對於時間間隔上限，兩個衝擊刺激之間的初始時間間隔為  <code>160ms</code> ，參與者被問及是否感受到 <code>離散</code> 的衝擊刺激， <code>是</code> 則時間間隔會減少。 <code>否</code> 則間隔將增加。</li>\n<li>對於時間間隔下限，兩個衝擊刺激之間的初始時間間隔為  <code>0ms</code> ，參與者被問及是否感受到 <code>同時</code> 的衝擊刺激， <code>是</code> 則時間間隔會增加。 <code>否</code> 則間隔將減少。</li>\n</ol>\n<p><img data-src=\"https://imgur.com/axa6IgZ.png\" alt=\"ImpactVest picture 7\" /></p>\n<div class=\"note info\">\n<p>時間間隔閾值研究中的五種不同衝擊裝置距離。</p>\n</div>\n<h2 id=\"53-results-and-discussion-結果與討論\"><a class=\"anchor\" href=\"#53-results-and-discussion-結果與討論\">#</a> 5.3 Results and Discussion 結果與討論</h2>\n<p><code>時間間隔下限閾值(t1)</code>  的平均值為  <code>29.79 毫秒</code> 。<br />\n <code>時間間隔上限閾值(t2)</code>  的平均值為  <code>68.99 毫秒</code> 。<br />\n基於這些結果，本文將 <code>最高的下限值(25.2公分時的32.57毫秒)</code>  和 <code>最低的上限值(10.5公分時的61.87毫秒)</code>  進行平均，得出了連續衝擊在 ImpactVest 中的刺激之間的時間間隔為 <code>47.22毫秒</code> 。</p>\n<p><img data-src=\"https://imgur.com/UikufwS.png\" alt=\"ImpactVest picture 8\" /></p>\n<div class=\"note info\">\n<p>時間間隔閾值研究的結果。<br />\n長條圖表示標準差。</p>\n</div>\n<h1 id=\"6-vr-experience-study-vr體驗研究\"><a class=\"anchor\" href=\"#6-vr-experience-study-vr體驗研究\">#</a> 6 VR Experience Study VR 體驗研究</h1>\n<p>進行了一項 VR 體驗研究，觀察不同的時空多層次衝擊力反饋如何影響使用者的 VR 體驗。<br />\n並驗證 ImpactVest 的衝擊反饋比振動觸覺驅動更加真實。</p>\n<h2 id=\"61-apparatus-and-participants-裝置與參與者\"><a class=\"anchor\" href=\"#61-apparatus-and-participants-裝置與參與者\">#</a> 6.1 Apparatus and Participants 裝置與參與者</h2>\n<p>與上一個研究相同。</p>\n<p><img data-src=\"https://imgur.com/nWedDAb.png\" alt=\"ImpactVest picture 9\" /></p>\n<div class=\"note info\">\n<p>測量衝擊裝置之間延遲和衝擊水平 (左圖)。<br />\n振動馬達提供的振動力反饋 (中圖)。<br />\nVR 研究中所描述的衝擊裝置座標圖 (右圖)。</p>\n</div>\n<h2 id=\"62-task-and-procedure-任務與程序\"><a class=\"anchor\" href=\"#62-task-and-procedure-任務與程序\">#</a> 6.2 Task and Procedure 任務與程序</h2>\n<p>參與者一開始在一個房間裡，隨後出現七個敵人，包括兩名士兵、兩名劍客、兩名拳擊手和一門大砲。<br />\n分別以射擊、砍劈、拳擊和爆炸等方式逐一攻擊他們。</p>\n<p><img data-src=\"https://imgur.com/RuzrQ9B.png\" alt=\"ImpactVest picture 10\" /></p>\n<div class=\"note info\">\n<p>VR 體驗研究中，7 種場景不同的 ImpactVest 衝擊反饋。<br />\na. b. 士兵使用手槍、步槍射擊。<br />\nc. d. 劍士使用兩種軌跡擊劍。<br />\ne. f. 拳擊手進行兩種打擊。<br />\ng. 一門大炮發射炮彈爆炸。</p>\n</div>\n<h2 id=\"63-results-and-discussion-結果與討論\"><a class=\"anchor\" href=\"#63-results-and-discussion-結果與討論\">#</a> 6.3 Results and Discussion 結果與討論</h2>\n<p><img data-src=\"https://imgur.com/Oj3Rr6V.png\" alt=\"ImpactVest picture 11\" /></p>\n<div class=\"note info\">\n<p>驗證來自 ImpactVest 的觸覺反饋增強了 VR 真實感。<br />\nImpactVest 與振動觸覺驅動的體驗比較，包括真實性、可區分性、享受程度。</p>\n</div>\n<h1 id=\"7-limitations-and-future-work-限制與未來展望\"><a class=\"anchor\" href=\"#7-limitations-and-future-work-限制與未來展望\">#</a> 7 Limitations and Future Work 限制與未來展望</h1>\n<h2 id=\"目前限制\"><a class=\"anchor\" href=\"#目前限制\">#</a> 目前限制</h2>\n<p>無法從同一個衝擊裝置產生連續的衝擊刺激。<br />\n <code>解決方法1</code> : 採用更強力的馬達，雖然會增加衝擊裝置的重量，但是由整個身體支撐，所以在可接受的範圍。<br />\n <code>解決方法2</code> : 採用更強彈力帶或彈簧。</p>\n<h2 id=\"未來展望\"><a class=\"anchor\" href=\"#未來展望\">#</a> 未來展望</h2>\n<ol>\n<li>進一步減小衝擊裝置的大小，並將它們排列在更密集的佈局上，以獲得更高分辨率的衝擊反饋。</li>\n<li>結合振動觸覺驅動，以呈現更真實與多樣化的衝擊反饋。</li>\n</ol>\n<h1 id=\"8-conclusion-結論\"><a class=\"anchor\" href=\"#8-conclusion-結論\">#</a> 8 Conclusion 結論</h1>\n<p>本文提出了一種可穿戴設備 ImpactVest，使用 3×3 個衝擊裝置向身體呈現時空多層次衝擊力反饋。<br />\n並進行了 3 種研究，分別確認了衝擊強度的區分、不同衝擊的區分、明顯增強了 VR 體驗的真實感。</p>\n",
            "tags": [
                "C++ Tutorial",
                "Paper Reading",
                "VR"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-110-Balanced-Binary-Tree/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-110-Balanced-Binary-Tree/",
            "title": "LeetCode 110. Balanced Binary Tree",
            "date_published": "2022-04-27T16:27:44.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>以 <code>recursive</code>  遍歷判斷 <code>tree</code>  是否高度平衡</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * struct TreeNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     TreeNode *left;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     TreeNode *right;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">isBalanced</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token function\">findHeight</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">findHeight</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">isBalanced</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isBalanced</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">findHeight</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">findHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">findHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode",
                "tree"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-108-Convert-Sorted-Array-to-Binary-Search-Tree/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-108-Convert-Sorted-Array-to-Binary-Search-Tree/",
            "title": "LeetCode 108. Convert Sorted Array to Binary Search Tree",
            "date_published": "2022-04-27T16:27:34.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>以 <code>recursive</code>  遍歷將一個升冪的陣列轉成高度平衡的 <code>BST (二元搜尋樹)</code></p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * struct TreeNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     TreeNode *left;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     TreeNode *right;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">sortedArrayToBST</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">BST</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">BST</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">></span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">-</span> l<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        TreeNode<span class=\"token operator\">*</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        root<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> <span class=\"token function\">BST</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        root<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> <span class=\"token function\">BST</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode",
                "tree"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-104-Maximum-Depth-of-Binary-Tree/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-104-Maximum-Depth-of-Binary-Tree/",
            "title": "LeetCode 104. Maximum Depth of Binary Tree",
            "date_published": "2022-04-27T16:27:24.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>使用 <code>recursive</code>  遍歷判斷 <code>tree</code>  的深度</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * struct TreeNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     TreeNode *left;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     TreeNode *right;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode",
                "tree"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-101-Symmetric-Tree/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-101-Symmetric-Tree/",
            "title": "LeetCode 101. Symmetric Tree",
            "date_published": "2022-04-27T16:27:15.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>以 <code>recursive</code>  遍歷判斷 <code>tree</code>  是否對稱</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * struct TreeNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     TreeNode *left;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     TreeNode *right;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span> root<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> l<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">*</span> r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>l <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>l <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">-></span>val <span class=\"token operator\">!=</span> r<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span> r<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span> r<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode",
                "tree"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-100-Same-Tree/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-100-Same-Tree/",
            "title": "LeetCode 100. Same Tree",
            "date_published": "2022-04-27T16:27:07.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>以 <code>recursive</code>  遍歷判斷 <code>tree</code>  中所有 <code>node</code>  的值是否相同</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * struct TreeNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     TreeNode *left;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     TreeNode *right;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">isSameTree</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">*</span> q<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>q<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>q<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>p <span class=\"token operator\">&amp;&amp;</span> q<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>val <span class=\"token operator\">!=</span> q<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">isSameTree</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span> q<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isSameTree</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span> q<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode",
                "tree"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-94-Binary-Tree-Inorder-Traversal/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-94-Binary-Tree-Inorder-Traversal/",
            "title": "LeetCode 94. Binary Tree Inorder Traversal",
            "date_published": "2022-04-27T16:26:58.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p><code>inorder</code>  順序為 <code>左中右</code> <br />\n用 <code>stack</code>  儲存節點，先找到最左的 <code>node</code> ，再依序加入 <code>ret</code></p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * struct TreeNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     TreeNode *left;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     TreeNode *right;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        stack<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">></span> S<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        TreeNode<span class=\"token operator\">*</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>S<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> S<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> root <span class=\"token operator\">=</span> root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            cur <span class=\"token operator\">=</span> S<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            root <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>     </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode",
                "tree"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-88-Merge-Sorted-Array/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-88-Merge-Sorted-Array/",
            "title": "LeetCode 88. Merge Sorted Array",
            "date_published": "2022-04-27T16:26:49.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>將 <code>nums2</code>  存入 <code>nums1</code>  後進行 <code>sort</code></p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> nums1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-83-Remove-Duplicates-from-Sorted-List/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-83-Remove-Duplicates-from-Sorted-List/",
            "title": "LeetCode 83. Remove Duplicates from Sorted List",
            "date_published": "2022-04-27T16:26:38.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>如果當前 <code>node</code>  與下一個 <code>node</code>  相同，將當前 <code>node</code>  接到下下一個 <code>node</code></p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for singly-linked list.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * struct ListNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     ListNode *next;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     ListNode() : val(0), next(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">deleteDuplicates</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">&amp;&amp;</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>val <span class=\"token operator\">==</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span> cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">else</span> cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>        </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "list",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-70-Climbing-Stairs/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-70-Climbing-Stairs/",
            "title": "LeetCode 70. Climbing Stairs",
            "date_published": "2022-04-27T16:26:28.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>動態規劃<br />\n <code>dp[0]</code>  與 <code>dp[1]</code>  為 <code>1</code> <br />\n 之後 <code>dp[i]</code>  的方法數為 <code>dp[i - 1] + dp[i - 2]</code></p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-69-Sqrt-x/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-69-Sqrt-x/",
            "title": "LeetCode 69. Sqrt(x)",
            "date_published": "2022-04-27T16:26:21.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>開根號</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">mySqrt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-67-Add-Binary/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-67-Add-Binary/",
            "title": "LeetCode 67. Add Binary",
            "date_published": "2022-04-27T16:26:13.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>以另一個變數 <code>ret</code>  儲存 <code>a + b</code>  的值，並處理進位</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    string <span class=\"token function\">addBinary</span><span class=\"token punctuation\">(</span>string a<span class=\"token punctuation\">,</span> string b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        string <span class=\"token function\">ret</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> ret<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> ret<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            ret<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token operator\">++</span>ret<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-66-Plus-One/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-66-Plus-One/",
            "title": "LeetCode 66. Plus One",
            "date_published": "2022-04-27T16:26:06.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>將 <code>vector</code>  最後 <code>+1</code> <br />\n 需要一路往前處理進位</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">plusOne</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> digits<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token operator\">++</span>digits<span class=\"token punctuation\">[</span>digits<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>digits<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                digits<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> digits<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token operator\">++</span>digits<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> digits<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-58-Length-of-Last-Word/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-58-Length-of-Last-Word/",
            "title": "LeetCode 58. Length of Last Word",
            "date_published": "2022-04-27T16:25:57.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>以 <code>stringstream</code>  拆分字串</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">lengthOfLastWord</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        string word<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        stringstream <span class=\"token function\">ss</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ss <span class=\"token operator\">>></span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> word<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-53-Maximum-Subarray/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-53-Maximum-Subarray/",
            "title": "LeetCode 53. Maximum Subarray",
            "date_published": "2022-04-27T16:25:50.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>以 <code>cur</code>  紀錄目前遍歷的最大值<br />\n以 <code>ret</code>  紀錄全部的最大值</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">maxSubArray</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            cur <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> cur <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            ret <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-35-Search-Insert-Position/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-35-Search-Insert-Position/",
            "title": "LeetCode 35. Search Insert Position",
            "date_published": "2022-04-27T16:25:40.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>直接調用 <code>lower_bound</code>  找到位置，再減去 <code>nums.begin()</code>  得到位置的整數</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">searchInsert</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>        </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-28-Implement-strStr/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-28-Implement-strStr/",
            "title": "LeetCode 28. Implement strStr()",
            "date_published": "2022-04-27T16:25:28.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>先記錄 <code>haystack</code>  與 <code>needle</code>  的 <code>size</code> <br />\n 從 0 開始依序比對 <code>haystack 的 sub string</code>  與 <code>needle</code></p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">strStr</span><span class=\"token punctuation\">(</span>string haystack<span class=\"token punctuation\">,</span> string needle<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> hSize <span class=\"token operator\">=</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> nSize <span class=\"token operator\">=</span> needle<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nSize<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nSize <span class=\"token operator\">></span> hSize<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> hSize <span class=\"token operator\">-</span> nSize<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> nSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> needle<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-27-Remove-Element/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-27-Remove-Element/",
            "title": "LeetCode 27. Remove Element",
            "date_published": "2022-04-27T16:25:17.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>以 <code>i</code>  紀錄位置，依序遍歷</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">removeElement</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                nums<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        },
        {
            "id": "https://www.pinghenotes.com/leetcode/LeetCode-26-Remove-Duplicates-from-Sorted-Array/",
            "url": "https://www.pinghenotes.com/leetcode/LeetCode-26-Remove-Duplicates-from-Sorted-Array/",
            "title": "LeetCode 26. Remove Duplicates from Sorted Array",
            "date_published": "2022-04-27T16:25:08.000Z",
            "content_html": "<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<p>以變數 <code>i</code>  控制儲存位置，直接覆蓋重複的值</p>\n<h1 id=\"參考程式碼\"><a class=\"anchor\" href=\"#參考程式碼\">#</a> 參考程式碼</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">auto</span> fast_io <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ios<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tcin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">removeDuplicates</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>               nums<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "leetcode",
                "LeetCode"
            ]
        }
    ]
}